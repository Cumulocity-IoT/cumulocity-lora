/*
 * ThingPark things management Networks API
 * REST interface for networks management. 
 *
 * The version of the OpenAPI document: 7.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package lora.ns.actility.api.model.basestation;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * BsBriefInt
 */
@JsonPropertyOrder({ BsBriefInt.JSON_PROPERTY_AVG_ROUND_TRIP, BsBriefInt.JSON_PROPERTY_IP,
    BsBriefInt.JSON_PROPERTY_NAME, BsBriefInt.JSON_PROPERTY_RX_AVG_RATE, BsBriefInt.JSON_PROPERTY_TX_AVG_RATE,
    BsBriefInt.JSON_PROPERTY_TYPE, BsBriefInt.JSON_PROPERTY_STATE })
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-31T16:08:44.630492043+02:00[Europe/Paris]", comments = "Generator version: 7.6.0")
@JsonIgnoreProperties(value = "type", // ignore manually set type, it will be automatically generated by Jackson
                                      // during serialization
        allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({ @JsonSubTypes.Type(value = BsBriefIntEthernet.class, name = "ETHERNET"),
    @JsonSubTypes.Type(value = BsBriefIntCellular.class, name = "GPRS"),
    @JsonSubTypes.Type(value = BsBriefIntWlan.class, name = "WLAN") })

public abstract class BsBriefInt {
  public static final String JSON_PROPERTY_AVG_ROUND_TRIP = "avgRoundTrip";
  private Integer avgRoundTrip;

  public static final String JSON_PROPERTY_IP = "ip";
  private String ip;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_RX_AVG_RATE = "rxAvgRate";
  private Integer rxAvgRate;

  public static final String JSON_PROPERTY_TX_AVG_RATE = "txAvgRate";
  private Integer txAvgRate;

  /**
   * Interface type
   */
  public enum TypeEnum {
    ETHERNET("ETHERNET"),

    GPRS("GPRS"),

    WLAN("WLAN");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  protected TypeEnum type;

  public static final String JSON_PROPERTY_STATE = "state";
  private Integer state;

  public BsBriefInt() {
  }

  public BsBriefInt avgRoundTrip(Integer avgRoundTrip) {

    this.avgRoundTrip = avgRoundTrip;
    return this;
  }

  /**
   * Interface average round trip in ms
   * 
   * @return avgRoundTrip
   **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVG_ROUND_TRIP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAvgRoundTrip() {
    return avgRoundTrip;
  }

  @JsonProperty(JSON_PROPERTY_AVG_ROUND_TRIP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvgRoundTrip(Integer avgRoundTrip) {
    this.avgRoundTrip = avgRoundTrip;
  }

  public BsBriefInt ip(String ip) {

    this.ip = ip;
    return this;
  }

  /**
   * Interface IP address
   * 
   * @return ip
   **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIp() {
    return ip;
  }

  @JsonProperty(JSON_PROPERTY_IP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIp(String ip) {
    this.ip = ip;
  }

  public BsBriefInt name(String name) {

    this.name = name;
    return this;
  }

  /**
   * Interface name
   * 
   * @return name
   **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }

  public BsBriefInt rxAvgRate(Integer rxAvgRate) {

    this.rxAvgRate = rxAvgRate;
    return this;
  }

  /**
   * Interface Rx average bitrate (b/s)
   * 
   * @return rxAvgRate
   **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RX_AVG_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRxAvgRate() {
    return rxAvgRate;
  }

  @JsonProperty(JSON_PROPERTY_RX_AVG_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRxAvgRate(Integer rxAvgRate) {
    this.rxAvgRate = rxAvgRate;
  }

  public BsBriefInt txAvgRate(Integer txAvgRate) {

    this.txAvgRate = txAvgRate;
    return this;
  }

  /**
   * Interface Tx average bitrate (b/s)
   * 
   * @return txAvgRate
   **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TX_AVG_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTxAvgRate() {
    return txAvgRate;
  }

  @JsonProperty(JSON_PROPERTY_TX_AVG_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTxAvgRate(Integer txAvgRate) {
    this.txAvgRate = txAvgRate;
  }

  public BsBriefInt type(TypeEnum type) {

    this.type = type;
    return this;
  }

  /**
   * Interface type
   * 
   * @return type
   **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }

  public BsBriefInt state(Integer state) {

    this.state = state;
    return this;
  }

  /**
   * State for a WLAN interface: - Down / No started (5) - Up / SSID not found /
   * No sig. (4) - Up / No IP / No DHCP lease (3) - Up / Network down (2) - Up and
   * running (1) - Up / running and used (0) - Unknown because of disconnected
   * Base Station (null)
   * 
   * @return state
   **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getState() {
    return state;
  }

  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setState(Integer state) {
    this.state = state;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BsBriefInt bsBriefInt = (BsBriefInt) o;
    return Objects.equals(this.avgRoundTrip, bsBriefInt.avgRoundTrip) && Objects.equals(this.ip, bsBriefInt.ip)
            && Objects.equals(this.name, bsBriefInt.name) && Objects.equals(this.rxAvgRate, bsBriefInt.rxAvgRate)
            && Objects.equals(this.txAvgRate, bsBriefInt.txAvgRate) && Objects.equals(this.type, bsBriefInt.type)
            && Objects.equals(this.state, bsBriefInt.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avgRoundTrip, ip, name, rxAvgRate, txAvgRate, type, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BsBriefInt {\n");
    sb.append("    avgRoundTrip: ").append(toIndentedString(avgRoundTrip)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rxAvgRate: ").append(toIndentedString(rxAvgRate)).append("\n");
    sb.append("    txAvgRate: ").append(toIndentedString(txAvgRate)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
