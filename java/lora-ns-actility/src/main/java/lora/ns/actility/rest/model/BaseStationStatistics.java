/*
 * ThingPark Enterprise - Dx-Core API
 * API providing configuration and provisioning features for ThingPark Enterprise.
 *
 * OpenAPI spec version: 1.8.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package lora.ns.actility.rest.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import java.util.ArrayList;
import java.util.List;

/**
 * Resource representing read-only statistics for base stations.
 */
public class BaseStationStatistics {
  private String creationTime = null;

  /**
   * Connection state of the base station. Possible values are: &#39;NEVERCNX&#39; (the base station has never been connected), &#39;CNX&#39; (the base station has an IEC link started with at least a LRC), &#39;DISC&#39; (the base station is disconnected from all LRCs), &#39;UNKNOWN&#39; (the base station&#39;s connection state is currently undefined).
   */
  public enum ConnectionStateEnum {
    NEVERCNX("NEVERCNX"),
    
    CNX("CNX"),
    
    DISC("DISC"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    ConnectionStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ConnectionStateEnum fromValue(String text) {
      for (ConnectionStateEnum b : ConnectionStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  private ConnectionStateEnum connectionState = null;

  /**
   * Health state of the base station. Possible values are: &#39;INIT&#39;, &#39;ACTIVE&#39;, &#39;BACKHAUL_CNX_ERROR&#39; and &#39;RF_ERROR&#39;.
   */
  public enum HealthStateEnum {
    INIT("INIT"),
    
    ACTIVE("ACTIVE"),
    
    BACKHAUL_CNX_ERROR("BACKHAUL_CNX_ERROR"),
    
    RF_ERROR("RF_ERROR");

    private String value;

    HealthStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HealthStateEnum fromValue(String text) {
      for (HealthStateEnum b : HealthStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  private HealthStateEnum healthState = null;

  /**
   * GPS receiver synchronization status. Possible values are &#39;LOCKING_OR_NO_SIGNAL&#39; or &#39;LOCKED&#39;.
   */
  public enum GpsSyncStatusEnum {
    LOCKING_OR_NO_SIGNAL("LOCKING_OR_NO_SIGNAL"),
    
    LOCKED("LOCKED");

    private String value;

    GpsSyncStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static GpsSyncStatusEnum fromValue(String text) {
      for (GpsSyncStatusEnum b : GpsSyncStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  private GpsSyncStatusEnum gpsSyncStatus = null;

  /**
   * Time synchronization status. Possible values &#39;LOCAL&#39;, &#39;NTP&#39; or &#39;GPS&#39;.
   */
  public enum TimeSyncStatusEnum {
    LOCAL("LOCAL"),
    
    NTP("NTP"),
    
    GPS("GPS");

    private String value;

    TimeSyncStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TimeSyncStatusEnum fromValue(String text) {
      for (TimeSyncStatusEnum b : TimeSyncStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  private TimeSyncStatusEnum timeSyncStatus = null;

  private String lastReportingTime = null;

  private String lastUplinkTime = null;

  private String lastDownlinkTime = null;

  /**
   * Indicates how the network location of the base station is currently defined. Possible values are &#39;UNKNOWN&#39;, &#39;ADMINISTRATIVELY&#39; or &#39;GPS&#39;.
   */
  public enum LocationTypeEnum {
    UNKNOWN("UNKNOWN"),
    
    ADMINISTRATIVELY("ADMINISTRATIVELY"),
    
    GPS("GPS");

    private String value;

    LocationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LocationTypeEnum fromValue(String text) {
      for (LocationTypeEnum b : LocationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  private LocationTypeEnum locationType = null;

  private String rfRegionId = null;

  private List<ConnectionInterfaceStatistics> interfaceStatistics = null;

  private Boolean isRX2Activated = null;

  /**
   * ISM band associated with the base station. The following value are supported: &#39;eu868&#39;, &#39;eu433&#39;, &#39;cn779&#39;, &#39;as923&#39;, &#39;kr920&#39;, &#39;sg920&#39;, &#39;tw920&#39;, &#39;us915&#39;, &#39;au915&#39;, &#39;cn470&#39;.
   */
  public enum IsmBandEnum {
    EU868("eu868"),
    
    EU433("eu433"),
    
    CN779("cn779"),
    
    AS923("as923"),
    
    KR920("kr920"),
    
    SG920("sg920"),
    
    TW920("tw920"),
    
    US915("us915"),
    
    AU915("au915"),
    
    CN470("cn470");

    private String value;

    IsmBandEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IsmBandEnum fromValue(String text) {
      for (IsmBandEnum b : IsmBandEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  private IsmBandEnum ismBand = null;

  private Float lastGeoLatitude = null;

  private Float lastGeoLongitude = null;

  private Integer lastGeoAltitude = null;

  private Float fileSystemUsage = null;

  private String softwareVersion = null;

  private String backupSoftwareVersion = null;

  private AlarmStatistics alarmStatistics = null;

  private LogicalChannelDetails logicalChannelStatistics = null;

  private Integer uplinkPacketPerHour = null;

  private Integer downlinkPacketPerHour = null;

  private String lastSystemReboot = null;

  private String lastUpdateUser = null;

  private String lastUpdateTime = null;

  /**
   * Indicates the power source used by the base station.
   */
  public enum PowerSourceEnum {
    WIND("WIND"),
    
    SOLAR("SOLAR"),
    
    BATTERY("BATTERY"),
    
    POE("POE"),
    
    MAINS("MAINS");

    private String value;

    PowerSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PowerSourceEnum fromValue(String text) {
      for (PowerSourceEnum b : PowerSourceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  private PowerSourceEnum powerSource = null;

  private Integer batteryLevel = null;

  private Integer temperature = null;

  @JsonProperty("CPUUsage")
  private Integer cpUUsage = null;

  @JsonProperty("RAMUsage")
  private Integer raMUsage = null;

  private String lastSoftwareReboot = null;

  private Boolean lastClassBReady = null;

  private String certificateGenerationTime = null;

  public BaseStationStatistics creationTime(String creationTime) {
    this.creationTime = creationTime;
    return this;
  }

   /**
   * ISO 8601 time of the base station creation.
   * @return creationTime
  **/
  public String getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }

  public BaseStationStatistics connectionState(ConnectionStateEnum connectionState) {
    this.connectionState = connectionState;
    return this;
  }

   /**
   * Connection state of the base station. Possible values are: &#39;NEVERCNX&#39; (the base station has never been connected), &#39;CNX&#39; (the base station has an IEC link started with at least a LRC), &#39;DISC&#39; (the base station is disconnected from all LRCs), &#39;UNKNOWN&#39; (the base station&#39;s connection state is currently undefined).
   * @return connectionState
  **/
  public ConnectionStateEnum getConnectionState() {
    return connectionState;
  }

  public void setConnectionState(ConnectionStateEnum connectionState) {
    this.connectionState = connectionState;
  }

  public BaseStationStatistics healthState(HealthStateEnum healthState) {
    this.healthState = healthState;
    return this;
  }

   /**
   * Health state of the base station. Possible values are: &#39;INIT&#39;, &#39;ACTIVE&#39;, &#39;BACKHAUL_CNX_ERROR&#39; and &#39;RF_ERROR&#39;.
   * @return healthState
  **/
  public HealthStateEnum getHealthState() {
    return healthState;
  }

  public void setHealthState(HealthStateEnum healthState) {
    this.healthState = healthState;
  }

  public BaseStationStatistics gpsSyncStatus(GpsSyncStatusEnum gpsSyncStatus) {
    this.gpsSyncStatus = gpsSyncStatus;
    return this;
  }

   /**
   * GPS receiver synchronization status. Possible values are &#39;LOCKING_OR_NO_SIGNAL&#39; or &#39;LOCKED&#39;.
   * @return gpsSyncStatus
  **/
  public GpsSyncStatusEnum getGpsSyncStatus() {
    return gpsSyncStatus;
  }

  public void setGpsSyncStatus(GpsSyncStatusEnum gpsSyncStatus) {
    this.gpsSyncStatus = gpsSyncStatus;
  }

  public BaseStationStatistics timeSyncStatus(TimeSyncStatusEnum timeSyncStatus) {
    this.timeSyncStatus = timeSyncStatus;
    return this;
  }

   /**
   * Time synchronization status. Possible values &#39;LOCAL&#39;, &#39;NTP&#39; or &#39;GPS&#39;.
   * @return timeSyncStatus
  **/
  public TimeSyncStatusEnum getTimeSyncStatus() {
    return timeSyncStatus;
  }

  public void setTimeSyncStatus(TimeSyncStatusEnum timeSyncStatus) {
    this.timeSyncStatus = timeSyncStatus;
  }

  public BaseStationStatistics lastReportingTime(String lastReportingTime) {
    this.lastReportingTime = lastReportingTime;
    return this;
  }

   /**
   * ISO 8601 time of the last reporting frame.
   * @return lastReportingTime
  **/
  public String getLastReportingTime() {
    return lastReportingTime;
  }

  public void setLastReportingTime(String lastReportingTime) {
    this.lastReportingTime = lastReportingTime;
  }

  public BaseStationStatistics lastUplinkTime(String lastUplinkTime) {
    this.lastUplinkTime = lastUplinkTime;
    return this;
  }

   /**
   * ISO 8601 time of the last uplink.
   * @return lastUplinkTime
  **/
  public String getLastUplinkTime() {
    return lastUplinkTime;
  }

  public void setLastUplinkTime(String lastUplinkTime) {
    this.lastUplinkTime = lastUplinkTime;
  }

  public BaseStationStatistics lastDownlinkTime(String lastDownlinkTime) {
    this.lastDownlinkTime = lastDownlinkTime;
    return this;
  }

   /**
   * ISO 8601 time of the last downlink.
   * @return lastDownlinkTime
  **/
  public String getLastDownlinkTime() {
    return lastDownlinkTime;
  }

  public void setLastDownlinkTime(String lastDownlinkTime) {
    this.lastDownlinkTime = lastDownlinkTime;
  }

  public BaseStationStatistics locationType(LocationTypeEnum locationType) {
    this.locationType = locationType;
    return this;
  }

   /**
   * Indicates how the network location of the base station is currently defined. Possible values are &#39;UNKNOWN&#39;, &#39;ADMINISTRATIVELY&#39; or &#39;GPS&#39;.
   * @return locationType
  **/
  public LocationTypeEnum getLocationType() {
    return locationType;
  }

  public void setLocationType(LocationTypeEnum locationType) {
    this.locationType = locationType;
  }

  public BaseStationStatistics rfRegionId(String rfRegionId) {
    this.rfRegionId = rfRegionId;
    return this;
  }

   /**
   * RF region identifier.
   * @return rfRegionId
  **/
  public String getRfRegionId() {
    return rfRegionId;
  }

  public void setRfRegionId(String rfRegionId) {
    this.rfRegionId = rfRegionId;
  }

  public BaseStationStatistics interfaceStatistics(List<ConnectionInterfaceStatistics> interfaceStatistics) {
    this.interfaceStatistics = interfaceStatistics;
    return this;
  }

  public BaseStationStatistics addInterfaceStatisticsItem(ConnectionInterfaceStatistics interfaceStatisticsItem) {
    if (this.interfaceStatistics == null) {
      this.interfaceStatistics = new ArrayList<ConnectionInterfaceStatistics>();
    }
    this.interfaceStatistics.add(interfaceStatisticsItem);
    return this;
  }

   /**
   * Statistics about the base station connection interfaces.
   * @return interfaceStatistics
  **/
  public List<ConnectionInterfaceStatistics> getInterfaceStatistics() {
    return interfaceStatistics;
  }

  public void setInterfaceStatistics(List<ConnectionInterfaceStatistics> interfaceStatistics) {
    this.interfaceStatistics = interfaceStatistics;
  }

  public BaseStationStatistics isRX2Activated(Boolean isRX2Activated) {
    this.isRX2Activated = isRX2Activated;
    return this;
  }

   /**
   * Indicates if RX2 optimization is activated.
   * @return isRX2Activated
  **/
  public Boolean isIsRX2Activated() {
    return isRX2Activated;
  }

  public void setIsRX2Activated(Boolean isRX2Activated) {
    this.isRX2Activated = isRX2Activated;
  }

  public BaseStationStatistics ismBand(IsmBandEnum ismBand) {
    this.ismBand = ismBand;
    return this;
  }

   /**
   * ISM band associated with the base station. The following value are supported: &#39;eu868&#39;, &#39;eu433&#39;, &#39;cn779&#39;, &#39;as923&#39;, &#39;kr920&#39;, &#39;sg920&#39;, &#39;tw920&#39;, &#39;us915&#39;, &#39;au915&#39;, &#39;cn470&#39;.
   * @return ismBand
  **/
  public IsmBandEnum getIsmBand() {
    return ismBand;
  }

  public void setIsmBand(IsmBandEnum ismBand) {
    this.ismBand = ismBand;
  }

  public BaseStationStatistics lastGeoLatitude(Float lastGeoLatitude) {
    this.lastGeoLatitude = lastGeoLatitude;
    return this;
  }

   /**
   * Last known latitude of the base station if network location is available.
   * @return lastGeoLatitude
  **/
  public Float getLastGeoLatitude() {
    return lastGeoLatitude;
  }

  public void setLastGeoLatitude(Float lastGeoLatitude) {
    this.lastGeoLatitude = lastGeoLatitude;
  }

  public BaseStationStatistics lastGeoLongitude(Float lastGeoLongitude) {
    this.lastGeoLongitude = lastGeoLongitude;
    return this;
  }

   /**
   * Last known longitude of the base station if network location is available.
   * @return lastGeoLongitude
  **/
  public Float getLastGeoLongitude() {
    return lastGeoLongitude;
  }

  public void setLastGeoLongitude(Float lastGeoLongitude) {
    this.lastGeoLongitude = lastGeoLongitude;
  }

  public BaseStationStatistics lastGeoAltitude(Integer lastGeoAltitude) {
    this.lastGeoAltitude = lastGeoAltitude;
    return this;
  }

   /**
   * Last known altitude of the base station if network location is available.
   * @return lastGeoAltitude
  **/
  public Integer getLastGeoAltitude() {
    return lastGeoAltitude;
  }

  public void setLastGeoAltitude(Integer lastGeoAltitude) {
    this.lastGeoAltitude = lastGeoAltitude;
  }

  public BaseStationStatistics fileSystemUsage(Float fileSystemUsage) {
    this.fileSystemUsage = fileSystemUsage;
    return this;
  }

   /**
   * File system current usage (occupation percentage).
   * @return fileSystemUsage
  **/
  public Float getFileSystemUsage() {
    return fileSystemUsage;
  }

  public void setFileSystemUsage(Float fileSystemUsage) {
    this.fileSystemUsage = fileSystemUsage;
  }

  public BaseStationStatistics softwareVersion(String softwareVersion) {
    this.softwareVersion = softwareVersion;
    return this;
  }

   /**
   * Software version of the base station.
   * @return softwareVersion
  **/
  public String getSoftwareVersion() {
    return softwareVersion;
  }

  public void setSoftwareVersion(String softwareVersion) {
    this.softwareVersion = softwareVersion;
  }

  public BaseStationStatistics backupSoftwareVersion(String backupSoftwareVersion) {
    this.backupSoftwareVersion = backupSoftwareVersion;
    return this;
  }

   /**
   * Software version of the last backup of the base station.
   * @return backupSoftwareVersion
  **/
  public String getBackupSoftwareVersion() {
    return backupSoftwareVersion;
  }

  public void setBackupSoftwareVersion(String backupSoftwareVersion) {
    this.backupSoftwareVersion = backupSoftwareVersion;
  }

  public BaseStationStatistics alarmStatistics(AlarmStatistics alarmStatistics) {
    this.alarmStatistics = alarmStatistics;
    return this;
  }

   /**
   * Statistics about alarms, in case the base station has raised any alarm.
   * @return alarmStatistics
  **/
  public AlarmStatistics getAlarmStatistics() {
    return alarmStatistics;
  }

  public void setAlarmStatistics(AlarmStatistics alarmStatistics) {
    this.alarmStatistics = alarmStatistics;
  }

  public BaseStationStatistics logicalChannelStatistics(LogicalChannelDetails logicalChannelStatistics) {
    this.logicalChannelStatistics = logicalChannelStatistics;
    return this;
  }

   /**
   * Statistics about available logical channels for the base station.
   * @return logicalChannelStatistics
  **/
  public LogicalChannelDetails getLogicalChannelStatistics() {
    return logicalChannelStatistics;
  }

  public void setLogicalChannelStatistics(LogicalChannelDetails logicalChannelStatistics) {
    this.logicalChannelStatistics = logicalChannelStatistics;
  }

  public BaseStationStatistics uplinkPacketPerHour(Integer uplinkPacketPerHour) {
    this.uplinkPacketPerHour = uplinkPacketPerHour;
    return this;
  }

   /**
   * Average uplink packets received per hour for the base station.
   * @return uplinkPacketPerHour
  **/
  public Integer getUplinkPacketPerHour() {
    return uplinkPacketPerHour;
  }

  public void setUplinkPacketPerHour(Integer uplinkPacketPerHour) {
    this.uplinkPacketPerHour = uplinkPacketPerHour;
  }

  public BaseStationStatistics downlinkPacketPerHour(Integer downlinkPacketPerHour) {
    this.downlinkPacketPerHour = downlinkPacketPerHour;
    return this;
  }

   /**
   * Average downlink packets sent per hour for the base station.
   * @return downlinkPacketPerHour
  **/
  public Integer getDownlinkPacketPerHour() {
    return downlinkPacketPerHour;
  }

  public void setDownlinkPacketPerHour(Integer downlinkPacketPerHour) {
    this.downlinkPacketPerHour = downlinkPacketPerHour;
  }

  public BaseStationStatistics lastSystemReboot(String lastSystemReboot) {
    this.lastSystemReboot = lastSystemReboot;
    return this;
  }

   /**
   * ISO 8601 time of the last system reboot of the base station.
   * @return lastSystemReboot
  **/
  public String getLastSystemReboot() {
    return lastSystemReboot;
  }

  public void setLastSystemReboot(String lastSystemReboot) {
    this.lastSystemReboot = lastSystemReboot;
  }

  public BaseStationStatistics lastUpdateUser(String lastUpdateUser) {
    this.lastUpdateUser = lastUpdateUser;
    return this;
  }

   /**
   * Name of the user who performed the last update of the base station.
   * @return lastUpdateUser
  **/
  public String getLastUpdateUser() {
    return lastUpdateUser;
  }

  public void setLastUpdateUser(String lastUpdateUser) {
    this.lastUpdateUser = lastUpdateUser;
  }

  public BaseStationStatistics lastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

   /**
   * ISO 8601 time of the last update of the base station.
   * @return lastUpdateTime
  **/
  public String getLastUpdateTime() {
    return lastUpdateTime;
  }

  public void setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
  }

  public BaseStationStatistics powerSource(PowerSourceEnum powerSource) {
    this.powerSource = powerSource;
    return this;
  }

   /**
   * Indicates the power source used by the base station.
   * @return powerSource
  **/
  public PowerSourceEnum getPowerSource() {
    return powerSource;
  }

  public void setPowerSource(PowerSourceEnum powerSource) {
    this.powerSource = powerSource;
  }

  public BaseStationStatistics batteryLevel(Integer batteryLevel) {
    this.batteryLevel = batteryLevel;
    return this;
  }

   /**
   * Remaining battery level (%) when the activated power source is WIND or SOLAR.
   * @return batteryLevel
  **/
  public Integer getBatteryLevel() {
    return batteryLevel;
  }

  public void setBatteryLevel(Integer batteryLevel) {
    this.batteryLevel = batteryLevel;
  }

  public BaseStationStatistics temperature(Integer temperature) {
    this.temperature = temperature;
    return this;
  }

   /**
   * Indicates the last known base station temperature.
   * @return temperature
  **/
  public Integer getTemperature() {
    return temperature;
  }

  public void setTemperature(Integer temperature) {
    this.temperature = temperature;
  }

  public BaseStationStatistics cpUUsage(Integer cpUUsage) {
    this.cpUUsage = cpUUsage;
    return this;
  }

   /**
   * Indicates the last known CPU usage (%) for the base station.
   * @return cpUUsage
  **/
  public Integer getCpUUsage() {
    return cpUUsage;
  }

  public void setCpUUsage(Integer cpUUsage) {
    this.cpUUsage = cpUUsage;
  }

  public BaseStationStatistics raMUsage(Integer raMUsage) {
    this.raMUsage = raMUsage;
    return this;
  }

   /**
   * Indicates the last known RAM usage (%) for the base station.
   * @return raMUsage
  **/
  public Integer getRaMUsage() {
    return raMUsage;
  }

  public void setRaMUsage(Integer raMUsage) {
    this.raMUsage = raMUsage;
  }

  public BaseStationStatistics lastSoftwareReboot(String lastSoftwareReboot) {
    this.lastSoftwareReboot = lastSoftwareReboot;
    return this;
  }

   /**
   * ISO 8601 time of the last base station software reboot.
   * @return lastSoftwareReboot
  **/
  public String getLastSoftwareReboot() {
    return lastSoftwareReboot;
  }

  public void setLastSoftwareReboot(String lastSoftwareReboot) {
    this.lastSoftwareReboot = lastSoftwareReboot;
  }

  public BaseStationStatistics lastClassBReady(Boolean lastClassBReady) {
    this.lastClassBReady = lastClassBReady;
    return this;
  }

   /**
   * Indicates the last known status of the classBReady data for the base station.
   * @return lastClassBReady
  **/
  public Boolean isLastClassBReady() {
    return lastClassBReady;
  }

  public void setLastClassBReady(Boolean lastClassBReady) {
    this.lastClassBReady = lastClassBReady;
  }

  public BaseStationStatistics certificateGenerationTime(String certificateGenerationTime) {
    this.certificateGenerationTime = certificateGenerationTime;
    return this;
  }

   /**
   * ISO 8601 time of the last generated certificate.
   * @return certificateGenerationTime
  **/
  public String getCertificateGenerationTime() {
    return certificateGenerationTime;
  }

  public void setCertificateGenerationTime(String certificateGenerationTime) {
    this.certificateGenerationTime = certificateGenerationTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseStationStatistics baseStationStatistics = (BaseStationStatistics) o;
    return Objects.equals(this.creationTime, baseStationStatistics.creationTime) &&
        Objects.equals(this.connectionState, baseStationStatistics.connectionState) &&
        Objects.equals(this.healthState, baseStationStatistics.healthState) &&
        Objects.equals(this.gpsSyncStatus, baseStationStatistics.gpsSyncStatus) &&
        Objects.equals(this.timeSyncStatus, baseStationStatistics.timeSyncStatus) &&
        Objects.equals(this.lastReportingTime, baseStationStatistics.lastReportingTime) &&
        Objects.equals(this.lastUplinkTime, baseStationStatistics.lastUplinkTime) &&
        Objects.equals(this.lastDownlinkTime, baseStationStatistics.lastDownlinkTime) &&
        Objects.equals(this.locationType, baseStationStatistics.locationType) &&
        Objects.equals(this.rfRegionId, baseStationStatistics.rfRegionId) &&
        Objects.equals(this.interfaceStatistics, baseStationStatistics.interfaceStatistics) &&
        Objects.equals(this.isRX2Activated, baseStationStatistics.isRX2Activated) &&
        Objects.equals(this.ismBand, baseStationStatistics.ismBand) &&
        Objects.equals(this.lastGeoLatitude, baseStationStatistics.lastGeoLatitude) &&
        Objects.equals(this.lastGeoLongitude, baseStationStatistics.lastGeoLongitude) &&
        Objects.equals(this.lastGeoAltitude, baseStationStatistics.lastGeoAltitude) &&
        Objects.equals(this.fileSystemUsage, baseStationStatistics.fileSystemUsage) &&
        Objects.equals(this.softwareVersion, baseStationStatistics.softwareVersion) &&
        Objects.equals(this.backupSoftwareVersion, baseStationStatistics.backupSoftwareVersion) &&
        Objects.equals(this.alarmStatistics, baseStationStatistics.alarmStatistics) &&
        Objects.equals(this.logicalChannelStatistics, baseStationStatistics.logicalChannelStatistics) &&
        Objects.equals(this.uplinkPacketPerHour, baseStationStatistics.uplinkPacketPerHour) &&
        Objects.equals(this.downlinkPacketPerHour, baseStationStatistics.downlinkPacketPerHour) &&
        Objects.equals(this.lastSystemReboot, baseStationStatistics.lastSystemReboot) &&
        Objects.equals(this.lastUpdateUser, baseStationStatistics.lastUpdateUser) &&
        Objects.equals(this.lastUpdateTime, baseStationStatistics.lastUpdateTime) &&
        Objects.equals(this.powerSource, baseStationStatistics.powerSource) &&
        Objects.equals(this.batteryLevel, baseStationStatistics.batteryLevel) &&
        Objects.equals(this.temperature, baseStationStatistics.temperature) &&
        Objects.equals(this.cpUUsage, baseStationStatistics.cpUUsage) &&
        Objects.equals(this.raMUsage, baseStationStatistics.raMUsage) &&
        Objects.equals(this.lastSoftwareReboot, baseStationStatistics.lastSoftwareReboot) &&
        Objects.equals(this.lastClassBReady, baseStationStatistics.lastClassBReady) &&
        Objects.equals(this.certificateGenerationTime, baseStationStatistics.certificateGenerationTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, connectionState, healthState, gpsSyncStatus, timeSyncStatus, lastReportingTime, lastUplinkTime, lastDownlinkTime, locationType, rfRegionId, interfaceStatistics, isRX2Activated, ismBand, lastGeoLatitude, lastGeoLongitude, lastGeoAltitude, fileSystemUsage, softwareVersion, backupSoftwareVersion, alarmStatistics, logicalChannelStatistics, uplinkPacketPerHour, downlinkPacketPerHour, lastSystemReboot, lastUpdateUser, lastUpdateTime, powerSource, batteryLevel, temperature, cpUUsage, raMUsage, lastSoftwareReboot, lastClassBReady, certificateGenerationTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseStationStatistics {\n");
    
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    connectionState: ").append(toIndentedString(connectionState)).append("\n");
    sb.append("    healthState: ").append(toIndentedString(healthState)).append("\n");
    sb.append("    gpsSyncStatus: ").append(toIndentedString(gpsSyncStatus)).append("\n");
    sb.append("    timeSyncStatus: ").append(toIndentedString(timeSyncStatus)).append("\n");
    sb.append("    lastReportingTime: ").append(toIndentedString(lastReportingTime)).append("\n");
    sb.append("    lastUplinkTime: ").append(toIndentedString(lastUplinkTime)).append("\n");
    sb.append("    lastDownlinkTime: ").append(toIndentedString(lastDownlinkTime)).append("\n");
    sb.append("    locationType: ").append(toIndentedString(locationType)).append("\n");
    sb.append("    rfRegionId: ").append(toIndentedString(rfRegionId)).append("\n");
    sb.append("    interfaceStatistics: ").append(toIndentedString(interfaceStatistics)).append("\n");
    sb.append("    isRX2Activated: ").append(toIndentedString(isRX2Activated)).append("\n");
    sb.append("    ismBand: ").append(toIndentedString(ismBand)).append("\n");
    sb.append("    lastGeoLatitude: ").append(toIndentedString(lastGeoLatitude)).append("\n");
    sb.append("    lastGeoLongitude: ").append(toIndentedString(lastGeoLongitude)).append("\n");
    sb.append("    lastGeoAltitude: ").append(toIndentedString(lastGeoAltitude)).append("\n");
    sb.append("    fileSystemUsage: ").append(toIndentedString(fileSystemUsage)).append("\n");
    sb.append("    softwareVersion: ").append(toIndentedString(softwareVersion)).append("\n");
    sb.append("    backupSoftwareVersion: ").append(toIndentedString(backupSoftwareVersion)).append("\n");
    sb.append("    alarmStatistics: ").append(toIndentedString(alarmStatistics)).append("\n");
    sb.append("    logicalChannelStatistics: ").append(toIndentedString(logicalChannelStatistics)).append("\n");
    sb.append("    uplinkPacketPerHour: ").append(toIndentedString(uplinkPacketPerHour)).append("\n");
    sb.append("    downlinkPacketPerHour: ").append(toIndentedString(downlinkPacketPerHour)).append("\n");
    sb.append("    lastSystemReboot: ").append(toIndentedString(lastSystemReboot)).append("\n");
    sb.append("    lastUpdateUser: ").append(toIndentedString(lastUpdateUser)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    powerSource: ").append(toIndentedString(powerSource)).append("\n");
    sb.append("    batteryLevel: ").append(toIndentedString(batteryLevel)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    cpUUsage: ").append(toIndentedString(cpUUsage)).append("\n");
    sb.append("    raMUsage: ").append(toIndentedString(raMUsage)).append("\n");
    sb.append("    lastSoftwareReboot: ").append(toIndentedString(lastSoftwareReboot)).append("\n");
    sb.append("    lastClassBReady: ").append(toIndentedString(lastClassBReady)).append("\n");
    sb.append("    certificateGenerationTime: ").append(toIndentedString(certificateGenerationTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

