/*
 * ThingPark Enterprise - Dx-Core API
 * API providing configuration and provisioning features for ThingPark Enterprise.
 *
 * OpenAPI spec version: 1.8.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package lora.ns.actility.rest.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * Resource representing read-only statistics about the connection interface for
 * a base station.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class ConnectionInterfaceStatistics {
  private String name = null;

  /**
   * State of the interface. The following value are supported: &#39;DOWN&#39;,
   * &#39;UP_LINKDOWN&#39; (only for ETHERNET), &#39;UP_NOSIGNAL&#39; (only for
   * GPRS), &#39;UP_NOIP&#39;, &#39;UP_NETWORKDOWN&#39;, &#39;UP_RUNNING&#39; and
   * &#39;UP_RUNNING_USED&#39;.
   */
  public enum StateEnum {
    DOWN("DOWN"),

    UP_LINKDOWN("UP_LINKDOWN"),

    UP_NOSIGNAL("UP_NOSIGNAL"),

    UP_NOIP("UP_NOIP"),

    UP_NETWORKDOWN("UP_NETWORKDOWN"),

    UP_RUNNING("UP_RUNNING"),

    UP_RUNNING_USED("UP_RUNNING_USED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  private StateEnum state = null;

  /**
   * Type of connection for the base station.
   */
  public enum TypeEnum {
    ETHERNET("ETHERNET"),

    GPRS("GPRS");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  private TypeEnum type = null;

  private Integer averageRoundTrip = null;

  private Integer deviationRoundTrip = null;

  private Float totalTrafficSent = null;

  private Float totalTrafficReceived = null;

  private String ip = null;

  private String iccid = null;

  public ConnectionInterfaceStatistics name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the interface.
   * 
   * @return name
   **/
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ConnectionInterfaceStatistics state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * State of the interface. The following value are supported: &#39;DOWN&#39;,
   * &#39;UP_LINKDOWN&#39; (only for ETHERNET), &#39;UP_NOSIGNAL&#39; (only for
   * GPRS), &#39;UP_NOIP&#39;, &#39;UP_NETWORKDOWN&#39;, &#39;UP_RUNNING&#39; and
   * &#39;UP_RUNNING_USED&#39;.
   * 
   * @return state
   **/
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public ConnectionInterfaceStatistics type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of connection for the base station.
   * 
   * @return type
   **/
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public ConnectionInterfaceStatistics averageRoundTrip(Integer averageRoundTrip) {
    this.averageRoundTrip = averageRoundTrip;
    return this;
  }

  /**
   * Interface average round trip for the base station.
   * 
   * @return averageRoundTrip
   **/
  public Integer getAverageRoundTrip() {
    return averageRoundTrip;
  }

  public void setAverageRoundTrip(Integer averageRoundTrip) {
    this.averageRoundTrip = averageRoundTrip;
  }

  public ConnectionInterfaceStatistics deviationRoundTrip(Integer deviationRoundTrip) {
    this.deviationRoundTrip = deviationRoundTrip;
    return this;
  }

  /**
   * Interface deviation round trip for the base station.
   * 
   * @return deviationRoundTrip
   **/
  public Integer getDeviationRoundTrip() {
    return deviationRoundTrip;
  }

  public void setDeviationRoundTrip(Integer deviationRoundTrip) {
    this.deviationRoundTrip = deviationRoundTrip;
  }

  public ConnectionInterfaceStatistics totalTrafficSent(Float totalTrafficSent) {
    this.totalTrafficSent = totalTrafficSent;
    return this;
  }

  /**
   * Total traffic (data and mac commands) in kB sent by the base station.
   * 
   * @return totalTrafficSent
   **/
  public Float getTotalTrafficSent() {
    return totalTrafficSent;
  }

  public void setTotalTrafficSent(Float totalTrafficSent) {
    this.totalTrafficSent = totalTrafficSent;
  }

  public ConnectionInterfaceStatistics totalTrafficReceived(Float totalTrafficReceived) {
    this.totalTrafficReceived = totalTrafficReceived;
    return this;
  }

  /**
   * Total traffic (data and mac commands) in kB received by the base station.
   * 
   * @return totalTrafficReceived
   **/
  public Float getTotalTrafficReceived() {
    return totalTrafficReceived;
  }

  public void setTotalTrafficReceived(Float totalTrafficReceived) {
    this.totalTrafficReceived = totalTrafficReceived;
  }

  public ConnectionInterfaceStatistics ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * IP address of the base station.
   * 
   * @return ip
   **/
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }

  public String getIccid() {
    return iccid;
  }

  public void setIccid(String iccid) {
    this.iccid = iccid;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionInterfaceStatistics connectionInterfaceStatistics = (ConnectionInterfaceStatistics) o;
    return Objects.equals(this.name, connectionInterfaceStatistics.name)
            && Objects.equals(this.state, connectionInterfaceStatistics.state)
            && Objects.equals(this.type, connectionInterfaceStatistics.type)
            && Objects.equals(this.averageRoundTrip, connectionInterfaceStatistics.averageRoundTrip)
            && Objects.equals(this.deviationRoundTrip, connectionInterfaceStatistics.deviationRoundTrip)
            && Objects.equals(this.totalTrafficSent, connectionInterfaceStatistics.totalTrafficSent)
            && Objects.equals(this.totalTrafficReceived, connectionInterfaceStatistics.totalTrafficReceived)
            && Objects.equals(this.ip, connectionInterfaceStatistics.ip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, state, type, averageRoundTrip, deviationRoundTrip, totalTrafficSent, totalTrafficReceived,
            ip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionInterfaceStatistics {\n");

    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    averageRoundTrip: ").append(toIndentedString(averageRoundTrip)).append("\n");
    sb.append("    deviationRoundTrip: ").append(toIndentedString(deviationRoundTrip)).append("\n");
    sb.append("    totalTrafficSent: ").append(toIndentedString(totalTrafficSent)).append("\n");
    sb.append("    totalTrafficReceived: ").append(toIndentedString(totalTrafficReceived)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
