/*
 * netmore-web-backend
 * Front end for web services.
 *
 * The version of the OpenAPI document: 1.2.83
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package lora.ns.netmore.rest.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import lora.ns.netmore.rest.model.DeviceType;
import lora.ns.netmore.rest.model.SensorTypeManufacturer;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SensorType
 */
@JsonPropertyOrder({
  SensorType.JSON_PROPERTY_ID,
  SensorType.JSON_PROPERTY_NAME,
  SensorType.JSON_PROPERTY_DEVICE_COUNT,
  SensorType.JSON_PROPERTY_DEFAULT_DEVICE_TYPE,
  SensorType.JSON_PROPERTY_MANUFACTURER,
  SensorType.JSON_PROPERTY_DECODER
})
public class SensorType {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DEVICE_COUNT = "deviceCount";
  private Double deviceCount;

  public static final String JSON_PROPERTY_DEFAULT_DEVICE_TYPE = "defaultDeviceType";
  private DeviceType defaultDeviceType;

  public static final String JSON_PROPERTY_MANUFACTURER = "manufacturer";
  private SensorTypeManufacturer manufacturer;

  public static final String JSON_PROPERTY_DECODER = "decoder";
  private Boolean decoder;

  public SensorType() {
  }

  public SensorType id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }


  public SensorType name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public SensorType deviceCount(Double deviceCount) {
    
    this.deviceCount = deviceCount;
    return this;
  }

   /**
   * Get deviceCount
   * @return deviceCount
  **/

  @JsonProperty(JSON_PROPERTY_DEVICE_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getDeviceCount() {
    return deviceCount;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeviceCount(Double deviceCount) {
    this.deviceCount = deviceCount;
  }


  public SensorType defaultDeviceType(DeviceType defaultDeviceType) {
    
    this.defaultDeviceType = defaultDeviceType;
    return this;
  }

   /**
   * Get defaultDeviceType
   * @return defaultDeviceType
  **/

  @JsonProperty(JSON_PROPERTY_DEFAULT_DEVICE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DeviceType getDefaultDeviceType() {
    return defaultDeviceType;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_DEVICE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultDeviceType(DeviceType defaultDeviceType) {
    this.defaultDeviceType = defaultDeviceType;
  }


  public SensorType manufacturer(SensorTypeManufacturer manufacturer) {
    
    this.manufacturer = manufacturer;
    return this;
  }

   /**
   * Get manufacturer
   * @return manufacturer
  **/

  @JsonProperty(JSON_PROPERTY_MANUFACTURER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SensorTypeManufacturer getManufacturer() {
    return manufacturer;
  }


  @JsonProperty(JSON_PROPERTY_MANUFACTURER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setManufacturer(SensorTypeManufacturer manufacturer) {
    this.manufacturer = manufacturer;
  }


  public SensorType decoder(Boolean decoder) {
    
    this.decoder = decoder;
    return this;
  }

   /**
   * Get decoder
   * @return decoder
  **/

  @JsonProperty(JSON_PROPERTY_DECODER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getDecoder() {
    return decoder;
  }


  @JsonProperty(JSON_PROPERTY_DECODER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDecoder(Boolean decoder) {
    this.decoder = decoder;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SensorType sensorType = (SensorType) o;
    return Objects.equals(this.id, sensorType.id) &&
        Objects.equals(this.name, sensorType.name) &&
        Objects.equals(this.deviceCount, sensorType.deviceCount) &&
        Objects.equals(this.defaultDeviceType, sensorType.defaultDeviceType) &&
        Objects.equals(this.manufacturer, sensorType.manufacturer) &&
        Objects.equals(this.decoder, sensorType.decoder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, deviceCount, defaultDeviceType, manufacturer, decoder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SensorType {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    deviceCount: ").append(toIndentedString(deviceCount)).append("\n");
    sb.append("    defaultDeviceType: ").append(toIndentedString(defaultDeviceType)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    decoder: ").append(toIndentedString(decoder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

