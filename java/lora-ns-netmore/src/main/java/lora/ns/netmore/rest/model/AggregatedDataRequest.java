/*
 * netmore-web-backend
 * Front end for web services.
 *
 * The version of the OpenAPI document: 1.2.83
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package lora.ns.netmore.rest.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import lora.ns.netmore.rest.model.GetDeviceGroupDeviceDataFilterParameterInner;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AggregatedDataRequest
 */
@JsonPropertyOrder({
  AggregatedDataRequest.JSON_PROPERTY_TYPE,
  AggregatedDataRequest.JSON_PROPERTY_INTERVAL,
  AggregatedDataRequest.JSON_PROPERTY_MONTH,
  AggregatedDataRequest.JSON_PROPERTY_N
})
public class AggregatedDataRequest {
  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    AVG("avg"),
    
    SUM("sum");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  /**
   * lastMonth - last month in sum or avg per day month - specific month sum or avg per day 24h - last 24h sum or avg per h
   */
  public enum IntervalEnum {
    LASTMONTH("lastMonth"),
    
    MONTH("month"),
    
    _24H("24h");

    private String value;

    IntervalEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IntervalEnum fromValue(String value) {
      for (IntervalEnum b : IntervalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INTERVAL = "interval";
  private IntervalEnum interval;

  public static final String JSON_PROPERTY_MONTH = "month";
  private Double month;

  public static final String JSON_PROPERTY_N = "n";
  private GetDeviceGroupDeviceDataFilterParameterInner n;

  public AggregatedDataRequest() {
  }

  public AggregatedDataRequest type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public AggregatedDataRequest interval(IntervalEnum interval) {
    
    this.interval = interval;
    return this;
  }

   /**
   * lastMonth - last month in sum or avg per day month - specific month sum or avg per day 24h - last 24h sum or avg per h
   * @return interval
  **/

  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public IntervalEnum getInterval() {
    return interval;
  }


  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInterval(IntervalEnum interval) {
    this.interval = interval;
  }


  public AggregatedDataRequest month(Double month) {
    
    this.month = month;
    return this;
  }

   /**
   * Get month
   * @return month
  **/

  @JsonProperty(JSON_PROPERTY_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getMonth() {
    return month;
  }


  @JsonProperty(JSON_PROPERTY_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMonth(Double month) {
    this.month = month;
  }


  public AggregatedDataRequest n(GetDeviceGroupDeviceDataFilterParameterInner n) {
    
    this.n = n;
    return this;
  }

   /**
   * Get n
   * @return n
  **/

  @JsonProperty(JSON_PROPERTY_N)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GetDeviceGroupDeviceDataFilterParameterInner getN() {
    return n;
  }


  @JsonProperty(JSON_PROPERTY_N)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setN(GetDeviceGroupDeviceDataFilterParameterInner n) {
    this.n = n;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggregatedDataRequest aggregatedDataRequest = (AggregatedDataRequest) o;
    return Objects.equals(this.type, aggregatedDataRequest.type) &&
        Objects.equals(this.interval, aggregatedDataRequest.interval) &&
        Objects.equals(this.month, aggregatedDataRequest.month) &&
        Objects.equals(this.n, aggregatedDataRequest.n);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, interval, month, n);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggregatedDataRequest {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    n: ").append(toIndentedString(n)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

