/*
 * netmore-web-backend
 * Front end for web services.
 *
 * The version of the OpenAPI document: 1.2.83
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package lora.ns.netmore.rest.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import lora.ns.netmore.rest.model.DeviceType;
import lora.ns.netmore.rest.model.LoraClass;
import lora.ns.netmore.rest.model.QrScanFields;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * LoraDeviceType
 */
@JsonPropertyOrder({
  LoraDeviceType.JSON_PROPERTY_NAME,
  LoraDeviceType.JSON_PROPERTY_ID,
  LoraDeviceType.JSON_PROPERTY_TYPE,
  LoraDeviceType.JSON_PROPERTY_ACTIVATION_METHOD,
  LoraDeviceType.JSON_PROPERTY_LORAWAN_VERSION,
  LoraDeviceType.JSON_PROPERTY_PROPERTY_CLASS,
  LoraDeviceType.JSON_PROPERTY_DEVICE_TYPE,
  LoraDeviceType.JSON_PROPERTY_HEART_BEAT,
  LoraDeviceType.JSON_PROPERTY_SCAN
})
public class LoraDeviceType {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  /**
   * Gets or Sets activationMethod
   */
  public enum ActivationMethodEnum {
    OTAA_SENSOR_COMMON("OTAA@SENSOR_COMMON");

    private String value;

    ActivationMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ActivationMethodEnum fromValue(String value) {
      for (ActivationMethodEnum b : ActivationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ACTIVATION_METHOD = "activationMethod";
  private ActivationMethodEnum activationMethod;

  /**
   * Gets or Sets lorawanVersion
   */
  public enum LorawanVersionEnum {
    V101_SENSOR_COMMON("V101@SENSOR_COMMON"),
    
    V102_SENSOR_COMMON("V102@SENSOR_COMMON"),
    
    V103_SENSOR_COMMON("V103@SENSOR_COMMON"),
    
    V104_SENSOR_COMMON("V104@SENSOR_COMMON");

    private String value;

    LorawanVersionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LorawanVersionEnum fromValue(String value) {
      for (LorawanVersionEnum b : LorawanVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_LORAWAN_VERSION = "lorawanVersion";
  private LorawanVersionEnum lorawanVersion;

  public static final String JSON_PROPERTY_PROPERTY_CLASS = "class";
  private List<LoraClass> propertyClass = new ArrayList<>();

  public static final String JSON_PROPERTY_DEVICE_TYPE = "deviceType";
  private DeviceType deviceType;

  public static final String JSON_PROPERTY_HEART_BEAT = "heartBeat";
  private Double heartBeat;

  public static final String JSON_PROPERTY_SCAN = "scan";
  private List<QrScanFields> scan;

  public LoraDeviceType() {
  }

  public LoraDeviceType name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public LoraDeviceType id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }


  public LoraDeviceType type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(String type) {
    this.type = type;
  }


  public LoraDeviceType activationMethod(ActivationMethodEnum activationMethod) {
    
    this.activationMethod = activationMethod;
    return this;
  }

   /**
   * Get activationMethod
   * @return activationMethod
  **/

  @JsonProperty(JSON_PROPERTY_ACTIVATION_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ActivationMethodEnum getActivationMethod() {
    return activationMethod;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVATION_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActivationMethod(ActivationMethodEnum activationMethod) {
    this.activationMethod = activationMethod;
  }


  public LoraDeviceType lorawanVersion(LorawanVersionEnum lorawanVersion) {
    
    this.lorawanVersion = lorawanVersion;
    return this;
  }

   /**
   * Get lorawanVersion
   * @return lorawanVersion
  **/

  @JsonProperty(JSON_PROPERTY_LORAWAN_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LorawanVersionEnum getLorawanVersion() {
    return lorawanVersion;
  }


  @JsonProperty(JSON_PROPERTY_LORAWAN_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLorawanVersion(LorawanVersionEnum lorawanVersion) {
    this.lorawanVersion = lorawanVersion;
  }


  public LoraDeviceType propertyClass(List<LoraClass> propertyClass) {
    
    this.propertyClass = propertyClass;
    return this;
  }

  public LoraDeviceType addPropertyClassItem(LoraClass propertyClassItem) {
    if (this.propertyClass == null) {
      this.propertyClass = new ArrayList<>();
    }
    this.propertyClass.add(propertyClassItem);
    return this;
  }

   /**
   * Get propertyClass
   * @return propertyClass
  **/

  @JsonProperty(JSON_PROPERTY_PROPERTY_CLASS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<LoraClass> getPropertyClass() {
    return propertyClass;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTY_CLASS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPropertyClass(List<LoraClass> propertyClass) {
    this.propertyClass = propertyClass;
  }


  public LoraDeviceType deviceType(DeviceType deviceType) {
    
    this.deviceType = deviceType;
    return this;
  }

   /**
   * Get deviceType
   * @return deviceType
  **/

  @JsonProperty(JSON_PROPERTY_DEVICE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DeviceType getDeviceType() {
    return deviceType;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeviceType(DeviceType deviceType) {
    this.deviceType = deviceType;
  }


  public LoraDeviceType heartBeat(Double heartBeat) {
    
    this.heartBeat = heartBeat;
    return this;
  }

   /**
   * Get heartBeat
   * @return heartBeat
  **/

  @JsonProperty(JSON_PROPERTY_HEART_BEAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getHeartBeat() {
    return heartBeat;
  }


  @JsonProperty(JSON_PROPERTY_HEART_BEAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeartBeat(Double heartBeat) {
    this.heartBeat = heartBeat;
  }


  public LoraDeviceType scan(List<QrScanFields> scan) {
    
    this.scan = scan;
    return this;
  }

  public LoraDeviceType addScanItem(QrScanFields scanItem) {
    if (this.scan == null) {
      this.scan = new ArrayList<>();
    }
    this.scan.add(scanItem);
    return this;
  }

   /**
   * Get scan
   * @return scan
  **/

  @JsonProperty(JSON_PROPERTY_SCAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<QrScanFields> getScan() {
    return scan;
  }


  @JsonProperty(JSON_PROPERTY_SCAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScan(List<QrScanFields> scan) {
    this.scan = scan;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoraDeviceType loraDeviceType = (LoraDeviceType) o;
    return Objects.equals(this.name, loraDeviceType.name) &&
        Objects.equals(this.id, loraDeviceType.id) &&
        Objects.equals(this.type, loraDeviceType.type) &&
        Objects.equals(this.activationMethod, loraDeviceType.activationMethod) &&
        Objects.equals(this.lorawanVersion, loraDeviceType.lorawanVersion) &&
        Objects.equals(this.propertyClass, loraDeviceType.propertyClass) &&
        Objects.equals(this.deviceType, loraDeviceType.deviceType) &&
        Objects.equals(this.heartBeat, loraDeviceType.heartBeat) &&
        Objects.equals(this.scan, loraDeviceType.scan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, id, type, activationMethod, lorawanVersion, propertyClass, deviceType, heartBeat, scan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoraDeviceType {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    activationMethod: ").append(toIndentedString(activationMethod)).append("\n");
    sb.append("    lorawanVersion: ").append(toIndentedString(lorawanVersion)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    heartBeat: ").append(toIndentedString(heartBeat)).append("\n");
    sb.append("    scan: ").append(toIndentedString(scan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

