/*
 * netmore-web-backend
 * Front end for web services.
 *
 * The version of the OpenAPI document: 1.2.83
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package lora.ns.netmore.rest.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * OutputLogEvent
 */
@JsonPropertyOrder({
  OutputLogEvent.JSON_PROPERTY_TIMESTAMP,
  OutputLogEvent.JSON_PROPERTY_INGESTION_TIME,
  OutputLogEvent.JSON_PROPERTY_MESSAGE
})
public class OutputLogEvent {
  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  private Double timestamp;

  public static final String JSON_PROPERTY_INGESTION_TIME = "ingestionTime";
  private Double ingestionTime;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;

  public OutputLogEvent() {
  }

  public OutputLogEvent timestamp(Double timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/

  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getTimestamp() {
    return timestamp;
  }


  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTimestamp(Double timestamp) {
    this.timestamp = timestamp;
  }


  public OutputLogEvent ingestionTime(Double ingestionTime) {
    
    this.ingestionTime = ingestionTime;
    return this;
  }

   /**
   * Get ingestionTime
   * @return ingestionTime
  **/

  @JsonProperty(JSON_PROPERTY_INGESTION_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getIngestionTime() {
    return ingestionTime;
  }


  @JsonProperty(JSON_PROPERTY_INGESTION_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIngestionTime(Double ingestionTime) {
    this.ingestionTime = ingestionTime;
  }


  public OutputLogEvent message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/

  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessage(String message) {
    this.message = message;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutputLogEvent outputLogEvent = (OutputLogEvent) o;
    return Objects.equals(this.timestamp, outputLogEvent.timestamp) &&
        Objects.equals(this.ingestionTime, outputLogEvent.ingestionTime) &&
        Objects.equals(this.message, outputLogEvent.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, ingestionTime, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutputLogEvent {\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    ingestionTime: ").append(toIndentedString(ingestionTime)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

