/*
 * netmore-web-backend
 * Front end for web services.
 *
 * The version of the OpenAPI document: 1.2.83
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package lora.ns.netmore.rest.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * IStreamItem
 */
@JsonPropertyOrder({
  IStreamItem.JSON_PROPERTY_NAME,
  IStreamItem.JSON_PROPERTY_FIRST_EVENT_TIMESTAMP,
  IStreamItem.JSON_PROPERTY_LAST_EVENT_TIMESTAMP
})
public class IStreamItem {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_FIRST_EVENT_TIMESTAMP = "firstEventTimestamp";
  private String firstEventTimestamp;

  public static final String JSON_PROPERTY_LAST_EVENT_TIMESTAMP = "lastEventTimestamp";
  private String lastEventTimestamp;

  public IStreamItem() {
  }

  public IStreamItem name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public IStreamItem firstEventTimestamp(String firstEventTimestamp) {
    
    this.firstEventTimestamp = firstEventTimestamp;
    return this;
  }

   /**
   * Get firstEventTimestamp
   * @return firstEventTimestamp
  **/

  @JsonProperty(JSON_PROPERTY_FIRST_EVENT_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFirstEventTimestamp() {
    return firstEventTimestamp;
  }


  @JsonProperty(JSON_PROPERTY_FIRST_EVENT_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFirstEventTimestamp(String firstEventTimestamp) {
    this.firstEventTimestamp = firstEventTimestamp;
  }


  public IStreamItem lastEventTimestamp(String lastEventTimestamp) {
    
    this.lastEventTimestamp = lastEventTimestamp;
    return this;
  }

   /**
   * Get lastEventTimestamp
   * @return lastEventTimestamp
  **/

  @JsonProperty(JSON_PROPERTY_LAST_EVENT_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLastEventTimestamp() {
    return lastEventTimestamp;
  }


  @JsonProperty(JSON_PROPERTY_LAST_EVENT_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastEventTimestamp(String lastEventTimestamp) {
    this.lastEventTimestamp = lastEventTimestamp;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IStreamItem istreamItem = (IStreamItem) o;
    return Objects.equals(this.name, istreamItem.name) &&
        Objects.equals(this.firstEventTimestamp, istreamItem.firstEventTimestamp) &&
        Objects.equals(this.lastEventTimestamp, istreamItem.lastEventTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, firstEventTimestamp, lastEventTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IStreamItem {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    firstEventTimestamp: ").append(toIndentedString(firstEventTimestamp)).append("\n");
    sb.append("    lastEventTimestamp: ").append(toIndentedString(lastEventTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

