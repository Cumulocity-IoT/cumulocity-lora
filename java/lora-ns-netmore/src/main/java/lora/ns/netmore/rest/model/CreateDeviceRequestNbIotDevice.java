/*
 * netmore-web-backend
 * Front end for web services.
 *
 * The version of the OpenAPI document: 1.2.83
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package lora.ns.netmore.rest.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import lora.ns.netmore.rest.model.NbIotDeviceDetails;
import lora.ns.netmore.rest.model.NbIotOperatorDetails;
import lora.ns.netmore.rest.model.NbIotUpdateNbDevices;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Setting this to true will generate a new nbIotDeviceId and netmoreUID3GPP for the devices, you can also pass an update and then the extra meta data will be updated as well.
 * @deprecated
 */
@Deprecated
@JsonPropertyOrder({
  CreateDeviceRequestNbIotDevice.JSON_PROPERTY_DETAILS,
  CreateDeviceRequestNbIotDevice.JSON_PROPERTY_OPERATOR
})
@JsonTypeName("CreateDeviceRequest_nbIotDevice")
public class CreateDeviceRequestNbIotDevice {
  public static final String JSON_PROPERTY_DETAILS = "details";
  private NbIotDeviceDetails details;

  public static final String JSON_PROPERTY_OPERATOR = "operator";
  private NbIotOperatorDetails operator;

  public CreateDeviceRequestNbIotDevice() {
  }

  public CreateDeviceRequestNbIotDevice details(NbIotDeviceDetails details) {
    
    this.details = details;
    return this;
  }

   /**
   * Get details
   * @return details
  **/

  @JsonProperty(JSON_PROPERTY_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NbIotDeviceDetails getDetails() {
    return details;
  }


  @JsonProperty(JSON_PROPERTY_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDetails(NbIotDeviceDetails details) {
    this.details = details;
  }


  public CreateDeviceRequestNbIotDevice operator(NbIotOperatorDetails operator) {
    
    this.operator = operator;
    return this;
  }

   /**
   * Get operator
   * @return operator
  **/

  @JsonProperty(JSON_PROPERTY_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NbIotOperatorDetails getOperator() {
    return operator;
  }


  @JsonProperty(JSON_PROPERTY_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperator(NbIotOperatorDetails operator) {
    this.operator = operator;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDeviceRequestNbIotDevice createDeviceRequestNbIotDevice = (CreateDeviceRequestNbIotDevice) o;
    return Objects.equals(this.details, createDeviceRequestNbIotDevice.details) &&
        Objects.equals(this.operator, createDeviceRequestNbIotDevice.operator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(details, operator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDeviceRequestNbIotDevice {\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

