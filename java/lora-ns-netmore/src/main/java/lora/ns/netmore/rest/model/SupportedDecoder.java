/*
 * netmore-web-backend
 * Front end for web services.
 *
 * The version of the OpenAPI document: 1.2.83
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package lora.ns.netmore.rest.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SupportedDecoder
 */
@JsonPropertyOrder({
  SupportedDecoder.JSON_PROPERTY_DECODER,
  SupportedDecoder.JSON_PROPERTY_DESCRIPTION,
  SupportedDecoder.JSON_PROPERTY_SENSOR_TYPE,
  SupportedDecoder.JSON_PROPERTY_UNTESTED
})
public class SupportedDecoder {
  public static final String JSON_PROPERTY_DECODER = "decoder";
  private String decoder;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_SENSOR_TYPE = "sensorType";
  private String sensorType;

  public static final String JSON_PROPERTY_UNTESTED = "untested";
  private Boolean untested;

  public SupportedDecoder() {
  }

  public SupportedDecoder decoder(String decoder) {
    
    this.decoder = decoder;
    return this;
  }

   /**
   * Get decoder
   * @return decoder
  **/

  @JsonProperty(JSON_PROPERTY_DECODER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDecoder() {
    return decoder;
  }


  @JsonProperty(JSON_PROPERTY_DECODER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDecoder(String decoder) {
    this.decoder = decoder;
  }


  public SupportedDecoder description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  public SupportedDecoder sensorType(String sensorType) {
    
    this.sensorType = sensorType;
    return this;
  }

   /**
   * Get sensorType
   * @return sensorType
  **/

  @JsonProperty(JSON_PROPERTY_SENSOR_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSensorType() {
    return sensorType;
  }


  @JsonProperty(JSON_PROPERTY_SENSOR_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSensorType(String sensorType) {
    this.sensorType = sensorType;
  }


  public SupportedDecoder untested(Boolean untested) {
    
    this.untested = untested;
    return this;
  }

   /**
   * Get untested
   * @return untested
  **/

  @JsonProperty(JSON_PROPERTY_UNTESTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUntested() {
    return untested;
  }


  @JsonProperty(JSON_PROPERTY_UNTESTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUntested(Boolean untested) {
    this.untested = untested;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SupportedDecoder supportedDecoder = (SupportedDecoder) o;
    return Objects.equals(this.decoder, supportedDecoder.decoder) &&
        Objects.equals(this.description, supportedDecoder.description) &&
        Objects.equals(this.sensorType, supportedDecoder.sensorType) &&
        Objects.equals(this.untested, supportedDecoder.untested);
  }

  @Override
  public int hashCode() {
    return Objects.hash(decoder, description, sensorType, untested);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SupportedDecoder {\n");
    sb.append("    decoder: ").append(toIndentedString(decoder)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    sensorType: ").append(toIndentedString(sensorType)).append("\n");
    sb.append("    untested: ").append(toIndentedString(untested)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

