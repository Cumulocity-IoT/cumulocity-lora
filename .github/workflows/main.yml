# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Build Node.js codecs
        run: |
          cd nodejs
          for codec in lora-codec* ; do
            cd $codec
            docker build -t $codec .
            docker save $codec -o image.tar
            zip $codec image.tar cumulocity.json
            cd ..
          done
      - name: Build webapp
        run: |
          cd web/1011.0.12/devicemanagement-lora
          npm install --force
          npm run build
          cd dist/apps/devicemanagement-lora
          zip -r devicemanagement-lora *
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Set up Go
        uses: actions/setup-go@v2
      - name: Set up Go environment
        run: |
          export GO111MODULE=off
          go get -d github.com/envoyproxy/protoc-gen-validate/validate
          go get -d github.com/gogo/protobuf/gogoproto 
      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots verify
      - name: Create Release
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log('environment', process.versions);
            
            const fs = require('fs').promises;
            
            const { repo: { owner, repo }, sha } = context;
            console.log({ owner, repo, sha });

            const release = await github.repos.createRelease({
              owner, repo,
              tag_name: process.env.GITHUB_REF,
              draft: true,
              target_commitish: sha
            });

            console.log('created release', { release });

            await github.repos.uploadReleaseAsset({
              owner, repo,
              release_id: release.data.id,
              name: 'devicemanagement-lora.zip',
              data: await fs.readFile('web/1011.0.12/devicemanagement-lora/dist/apps/devicemanagement-lora/devicemanagement-lora.zip')
            });            
        
            for (let dir of await fs.readdir('.', {withFileTypes: true})) {
              console.log('Reading dir ' + dir.name);
              if (dir.isDirectory() && (dir.name.startsWith('lora-ns') || dir.name.startsWith('lora-codec') || dir.name.startsWith('github-proxy'))) {
                for (let file of await fs.readdir(dir.name + "/target")) {
                  if (file.endsWith('.zip')) {
                    console.log('Uploading ' + dir.name + '/target/' + file + ' as asset ' + dir.name);
                    await github.repos.uploadReleaseAsset({
                      owner, repo,
                      release_id: release.data.id,
                      name: dir.name + '.zip',
                      data: await fs.readFile(dir.name + '/target/' + file)
                    });            
                  }
                }
              }
            }
            
            for (let dir of await fs.readdir('nodejs', {withFileTypes: true})) {
              if (dir.isDirectory() && dir.name.startsWith('lora-codec')) {
                console.log('Uploading ' + dir.name + '.zip as asset ' + dir.name);
                await github.repos.uploadReleaseAsset({
                  owner, repo,
                  release_id: release.data.id,
                  name: dir.name + '.zip',
                  data: await fs.readFile('nodejs/' + dir.name + '/' + dir.name + '.zip')
                });            
              }
            }