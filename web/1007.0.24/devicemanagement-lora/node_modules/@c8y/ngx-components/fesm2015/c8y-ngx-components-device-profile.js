import { __decorate, __awaiter } from 'tslib';
import { EventEmitter, Component, Injectable, Input, NgModule } from '@angular/core';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { gettext, ModalSelectionMode, AlertService, BreadcrumbService, Status, ModalService, NavigatorNode, ViewContext, CoreModule, CommonModule, HOOK_NAVIGATOR_NODES, HOOK_ONCE_ROUTE } from '@c8y/ngx-components';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { ButtonsModule } from 'ngx-bootstrap/buttons';
import { ReactiveFormsModule } from '@angular/forms';
import { Location } from '@angular/common';
import { QueriesUtil, InventoryService, OperationStatus, OperationService, Realtime } from '@c8y/client';
import { BsModalService } from 'ngx-bootstrap/modal';
import { assign, concat, uniqWith, isEqual, has, isEmpty, get, sortBy, toArray, cloneDeep } from 'lodash-es';
import { Subject, BehaviorSubject, pipe } from 'rxjs';
import { switchMap, map, take, distinctUntilChanged, shareReplay, tap, filter } from 'rxjs/operators';
import { RepositoryType, RepositoryService, RepositorySelectModalComponent, RepositoryModule } from '@c8y/ngx-components/repository';
import { TranslateService } from '@ngx-translate/core';
import { BsModalRef, BsModalService as BsModalService$1 } from 'ngx-bootstrap';

let SelectConfigurationModalComponent = class SelectConfigurationModalComponent {
    constructor(repositoryService) {
        this.repositoryService = repositoryService;
        this.title = gettext('Select configuration');
        this.load = new Subject();
        this.configurations = this.load.pipe(switchMap(() => this.getItems()), map(({ data }) => this.aggregate(data)));
        this.resultEmitter = new EventEmitter();
        this.deviceTypeQuery = {};
        this.searchQuery = {};
        this.labels = { ok: gettext('Save') };
        this.queriesUtil = new QueriesUtil();
    }
    search(searchTerm) {
        if (!searchTerm) {
            this.searchQuery = {};
        }
        else {
            this.searchQuery = this.queriesUtil.addOrFilter({ name: `*${searchTerm}*` }, { configurationType: `*${searchTerm}*` });
        }
        this.load.next();
    }
    result(selectedItems) {
        this.resultEmitter.emit(selectedItems);
    }
    getItems() {
        return this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION, {
            query: this.queriesUtil.addOrFilter(this.deviceTypeQuery, this.searchQuery),
            params: { pageSize: 100 }
        });
    }
    aggregate(mos) {
        const selectedItems = this.selected;
        return mos.reduce((acc, curr) => {
            curr.configurationType = curr.configurationType || curr.name;
            const selected = selectedItems && selectedItems.filter(val => val.url === curr.url).length > 0;
            const selectModalOption = {
                body: [{ value: curr.name }],
                obj: curr,
                selected
            };
            let selectModalObject = acc.find(val => val.body[0].value === curr.configurationType);
            if (selectModalObject) {
                selectModalObject.options.push(selectModalOption);
            }
            else {
                selectModalObject = {
                    groupId: curr.id,
                    body: [{ value: curr.configurationType }],
                    options: [selectModalOption]
                };
                acc.push(selectModalObject);
            }
            return acc;
        }, []);
    }
};
SelectConfigurationModalComponent.ctorParameters = () => [
    { type: RepositoryService }
];
SelectConfigurationModalComponent = __decorate([
    Component({
        selector: 'c8y-select-configuration-modal',
        template: "<c8y-select-modal\n  [icon]=\"'gears'\"\n  [title]=\"title\"\n  [items]=\"configurations | async\"\n  [mode]=\"'multi'\"\n  (result)=\"result($event)\"\n  (search)=\"search($event)\"\n  [disableSelected]=\"true\"\n  [labels]=\"labels\"\n>\n</c8y-select-modal>\n"
    })
], SelectConfigurationModalComponent);

let DeviceProfileComponent = class DeviceProfileComponent {
    constructor(route, alertService, inventoryService, location, breadcrumbService, bsModal, repositoryService) {
        this.route = route;
        this.alertService = alertService;
        this.inventoryService = inventoryService;
        this.location = location;
        this.breadcrumbService = breadcrumbService;
        this.bsModal = bsModal;
        this.repositoryService = repositoryService;
        this.DEVICE_TYPE_POPOVER = gettext('The device profile will be available for assignments on devices of the specified type. Otherwise, it will be available for all device types.');
        this.queriesUtil = new QueriesUtil();
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            const profileId = this.route.snapshot.paramMap.get('id');
            this.deviceProfile = (yield this.getDeviceProfile(profileId));
            if (this.deviceProfile) {
                this.profileName = this.deviceProfile.name;
                if (!this.deviceProfile.c8y_DeviceProfile.software) {
                    this.deviceProfile.c8y_DeviceProfile.software = [];
                }
                if (!this.deviceProfile.c8y_DeviceProfile.configuration) {
                    this.deviceProfile.c8y_DeviceProfile.configuration = [];
                }
            }
        });
    }
    addFirmware() {
        const initialState = {
            deviceTypeQuery: this.getDeviceTypeQuery(RepositoryType.FIRMWARE),
            repositoryType: RepositoryType.FIRMWARE,
            repositoryEntriesWithVersionsFn$: modalDialog => this.getRepositoryEntriesWithVersions$(modalDialog.content.searchTerm, RepositoryType.FIRMWARE),
            icon: 'c8y-firmware',
            title: gettext('Select firmware'),
            mode: ModalSelectionMode.SINGLE
        };
        const modal = this.bsModal.show(RepositorySelectModalComponent, {
            ignoreBackdropClick: true,
            initialState
        });
        if (initialState.repositoryEntriesWithVersionsFn$) {
            modal.content.repositoryEntriesWithVersions$ = initialState.repositoryEntriesWithVersionsFn$(modal);
        }
        modal.content.load.next();
        modal.content.resultEmitter.pipe(take(1)).subscribe(firmware => {
            if (!firmware) {
                return;
            }
            const deviceProfilePartial = {
                c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile || {}
            };
            assign(deviceProfilePartial.c8y_DeviceProfile, {
                firmware: {
                    name: firmware.name,
                    version: firmware.version,
                    url: firmware.url,
                    isPatch: firmware.isPatch,
                    patchDependency: firmware.patchDependency
                }
            });
            this.updateDeviceProfile(deviceProfilePartial);
        });
    }
    getRepositoryEntriesWithVersions$(searchTerm$, repoType) {
        return searchTerm$.pipe(distinctUntilChanged(), switchMap(searchTerm => this.repositoryService.listRepositoryEntries(repoType, {
            partialName: searchTerm,
            params: { pageSize: 100 },
            skipLegacy: true
        })), map(({ data }) => data), map(mos => this.getAndAssignRepositoryBinaries(mos)), shareReplay(1));
    }
    getAndAssignRepositoryBinaries(mos) {
        mos.forEach(mo => {
            mo.versions = this.repositoryService.listBaseVersions(mo);
        });
        return mos;
    }
    addConfiguration() {
        const modal = this.bsModal.show(SelectConfigurationModalComponent, {
            ignoreBackdropClick: true
        });
        modal.content.deviceTypeQuery = this.getDeviceTypeQuery(RepositoryType.CONFIGURATION);
        modal.content.selected = this.deviceProfile.c8y_DeviceProfile.configuration;
        modal.content.load.next();
        modal.content.resultEmitter.pipe(take(1)).subscribe(selectedConfigurations => {
            const selectedMapped = selectedConfigurations.map(selectedItem => {
                return assign({
                    url: selectedItem.url,
                    name: selectedItem.name
                }, selectedItem.configurationType ? { type: selectedItem.configurationType } : {});
            });
            const merged = concat(selectedMapped, this.deviceProfile.c8y_DeviceProfile.configuration || []);
            const configuration = uniqWith(merged, (arrVal, othVal) => {
                return arrVal.type && othVal.type && arrVal.type === othVal.type;
            });
            const deviceProfilePartial = {
                c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile || {}
            };
            assign(deviceProfilePartial.c8y_DeviceProfile, { configuration });
            this.updateDeviceProfile(deviceProfilePartial);
        });
    }
    addSoftware() {
        const initialState = {
            deviceTypeQuery: this.getDeviceTypeQuery(RepositoryType.SOFTWARE),
            repositoryType: RepositoryType.SOFTWARE,
            repositoryEntriesWithVersionsFn$: modalDialog => this.getRepositoryEntriesWithVersions$(modalDialog.content.searchTerm, RepositoryType.SOFTWARE),
            selected: this.deviceProfile.c8y_DeviceProfile.software,
            icon: 'c8y-tools',
            title: gettext('Select software'),
            mode: ModalSelectionMode.MULTI
        };
        const modal = this.bsModal.show(RepositorySelectModalComponent, {
            ignoreBackdropClick: true,
            initialState
        });
        if (initialState.repositoryEntriesWithVersionsFn$) {
            modal.content.repositoryEntriesWithVersions$ = initialState.repositoryEntriesWithVersionsFn$(modal);
        }
        modal.content.load.next();
        modal.content.resultEmitter.pipe(take(1)).subscribe(selectedSoftware => {
            const selectedMapped = selectedSoftware.map(selectedItem => {
                return {
                    name: selectedItem.name,
                    version: selectedItem.version,
                    url: selectedItem.url,
                    action: 'install'
                };
            });
            const merged = concat(selectedMapped, this.deviceProfile.c8y_DeviceProfile.software || []);
            const software = uniqWith(merged, (arrVal, othVal) => {
                return arrVal.name && othVal.name && arrVal.name === othVal.name;
            });
            const deviceProfilePartial = {
                c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile || {}
            };
            assign(deviceProfilePartial.c8y_DeviceProfile, { software });
            this.updateDeviceProfile(deviceProfilePartial);
        });
    }
    get isDeviceProfileEmpty() {
        const isSoftware = this.deviceProfile.c8y_DeviceProfile.software &&
            this.deviceProfile.c8y_DeviceProfile.software.length > 0;
        const isFirmware = Boolean(this.deviceProfile.c8y_DeviceProfile.firmware);
        const isConfiguration = this.deviceProfile.c8y_DeviceProfile.configuration &&
            this.deviceProfile.c8y_DeviceProfile.configuration.length > 0;
        return isSoftware || isFirmware || isConfiguration;
    }
    removeItem(removedItem, category) {
        const deviceProfilePartial = {
            c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile
        };
        const filtered = deviceProfilePartial.c8y_DeviceProfile[category].filter(item => !isEqual(removedItem, item));
        deviceProfilePartial.c8y_DeviceProfile[category] = filtered;
        this.updateDeviceProfile(deviceProfilePartial);
    }
    removeFirmware() {
        delete this.deviceProfile.c8y_DeviceProfile.firmware;
        this.updateDeviceProfile({ c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile });
    }
    updateDeviceProfile(partialDeviceProfile) {
        return __awaiter(this, void 0, void 0, function* () {
            if (partialDeviceProfile.c8y_Filter && partialDeviceProfile.c8y_Filter.type === '') {
                delete partialDeviceProfile.c8y_Filter.type;
            }
            Object.assign(partialDeviceProfile, { id: this.deviceProfile.id });
            try {
                const { data } = yield this.inventoryService.update(partialDeviceProfile);
                this.deviceProfile = data;
                this.profileName = this.deviceProfile.name;
                this.alertService.success(gettext('Device profile changed.'));
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    getDeviceProfile(profileId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.inventoryService.detail(profileId);
                return data;
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    getDeviceTypeQuery(repositoryType) {
        if (has(this.deviceProfile, 'c8y_Filter.type') &&
            !isEmpty(this.deviceProfile.c8y_Filter.type)) {
            if (repositoryType === RepositoryType.CONFIGURATION) {
                return this.queriesUtil.addOrFilter({ deviceType: this.deviceProfile.c8y_Filter.type }, { __not: { __has: `deviceType` } });
            }
            else {
                return this.queriesUtil.addOrFilter({ 'c8y_Filter.type': this.deviceProfile.c8y_Filter.type }, { __not: { __has: `c8y_Filter.type` } });
            }
        }
        return {};
    }
};
DeviceProfileComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: AlertService },
    { type: InventoryService },
    { type: Location },
    { type: BreadcrumbService },
    { type: BsModalService },
    { type: RepositoryService }
];
DeviceProfileComponent = __decorate([
    Component({
        selector: 'c8y-device-profile',
        template: "<c8y-title>{{ profileName }}</c8y-title>\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-device-profile'\"\n    [label]=\"'Device profiles' | translate\"\n    [path]=\"'device-profiles'\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<div *ngIf=\"deviceProfile\">\n  <div class=\"card m-b-4\" *ngIf=\"deviceProfile\">\n    <div class=\"card-header separator\">\n      <h4 translate>Name and device type</h4>\n    </div>\n    <div class=\"card-block\">\n      <div class=\"row\">\n        <div class=\"col-md-4\">\n          <form #editNameForm=\"ngForm\">\n            <c8y-form-group>\n              <label class=\"control-label\" translate>\n                Name\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [(ngModel)]=\"deviceProfile.name\"\n                  name=\"name\"\n                  required\n                />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    (click)=\"\n                      updateDeviceProfile({ name: deviceProfile.name });\n                      editNameForm.form.markAsPristine()\n                    \"\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </form>\n        </div>\n        <div class=\"col-md-4\">\n          <form #editTypeForm=\"ngForm\">\n            <c8y-form-group>\n              <label class=\"control-label\">\n                {{ 'Device type' | translate }}\n                <button\n                  class=\"btn btn-clean text-primary\"\n                  popover=\"{{ DEVICE_TYPE_POPOVER | translate }}\"\n                  triggers=\"focus\"\n                  container=\"body\"\n                  placement=\"right\"\n                >\n                  <i [c8yIcon]=\"'question-circle-o'\"></i>\n                </button>\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [(ngModel)]=\"deviceProfile.c8y_Filter.type\"\n                  name=\"type\"\n                  placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n                  [disabled]=\"isDeviceProfileEmpty\"\n                />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    (click)=\"\n                      updateDeviceProfile({ c8y_Filter: { type: deviceProfile.c8y_Filter.type } });\n                      editTypeForm.form.markAsPristine()\n                    \"\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    [disabled]=\"isDeviceProfileEmpty\"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card m-b-4\">\n    <div class=\"card-header separator\">\n      <div class=\"card-icon\">\n        <i [c8yIcon]=\"'c8y-firmware'\" class=\"c8y-icon-duocolor\"></i>\n      </div>\n      <h4 class=\"card-title\" translate>\n        Firmware\n      </h4>\n    </div>\n    <div class=\"card-block p-t-0\">\n      <c8y-list-group *ngIf=\"deviceProfile.c8y_DeviceProfile.firmware\">\n        <c8y-li>\n          <c8y-li-icon>\n            <i [c8yIcon]=\"'c8y-firmware'\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50 left-m-xs\">\n            <div class=\"col-6\">\n              <span\n                class=\"text-truncate\"\n                title=\"{{ deviceProfile.c8y_DeviceProfile.firmware.name }}\"\n              >\n                {{ deviceProfile.c8y_DeviceProfile.firmware.name }}\n              </span>\n            </div>\n            <div class=\"col-5 flex-row\">\n              <span\n                class=\"text-truncate\"\n                title=\"{{ deviceProfile.c8y_DeviceProfile.firmware.version }}\"\n              >\n                <span class=\"text-label-small m-r-4\" translate>Version</span>\n                {{ deviceProfile.c8y_DeviceProfile.firmware.version }}\n              </span>\n              <button\n                class=\"btn btn-danger btn-xs visible-xs flex-item-right m-r-8 m-t-8\"\n                title=\"{{ 'Remove`firmware`' | translate }}\"\n                (click)=\"removeFirmware()\"\n              >\n                <i c8yIcon=\"minus-circle\"></i> {{ 'Remove`firmware`' | translate }}\n              </button>\n            </div>\n            <div class=\"flex-item-right p-r-8 hidden-xs\">\n              <button\n                class=\"btn btn-dot showOnHover\"\n                title=\"{{ 'Remove`firmware`' | translate }}\"\n                (click)=\"removeFirmware()\"\n              >\n                <i class=\"text-danger\" c8yIcon=\"minus-circle\"></i>\n              </button>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n      <div class=\"p-t-8\" *ngIf=\"!deviceProfile.c8y_DeviceProfile.firmware\">\n        <button\n          title=\"{{ 'Add firmware' | translate }}\"\n          class=\"btn-add-block\"\n          (click)=\"addFirmware()\"\n        >\n          <i c8yIcon=\"plus-square\"></i> {{ 'No firmware defined. Add firmware' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card m-b-4\">\n    <div class=\"card-header separator\">\n      <div class=\"card-icon\">\n        <i [c8yIcon]=\"'c8y-tools'\" class=\"c8y-icon-duocolor\"></i>\n      </div>\n      <h4 class=\"card-title\" translate>\n        Software\n      </h4>\n    </div>\n    <div class=\"card-block p-t-0\">\n      <c8y-list-group>\n        <c8y-li *ngFor=\"let software of deviceProfile.c8y_DeviceProfile.software;\">\n          <c8y-li-icon>\n            <i [c8yIcon]=\"'c8y-tools'\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50 left-m-xs\">\n            <div class=\"col-6\">\n              <span class=\"text-truncate\" title=\"{{ software.name }}\">\n                {{ software.name }}\n              </span>\n            </div>\n            <div class=\"col-5 flex-row\">\n              <span class=\"text-truncate\" title=\"{{ software.version }}\">\n                <span class=\"text-label-small m-r-8\" translate>Version</span>\n                {{ software.version }}\n              </span>\n              <button\n                class=\"btn btn-danger btn-xs visible-xs flex-item-right m-r-8 m-t-8\"\n                title=\"{{ 'Remove`software`' | translate }}\"\n                ((click)=\"removeItem(software, 'software')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i> {{ 'Remove`software`' | translate }}\n              </button>\n            </div>\n            <div class=\"flex-item-right p-r-8 hidden-xs \">\n              <button\n                class=\"btn btn-dot showOnHover text-danger\"\n                title=\"{{ 'Remove`software`' | translate }}\"\n                (click)=\"removeItem(software, 'software')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i>\n              </button>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n      <div class=\"p-t-8\">\n        <button\n          title=\"{{ 'Add software' | translate }}\"\n          class=\"btn-add-block m-b-0\"\n          (click)=\"addSoftware()\"\n        >\n          <i c8yIcon=\"plus-square\"></i>\n          <span *ngIf=\"deviceProfile.c8y_DeviceProfile.software?.length === 0\">\n            {{ 'No software defined.' | translate }}&nbsp;\n          </span>\n          {{ 'Add software' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card\">\n    <div class=\"card-header separator\">\n      <div class=\"card-icon\">\n        <i [c8yIcon]=\"'gears'\" class=\"c8y-icon-duocolor\"></i>\n      </div>\n      <h4 class=\"card-title\" translate>\n        Configuration\n      </h4>\n    </div>\n    <div class=\"card-block p-t-0\">\n      <c8y-list-group class=\"m-b-8\">\n        <c8y-li\n          *ngFor=\"let configuration of deviceProfile.c8y_DeviceProfile.configuration;\"\n        >\n          <c8y-li-icon>\n            <i [c8yIcon]=\"'gears'\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50\">\n            <div class=\"col-6\">\n              <span class=\"text-truncate\" title=\"{{ configuration.name }}\">\n                {{ configuration.name }}\n              </span>\n            </div>\n            <div class=\"col-5 flex-row\">\n              <span class=\"label label-info\">{{ configuration.type }}</span>\n              <button\n                class=\"btn btn-danger btn-xs visible-xs flex-item-right m-r-8 m-t-8\"\n                title=\"{{ 'Remove`configuration`' | translate }}\"\n                (click)=\"removeItem(configuration, 'configuration')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i> {{ 'Remove`configuration`' | translate }}\n              </button>\n            </div>\n            <div class=\"flex-item-right p-r-8 hidden-xs\">\n              <button\n                class=\"btn btn-dot showOnHover text-danger\"\n                title=\"{{ 'Remove`configuration`' | translate }}\"\n                (click)=\"removeItem(configuration, 'configuration')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i>\n              </button>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n      <div class=\"p-t-8\">\n        <button\n          title=\"{{ 'Add configuration' | translate }}\"\n          class=\"btn-add-block m-b-0\"\n          (click)=\"addConfiguration()\"\n        >\n          <i c8yIcon=\"plus-square\"></i>\n          <span *ngIf=\"deviceProfile.c8y_DeviceProfile.configuration?.length === 0\">\n            {{ 'No configuration defined.' | translate }}&nbsp;</span\n          >\n          {{ 'Add configuration' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n"
    })
], DeviceProfileComponent);

let DeviceProfileService = class DeviceProfileService {
    constructor(inventoryService, operationService, alertService) {
        this.inventoryService = inventoryService;
        this.operationService = operationService;
        this.alertService = alertService;
        this.dateFrom = new Date(0);
        this.dateTo = new Date(Date.now() + 86400000); // 1 day in the future
        this.queriesUtil = new QueriesUtil();
    }
    createDeviceProfile(deviceProfile) {
        return this.inventoryService.create(deviceProfile);
    }
    getDeviceProfilesByDeviceType(deviceType) {
        const deviceTypeFilter = {
            __or: [{ 'c8y_Filter.type': deviceType }, { __not: { __has: 'c8y_Filter.type' } }]
        };
        return this.getDeviceProfiles(deviceTypeFilter);
    }
    getDeviceProfiles(andQuery) {
        let query = {
            type: 'c8y_Profile'
        };
        const filter = {
            pageSize: 100,
            withTotalPages: true
        };
        query = this.queriesUtil.addAndFilter(query, andQuery || {});
        return this.inventoryService.listQuery(query, filter);
    }
    getProfileOperation(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const filter = {
                deviceId,
                fragmentType: 'c8y_DeviceProfile',
                dateFrom: this.dateFrom.toISOString(),
                dateTo: this.dateTo.toISOString(),
                revert: true,
                pageSize: 1
            };
            const operation = (yield this.operationService.list(filter)).data[0];
            return operation && operation.status !== OperationStatus.SUCCESSFUL ? operation : undefined;
        });
    }
    createProfileOperation(device, deviceProfile) {
        return __awaiter(this, void 0, void 0, function* () {
            let operation;
            const operationCfg = {
                deviceId: device.id,
                profileId: deviceProfile.id,
                profileName: deviceProfile.name,
                c8y_DeviceProfile: deviceProfile.c8y_DeviceProfile,
                description: `Assign device profile ${deviceProfile.name} to device ${device.name}`
            };
            try {
                const { data } = yield this.operationService.create(operationCfg);
                operation = data;
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
            return operation;
        });
    }
    getFirmwareItems(device, selectedProfile) {
        const deviceFirmware = device.c8y_Firmware;
        const profileFirmware = get(selectedProfile, 'c8y_DeviceProfile.firmware');
        const deviceItems = [];
        const profileItems = [];
        if (deviceFirmware) {
            deviceItems.push(deviceFirmware);
        }
        if (profileFirmware) {
            profileItems.push(profileFirmware);
        }
        return this.createProfileComparison(deviceItems, profileItems, 'version');
    }
    getSoftwareItems(device, selectedProfile) {
        const deviceSoftware = device.c8y_SoftwareList;
        const profileSoftware = get(selectedProfile, 'c8y_DeviceProfile.software');
        return this.createProfileComparison(deviceSoftware, profileSoftware, 'version');
    }
    getConfigurationItems(device, selectedProfile) {
        const deviceConfiguration = [];
        Object.keys(device).forEach(key => {
            if (key.slice(0, 18) === 'c8y_Configuration_') {
                deviceConfiguration.push(device[key]);
            }
        });
        const profileConfiguration = get(selectedProfile, 'c8y_DeviceProfile.configuration');
        return this.createProfileComparison(deviceConfiguration, profileConfiguration, 'type');
    }
    createProfileComparison(deviceItems = [], profileItems = [], propToCompare) {
        const comparisonObj = this.createProfileComparisonFromDeviceItems(deviceItems, propToCompare);
        const extendedComparisonObj = this.extendProfileComparisonWithProfileItems(comparisonObj, profileItems, propToCompare);
        return sortBy(toArray(extendedComparisonObj), 'name');
    }
    createProfileComparisonFromDeviceItems(deviceItems, propToCompare) {
        const deviceItemsObject = {};
        deviceItems.forEach(item => {
            Object.assign(deviceItemsObject, {
                [item.name]: {
                    name: item.name,
                    profileVersion: undefined,
                    deviceVersion: item[propToCompare]
                }
            });
        });
        return deviceItemsObject;
    }
    extendProfileComparisonWithProfileItems(comparisonObj, profileItems, propToCompare) {
        profileItems.forEach(item => {
            if (comparisonObj[item.name]) {
                comparisonObj[item.name].profileVersion = item[propToCompare];
            }
            else {
                Object.assign(comparisonObj, {
                    [item.name]: {
                        name: item.name,
                        profileVersion: item[propToCompare],
                        deviceVersion: undefined
                    }
                });
            }
        });
        return comparisonObj;
    }
};
DeviceProfileService.ctorParameters = () => [
    { type: InventoryService },
    { type: OperationService },
    { type: AlertService }
];
DeviceProfileService = __decorate([
    Injectable()
], DeviceProfileService);

let AddDeviceProfileComponent = class AddDeviceProfileComponent {
    constructor(modal, deviceProfileService) {
        this.modal = modal;
        this.deviceProfileService = deviceProfileService;
        this.DEVICE_TYPE_POPOVER = gettext('The device profile will be available for assignments on devices of the specified type. Otherwise, it will be available for all device types.');
        this.deviceProfile = {
            name: '',
            type: 'c8y_Profile',
            c8y_Filter: {},
            c8y_DeviceProfile: {}
        };
        this.result = new Promise((resolve, reject) => {
            this._save = resolve;
            this._cancel = reject;
        });
    }
    create() {
        return __awaiter(this, void 0, void 0, function* () {
            const mo = (yield this.deviceProfileService.createDeviceProfile(this.deviceProfile)).data;
            this._save(mo.id);
        });
    }
    close() {
        this._cancel();
        this.modal.hide();
    }
};
AddDeviceProfileComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: DeviceProfileService }
];
AddDeviceProfileComponent = __decorate([
    Component({
        selector: 'c8y-add-device-profile',
        template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-device-profile'\"></i>\n    <h4 translate>\n      Add device profile\n    </h4>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\">\n      <form #createDeviceProfile=\"ngForm\">\n        <c8y-form-group>\n          <label translate for=\"name\">Name</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"name\"\n            [(ngModel)]=\"deviceProfile.name\"\n            placeholder=\"{{ 'e.g. My device profile' | translate }}\"\n            required\n          />\n        </c8y-form-group>\n        <c8y-form-group>\n          <label>\n            {{ 'Device type' | translate }}\n            <button\n              class=\"btn btn-clean\"\n              popover=\"{{ DEVICE_TYPE_POPOVER | translate }}\"\n              triggers=\"focus\"\n            >\n              <i [c8yIcon]=\"'question-circle-o'\"></i>\n            </button>\n          </label>\n          <input\n            id=\"deviceType\"\n            class=\"form-control\"\n            name=\"deviceType\"\n            [(ngModel)]=\"deviceProfile.c8y_Filter.type\"\n            placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n          />\n        </c8y-form-group>\n      </form>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\" translate>\n      Cancel\n    </button>\n\n    <button\n      title=\"{{ 'Continue' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"create()\"\n      [disabled]=\"createDeviceProfile.form.invalid\"\n      translate\n    >\n      Continue\n    </button>\n  </div>\n</div>\n"
    })
], AddDeviceProfileComponent);

let DeviceProfileListComponent = class DeviceProfileListComponent {
    constructor(inventoryService, translateService, modalService, alertService, bsModalService, router, deviceProfileService) {
        this.inventoryService = inventoryService;
        this.translateService = translateService;
        this.modalService = modalService;
        this.alertService = alertService;
        this.bsModalService = bsModalService;
        this.router = router;
        this.deviceProfileService = deviceProfileService;
        this.reloading = false;
        this.reload = new BehaviorSubject(null);
        this.deviceProfiles$ = this.reload.pipe(tap(() => (this.reloading = true)), switchMap(() => this.deviceProfileService.getDeviceProfiles()), tap(() => (this.reloading = false)));
    }
    ngOnInit() {
        this.loadDeviceProfiles();
    }
    loadDeviceProfiles() {
        this.reload.next();
    }
    createDeviceProfile() {
        return __awaiter(this, void 0, void 0, function* () {
            const modal = this.bsModalService.show(AddDeviceProfileComponent, {
                class: 'modal-sm'
            }).content;
            try {
                const profileId = yield modal.result;
                modal.close();
                this.router.navigateByUrl(`/device-profiles/${profileId}`);
            }
            catch (ex) {
                // do nothing
            }
        });
    }
    duplicateDeviceProfile(deviceProfile) {
        return __awaiter(this, void 0, void 0, function* () {
            const copy = cloneDeep(deviceProfile);
            copy.id = null;
            copy.name = 'Duplicate of ' + deviceProfile.name;
            const mo = (yield this.deviceProfileService.createDeviceProfile(copy)).data;
            this.router.navigateByUrl(`/device-profiles/${mo.id}`);
        });
    }
    deleteDeviceProfile(deviceProfile) {
        return __awaiter(this, void 0, void 0, function* () {
            const deviceProfileName = deviceProfile.name;
            const title = gettext('Delete device profile');
            const confirmationText = this.translateService.instant(gettext('You are about to delete a device profile "{{ deviceProfileName }}".'), { deviceProfileName });
            const finalQuestion = this.translateService.instant(gettext('Do you want to proceed?'));
            try {
                yield this.modalService.confirm(title, `${confirmationText} ${finalQuestion}`, Status.DANGER, {
                    ok: gettext('Delete')
                });
                yield this.delete(deviceProfile.id);
                this.reload.next();
            }
            catch (ex) {
                // do nothing
            }
        });
    }
    delete(profileId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.inventoryService.delete(profileId);
                this.alertService.success(gettext('Device profile deleted.'));
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
};
DeviceProfileListComponent.ctorParameters = () => [
    { type: InventoryService },
    { type: TranslateService },
    { type: ModalService },
    { type: AlertService },
    { type: BsModalService$1 },
    { type: Router },
    { type: DeviceProfileService }
];
DeviceProfileListComponent = __decorate([
    Component({
        selector: 'c8y-device-profile-list',
        template: "<c8y-title>{{ 'Device profiles' | translate }}</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    (click)=\"createDeviceProfile()\"\n    title=\"{{ 'Add device profile' | translate }}\"\n  >\n    <i c8yIcon=\"plus-square\"></i> {{ 'Add device profile' | translate }}\n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" (click)=\"loadDeviceProfiles()\" title=\"{{ 'Reload' | translate }}\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'fa-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<!-- EMPTY STATE -->\n<div class=\"c8y-empty-state text-left\" *ngIf=\"(deviceProfiles$ | async)?.data.length === 0\">\n  <h1 [c8yIcon]=\"'c8y-device-profile'\" class=\"c8y-icon-duocolor\"></h1>\n  <h3 translate>No device profiles available.</h3>\n  <p translate>Add a new device profile by clicking below.</p>\n  <p>\n    <button\n      title=\"{{ 'Add device profile' | translate }}\"\n      (click)=\"createDeviceProfile()\"\n      class=\"btn btn-primary\"\n      translate\n    >\n      Add device profile\n    </button>\n  </p>\n</div>\n\n<!-- DEVICE PROFILES LIST -->\n<c8y-list-group>\n  <c8y-li *c8yFor=\"let deviceProfile of deviceProfiles$\">\n    <c8y-li-icon>\n      <i c8yIcon=\"c8y-device-profile\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-6\" title=\"{{ deviceProfile.name }}\">\n        <button class=\"btn-clean\" routerLink=\"/device-profiles/{{ deviceProfile.id }}\" style=\"max-width: inherit;\">\n          <span class=\"text-truncate\">{{ deviceProfile.name }}</span>\n        </button>\n      </div>\n      <div class=\"col-6\" title=\"{{ deviceProfile.c8y_Filter?.type || '-' }}\">\n        <span class=\"text-label-small m-r-4\" translate>Device type</span>\n        {{ deviceProfile.c8y_Filter?.type || '-' }}\n      </div>\n    </c8y-li-body>\n\n    <c8y-li-action\n      routerLink=\"/device-profiles/{{ deviceProfile.id }}\"\n      icon=\"pencil\"\n      label=\"{{ 'Edit' | translate }}\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      (click)=\"duplicateDeviceProfile(deviceProfile)\"\n      icon=\"copy\"\n      label=\"{{ 'Duplicate' | translate }}\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      (click)=\"deleteDeviceProfile(deviceProfile)\"\n      icon=\"trash\"\n      label=\"{{ 'Delete' | translate }}\"\n    >\n    </c8y-li-action>\n  </c8y-li>\n</c8y-list-group>\n"
    })
], DeviceProfileListComponent);

let DeviceProfileNavigationFactory = class DeviceProfileNavigationFactory {
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.nodeItem) {
                this.nodeItem = new NavigatorNode({
                    label: gettext('Device profiles'),
                    path: '/device-profiles',
                    icon: 'c8y-device-profile',
                    parent: gettext('Management')
                });
            }
            return this.nodeItem;
        });
    }
};
DeviceProfileNavigationFactory = __decorate([
    Injectable()
], DeviceProfileNavigationFactory);

var DeviceProfileOperation;
(function (DeviceProfileOperation) {
    DeviceProfileOperation["APPLY_PROFILE"] = "c8y_DeviceProfile";
})(DeviceProfileOperation || (DeviceProfileOperation = {}));

let DeviceProfileGuard = class DeviceProfileGuard {
    canActivate(route, state) {
        const contextData = route.data.contextData || route.parent.data.contextData;
        if (!contextData) {
            return false;
        }
        return this.hasSupportedOperation(contextData, DeviceProfileOperation.APPLY_PROFILE);
    }
    hasSupportedOperation(mo, operation) {
        const supported = mo.c8y_SupportedOperations || [];
        if (!supported) {
            return false;
        }
        return !!supported.find(supportedOperation => supportedOperation === operation);
    }
};
DeviceProfileGuard = __decorate([
    Injectable()
], DeviceProfileGuard);

let DeviceTabProfileComponent = class DeviceTabProfileComponent {
    constructor(deviceProfileService, route, realtime) {
        this.deviceProfileService = deviceProfileService;
        this.route = route;
        this.realtime = realtime;
        this.firmwareItems = [];
        this.softwareItems = [];
        this.configurationItems = [];
        this.pattern = '';
        this.reloading = false;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.device = this.route.snapshot.parent.data.contextData;
            this.getDeviceProfilesAndUpdateProfileItems();
        });
    }
    getDeviceProfilesAndUpdateProfileItems() {
        return __awaiter(this, void 0, void 0, function* () {
            this.reloading = true;
            this.deviceProfiles = yield this.deviceProfileService.getDeviceProfilesByDeviceType(this.device.type);
            if (this.device.c8y_Profile) {
                const profileId = this.device.c8y_Profile.profileId;
                this.selectedProfile = this.deviceProfiles.data.find(mo => mo.id === profileId);
            }
            this.updateProfileItems(this.device, this.selectedProfile);
            this.operation = yield this.deviceProfileService.getProfileOperation(this.device.id);
            this.subscribeToOperations();
            this.reloading = false;
        });
    }
    selectProfile(mo) {
        this.selectedProfile = mo;
        this.updateProfileItems(this.device, this.selectedProfile);
    }
    createOperation() {
        return __awaiter(this, void 0, void 0, function* () {
            this.operation = yield this.deviceProfileService.createProfileOperation(this.device, this.selectedProfile);
        });
    }
    setPipe(filterStr) {
        this.pattern = filterStr;
        this.filterPipe = pipe(map((data) => {
            return data.filter((mo) => mo.name && mo.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1);
        }));
    }
    ngOnDestroy() {
        this.operationsSubscription.unsubscribe();
    }
    updateProfileItems(device, profile) {
        this.firmwareItems = this.deviceProfileService.getFirmwareItems(device, profile);
        this.softwareItems = this.deviceProfileService.getSoftwareItems(device, profile);
        this.configurationItems = this.deviceProfileService.getConfigurationItems(device, profile);
    }
    subscribeToOperations() {
        const operationsChannel = `/operations/${this.device.id}`;
        this.operationsSubscription = this.realtime
            .observable(operationsChannel)
            .pipe(filter(({ data }) => data.c8y_DeviceProfile))
            .subscribe(({ data }) => {
            this.operation = data;
        });
    }
};
DeviceTabProfileComponent.ctorParameters = () => [
    { type: DeviceProfileService },
    { type: ActivatedRoute },
    { type: Realtime }
];
DeviceTabProfileComponent = __decorate([
    Component({
        selector: 'c8y-device-tab-profile',
        template: "<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"getDeviceProfilesAndUpdateProfileItems()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'fa-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<div class=\"card card--grid--fullpage card--grid--fullpage card--grid grid__row--2-10\">\n  <div class=\"card--grid grid__col--6-6\">\n    <!-- AVAILABLE PROFILES -->\n    <div class=\"bg-white\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>Device profile</h4>\n      </div>\n      <div class=\"p-16\">\n        <form #deviceProfileForm=\"ngForm\">\n          <div class=\"input-group\">\n            <c8y-typeahead\n              class=\"flex-grow\"\n              [(selected)]=\"selectedProfile\"\n              placeholder=\"{{ 'Select device profile' | translate }}\"\n              (onSearch)=\"setPipe($event)\"\n              [allowFreeEntries]=\"false\"\n            >\n              <c8y-li\n                *c8yFor=\"let profile of deviceProfiles; pipe: filterPipe\"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"selectProfile(profile); setPipe('')\"\n              >\n                <c8y-highlight\n                  [text]=\"profile.name || '&#45;&#45;'\"\n                  [pattern]=\"pattern\"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <div class=\"input-group-btn\">\n              <button\n                class=\"btn btn-primary\"\n                (click)=\"createOperation()\"\n                title=\"{{ 'Assign device profile' | translate }}\"\n                [disabled]=\"!selectedProfile?.id\"\n                translate\n              >\n                Assign device profile\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n\n    <!-- INSTALL PROFILE OPERATION -->\n    <div class=\"bg-gray-white\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>Currently installed</h4>\n      </div>\n      <div class=\"card-block\">\n        <c8y-single-operation [operation]=\"operation\"></c8y-single-operation>\n      </div>\n    </div>\n  </div>\n  <div class=\"card--grid__inner-scroll flex-col no-align-items\">\n    <div class=\"d-contents\">\n      <!-- FIRMWARE -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Firmware' | translate\"\n        [sectionIcon]=\"'c8y-firmware'\"\n        [emptyStateText]=\"'No firmware to display.' | translate\"\n        [emptyStateDetails]=\"'No firmware assigned.' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"firmwareItems\"\n        [isEmpty]=\"!selectedProfile?.c8y_DeviceProfile?.firmware?.name\"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <div class=\"d-contents\">\n      <!-- SOFTWARE -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Software' | translate\"\n        [sectionIcon]=\"'c8y-tools'\"\n        [emptyStateText]=\"'No software to display.' | translate\"\n        [emptyStateDetails]=\"'No software assigned.' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"softwareItems\"\n        [isEmpty]=\"\n          !selectedProfile?.c8y_DeviceProfile?.software ||\n          selectedProfile?.c8y_DeviceProfile?.software?.length === 0\n        \"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <div class=\"d-contents\">\n      <!-- CONFIGURATION -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Configuration' | translate\"\n        [sectionIcon]=\"'gears'\"\n        [emptyStateText]=\"'No configuration to display' | translate\"\n        [emptyStateDetails]=\"'No configuration assigned' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"configurationItems\"\n        [isEmpty]=\"\n          !selectedProfile?.c8y_DeviceProfile?.configuration ||\n          selectedProfile?.c8y_DeviceProfile?.configuration?.length === 0\n        \"\n        [showTextLabel]=\"false\"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <!-- fill in the remanining vertical space when empty -->\n    <div class=\"card--grid grid__col--6-6 flex-grow\">\n      <div class=\"bg-white\"></div>\n      <div class=\"bg-gray-white\"></div>\n    </div>\n  </div>\n</div>\n"
    })
], DeviceTabProfileComponent);

let DeviceTabProfileDetailComponent = class DeviceTabProfileDetailComponent {
    constructor() {
        this.emptyStateText = '';
        this.emptyStateDetails = '';
        this.showTextLabel = true;
    }
};
__decorate([
    Input()
], DeviceTabProfileDetailComponent.prototype, "sectionTitle", void 0);
__decorate([
    Input()
], DeviceTabProfileDetailComponent.prototype, "sectionIcon", void 0);
__decorate([
    Input()
], DeviceTabProfileDetailComponent.prototype, "emptyStateText", void 0);
__decorate([
    Input()
], DeviceTabProfileDetailComponent.prototype, "emptyStateDetails", void 0);
__decorate([
    Input()
], DeviceTabProfileDetailComponent.prototype, "isProfileSelected", void 0);
__decorate([
    Input()
], DeviceTabProfileDetailComponent.prototype, "isEmpty", void 0);
__decorate([
    Input()
], DeviceTabProfileDetailComponent.prototype, "items", void 0);
__decorate([
    Input()
], DeviceTabProfileDetailComponent.prototype, "showTextLabel", void 0);
DeviceTabProfileDetailComponent = __decorate([
    Component({
        selector: 'c8y-device-tab-profile-detail',
        template: "<div class=\"card--grid grid__col--6-6\">\n  <div class=\"bg-white card-block sticky-top\">\n    <h5 class=\"legend form-block\">{{ sectionTitle | translate }}</h5>\n  </div>\n  <div class=\"bg-gray-white  card-block sticky-top hidden-xs hidden-sm\">\n    <h5 class=\"legend form-block\">{{ sectionTitle | translate }}</h5>\n  </div>\n  <div class=\"bg-white p-l-16 p-r-16\">\n    <hr class=\"m-0\" />\n  </div>\n  <div class=\"bg-gray-white p-l-16 p-r-16\">\n    <hr class=\"m-0\" />\n  </div>\n  <div class=\"d-contents\" *ngIf=\"!isProfileSelected || isEmpty\">\n    <div class=\"p-l-16 p-r-16\">\n      <div class=\"c8y-empty-state text-left\">\n        <h1 [c8yIcon]=\"sectionIcon\" class=\"c8y-icon-duocolor\"></h1>\n        <p>\n          <span>{{ emptyStateText | translate }}</span\n          ><br />\n          <small *ngIf=\"isProfileSelected; else noItems\">\n            {{ emptyStateDetails | translate }}\n          </small>\n          <ng-template #noItems>\n            <small translate>No device profile selected</small>\n          </ng-template>\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class=\"bg-gray-white\" *ngIf=\"items.length === 0\"></div>\n  <c8y-device-profile-item-list\n    *ngIf=\"items.length > 0\"\n    [icon]=\"sectionIcon\"\n    [items]=\"items\"\n    [showProfileItems]=\"isProfileSelected && !isEmpty\"\n    [showTextLabel]=\"showTextLabel\"\n    class=\"d-contents\"\n  ></c8y-device-profile-item-list>\n  <div class=\"bg-white p-t-24\" *ngIf=\"isProfileSelected && !isEmpty\"></div>\n  <div class=\"bg-gray-white p-t-24\" *ngIf=\"isProfileSelected && !isEmpty\"></div>\n</div>\n"
    })
], DeviceTabProfileDetailComponent);

let DeviceProfileItemListComponent = class DeviceProfileItemListComponent {
};
__decorate([
    Input()
], DeviceProfileItemListComponent.prototype, "icon", void 0);
__decorate([
    Input()
], DeviceProfileItemListComponent.prototype, "items", void 0);
__decorate([
    Input()
], DeviceProfileItemListComponent.prototype, "showProfileItems", void 0);
__decorate([
    Input()
], DeviceProfileItemListComponent.prototype, "showTextLabel", void 0);
DeviceProfileItemListComponent = __decorate([
    Component({
        selector: 'c8y-device-profile-item-list',
        template: "<div *ngFor=\"let item of items\" class=\"d-contents\">\n  <div class=\"p-l-16 p-r-16\" *ngIf=\"showProfileItems\">\n    <div class=\"c8y-list__item v-fit\">\n      <div class=\"c8y-list__item__block\" *ngIf=\"item.profileVersion\">\n        <div class=\"c8y-list__item__icon\">\n          <i [c8yIcon]=\"icon\"></i>\n        </div>\n        <div class=\"c8y-list__item__body\">\n          <div class=\"content-flex-40\">\n            <div class=\"col-7\">\n              <span class=\"text-truncate\" title=\"{{ item.name }}\">\n                {{ item.name }}\n              </span>\n            </div>\n            <div class=\"col-5\">\n              <span *ngIf=\"showTextLabel; else showInfoLabel\">\n                <span translate class=\"text-label-small m-r-4\">Version</span>\n                {{ item.profileVersion }}\n              </span>\n              <ng-template #showInfoLabel>\n                <span class=\"label label-info\">{{ item.profileVersion }}</span>\n              </ng-template>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"p-l-16 p-r-16 bg-gray-white\">\n    <div\n      class=\"c8y-list__item bg-gray-white\"\n      [ngClass]=\"{\n        'has-warning':\n          !item.deviceVersion || (item.deviceVersion && item.deviceVersion !== item.profileVersion)\n      }\"\n    >\n      <div class=\"c8y-list__item__block\">\n        <div class=\"c8y-list__item__icon\">\n          <i [c8yIcon]=\"icon\"></i>\n        </div>\n        <div class=\"c8y-list__item__body\">\n          <div class=\"content-flex-40\">\n            <div class=\"col-7\">\n              <span class=\"text-truncate\" title=\"{{ item.name }}\">\n                {{ item.name }}\n              </span>\n            </div>\n            <div class=\"col-5\">\n              <span *ngIf=\"showTextLabel && item.deviceVersion; else showInfoLabel\">\n                <span translate class=\"text-label-small m-r-4\">Version</span>\n                {{ item.deviceVersion }}\n              </span>\n              <ng-template #showInfoLabel>\n                <span class=\"label label-info\">{{ item.deviceVersion }}</span>\n              </ng-template>\n            </div>\n          </div>\n          <c8y-messages\n            class=\"m-0\"\n            style=\"margin-bottom: calc(var(--margin-base, 8px) * -1);\"\n            *ngIf=\"\n              item.profileVersion &&\n              item.deviceVersion &&\n              item.deviceVersion !== item.profileVersion\n            \"\n          >\n            <c8y-message translate>\n              Version mismatch\n            </c8y-message>\n          </c8y-messages>\n          <c8y-messages\n            class=\"m-0\"\n            style=\"margin-bottom: calc(var(--margin-base, 8px) * -1);\"\n            *ngIf=\"!item.deviceVersion\"\n          >\n            <c8y-message translate>\n              Not installed on the device\n            </c8y-message>\n          </c8y-messages>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"p-l-16 p-r-16 bg-white hidden-xs hidden-sm\" *ngIf=\"!showProfileItems\"></div>\n</div>\n"
    })
], DeviceProfileItemListComponent);

const deviceProfilesRoutes = [
    {
        path: 'device-profiles/:id',
        component: DeviceProfileComponent
    },
    {
        path: 'device-profiles',
        component: DeviceProfileListComponent
    }
];
const deviceTabProfileRoutes = [
    {
        context: ViewContext.Device,
        path: 'device-profile',
        component: DeviceTabProfileComponent,
        label: gettext('Device profile'),
        icon: 'c8y-device-profile',
        canActivate: [DeviceProfileGuard]
    }
];
const ɵ0 = deviceTabProfileRoutes;
let DeviceProfileModule = class DeviceProfileModule {
};
DeviceProfileModule = __decorate([
    NgModule({
        declarations: [
            DeviceProfileComponent,
            DeviceProfileListComponent,
            AddDeviceProfileComponent,
            SelectConfigurationModalComponent,
            DeviceTabProfileComponent,
            DeviceTabProfileDetailComponent,
            DeviceProfileItemListComponent
        ],
        exports: [],
        imports: [
            CoreModule,
            CommonModule,
            RepositoryModule,
            RouterModule.forChild(deviceProfilesRoutes),
            BsDropdownModule.forRoot(),
            TooltipModule,
            ReactiveFormsModule,
            ButtonsModule,
            PopoverModule
        ],
        entryComponents: [
            AddDeviceProfileComponent,
            SelectConfigurationModalComponent,
            DeviceTabProfileComponent
        ],
        providers: [
            {
                provide: HOOK_NAVIGATOR_NODES,
                useClass: DeviceProfileNavigationFactory,
                multi: true
            },
            {
                provide: HOOK_ONCE_ROUTE,
                useValue: ɵ0,
                multi: true
            },
            DeviceProfileService,
            DeviceProfileGuard
        ]
    })
], DeviceProfileModule);

/**
 * Generated bundle index. Do not edit.
 */

export { DeviceProfileModule, DeviceProfileService, ɵ0, DeviceProfileComponent as ɵa, DeviceProfileListComponent as ɵb, AddDeviceProfileComponent as ɵc, SelectConfigurationModalComponent as ɵd, DeviceTabProfileComponent as ɵe, DeviceTabProfileDetailComponent as ɵf, DeviceProfileItemListComponent as ɵg, DeviceProfileNavigationFactory as ɵh, DeviceProfileGuard as ɵi };
//# sourceMappingURL=c8y-ngx-components-device-profile.js.map
