import { QueryList } from '@angular/core';
import { IOperationBulk, IResultList } from '@c8y/client';
import { OperationBulkRealtimeService, DatePickerComponent } from '@c8y/ngx-components';
import { BehaviorSubject, Observable } from 'rxjs';
import { StatusFilterComponent } from '../../status-filter/status-filter.component';
import { IStatusOption } from '../../status-filter/status-option.model';
import { BulkOperationsService } from '../bulk-operations.service';
import { BulkOperationListItemComponent } from './bulk-operation-list-item.component';
import { OperationType } from './type-list/operation-type.model';
export declare class BulkOperationsListComponent {
    realtime: OperationBulkRealtimeService;
    private bulkOperationsService;
    selectedTypeFilters: OperationType[];
    bulkOperationStatusOptions: IStatusOption[];
    filterPipe: any;
    refreshLoading: boolean;
    statusFilter$: BehaviorSubject<IStatusOption[]>;
    typeFilter$: BehaviorSubject<OperationType[]>;
    timeFilter$: BehaviorSubject<any>;
    reload$: BehaviorSubject<void>;
    listItems: QueryList<BulkOperationListItemComponent>;
    statusFilter: StatusFilterComponent;
    datePicker: DatePickerComponent;
    bulkOperations$: Observable<IResultList<IOperationBulk>>;
    private allFilterFragments;
    constructor(realtime: OperationBulkRealtimeService, bulkOperationsService: BulkOperationsService);
    filterByType(bulkOperations: IOperationBulk[], typeFilter: any): IOperationBulk[];
    resetFilter(): void;
    isFilterApplied(): any;
    filter(statusFilters: any, timeFilter: any): Promise<IResultList<IOperationBulk>>;
    getBulkOperations(filter?: any): Promise<IResultList<IOperationBulk>>;
    getTypeFilters(): OperationType[];
    addBulkOperation(): void;
    openFailedOperation(failedParentId: any): void;
    compareOperations(operationA: IOperationBulk, operationB: IOperationBulk): number;
    private flattenFilterFragments;
}
