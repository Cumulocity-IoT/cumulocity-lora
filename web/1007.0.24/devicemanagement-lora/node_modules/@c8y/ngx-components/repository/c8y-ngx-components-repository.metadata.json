{"__symbolic":"module","version":4,"metadata":{"RepositoryModule":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule","line":41,"character":1},"arguments":[{"imports":[{"__symbolic":"reference","module":"@c8y/ngx-components","name":"CoreModule","line":42,"character":12},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"FormsModule","line":42,"character":24},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"ngx-bootstrap/dropdown","name":"BsDropdownModule","line":42,"character":37},"member":"forRoot"}},{"__symbolic":"reference","module":"ngx-bootstrap/tooltip","name":"TooltipModule","line":42,"character":65},{"__symbolic":"reference","module":"ngx-bootstrap/popover","name":"PopoverModule","line":42,"character":80}],"exports":[],"declarations":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"ɵb"},{"__symbolic":"reference","name":"ɵc"},{"__symbolic":"reference","name":"ɵd"},{"__symbolic":"reference","name":"ɵe"},{"__symbolic":"reference","name":"ɵf"},{"__symbolic":"reference","name":"ɵg"},{"__symbolic":"reference","name":"ɵh"},{"__symbolic":"reference","name":"ɵi"},{"__symbolic":"reference","name":"ɵj"},{"__symbolic":"reference","name":"RepositorySelectModalComponent"},{"__symbolic":"reference","name":"ɵk"},{"__symbolic":"reference","name":"ɵl"},{"__symbolic":"reference","name":"ɵm"},{"__symbolic":"reference","name":"ɵn"},{"__symbolic":"reference","name":"ɵo"},{"__symbolic":"reference","name":"ɵq"},{"__symbolic":"reference","name":"ɵr"},{"__symbolic":"reference","name":"ɵs"},{"__symbolic":"reference","name":"ɵt"},{"__symbolic":"reference","name":"ɵu"}],"entryComponents":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"ɵb"},{"__symbolic":"reference","name":"ɵc"},{"__symbolic":"reference","name":"ɵd"},{"__symbolic":"reference","name":"ɵe"},{"__symbolic":"reference","name":"ɵf"},{"__symbolic":"reference","name":"ɵg"},{"__symbolic":"reference","name":"ɵh"},{"__symbolic":"reference","name":"ɵi"},{"__symbolic":"reference","name":"ɵk"},{"__symbolic":"reference","name":"RepositorySelectModalComponent"},{"__symbolic":"reference","name":"ɵl"},{"__symbolic":"reference","name":"ɵm"},{"__symbolic":"reference","name":"ɵn"},{"__symbolic":"reference","name":"ɵo"},{"__symbolic":"reference","name":"ɵu"}],"providers":[{"__symbolic":"reference","name":"RepositoryService"},{"__symbolic":"reference","name":"ɵp"},{"__symbolic":"reference","name":"ɵv"},{"__symbolic":"reference","name":"ɵw"},{"__symbolic":"reference","name":"ɵx"},{"provide":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"HOOK_NAVIGATOR_NODES","line":92,"character":15},"useClass":{"__symbolic":"reference","name":"ɵy"},"multi":true},{"provide":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"HOOK_ONCE_ROUTE","line":97,"character":15},"useValue":[{"path":"firmware","component":{"__symbolic":"reference","name":"ɵa"}},{"path":"firmware/:id","component":{"__symbolic":"reference","name":"ɵb"}},{"context":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"ViewContext","line":108,"character":19},"member":"Device"},"path":"firmware","component":{"__symbolic":"reference","name":"ɵh"},"label":{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"gettext","line":111,"character":17},"arguments":["Firmware"]},"icon":"c8y-firmware","priority":500,"canActivate":[{"__symbolic":"reference","name":"ɵv"}]},{"path":"software","component":{"__symbolic":"reference","name":"ɵe"}},{"path":"software/:id","component":{"__symbolic":"reference","name":"ɵf"}},{"context":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"ViewContext","line":125,"character":19},"member":"Device"},"path":"software","component":{"__symbolic":"reference","name":"ɵi"},"label":{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"gettext","line":128,"character":17},"arguments":["Software"]},"icon":"c8y-tools","priority":499,"canActivate":[{"__symbolic":"reference","name":"ɵw"}]},{"path":"configuration","component":{"__symbolic":"reference","name":"ɵm"}},{"context":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"ViewContext","line":138,"character":19},"member":"Device"},"path":"device-configuration","component":{"__symbolic":"reference","name":"ɵo"},"label":{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"gettext","line":141,"character":17},"arguments":["Configuration"]},"icon":"gears","priority":600,"canActivate":[{"__symbolic":"reference","name":"ɵx"}]}],"multi":true}]}]}],"members":{}},"RepositoryType":{"FIRMWARE":"c8y_Firmware","SOFTWARE":"c8y_Software","CONFIGURATION":"c8y_ConfigurationDump"},"REPOSITORY_BINARY_TYPES":{"__symbolic":"error","message":"Expression form not supported","line":9,"character":2,"module":"./repository.model"},"ModalModel":{"__symbolic":"interface"},"RepositoryCategory":{"__symbolic":"interface"},"FirmwareBinary":{"__symbolic":"interface"},"FirmwarePatchBinary":{"__symbolic":"interface"},"SoftwareBinary":{"__symbolic":"interface"},"RepositoryBinary":{"__symbolic":"interface"},"SelectedRepositoryBinary":{"__symbolic":"interface"},"DeviceFirmware":{"__symbolic":"interface"},"DeviceSoftware":{"__symbolic":"interface"},"DeviceSoftwareChange":{"__symbolic":"interface"},"ConfigurationSnapshot":{"__symbolic":"interface"},"SupportedConfigurationItem":{"__symbolic":"interface"},"DeviceConfigurationListEmptyState":{"__symbolic":"interface"},"DeviceConfigurationOperation":{"UPLOAD_CONFIG":"c8y_UploadConfigFile","DOWNLOAD_CONFIG":"c8y_DownloadConfigFile"},"RepositoryService":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":53,"character":1}}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@c8y/client","name":"InventoryService","line":60,"character":23},{"__symbolic":"reference","module":"@c8y/client","name":"InventoryBinaryService","line":61,"character":29},{"__symbolic":"reference","module":"@c8y/client","name":"OperationService","line":62,"character":23},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"AlertService","line":63,"character":19},{"__symbolic":"reference","module":"@c8y/client","name":"EventService","line":64,"character":19},{"__symbolic":"reference","module":"@c8y/client","name":"Realtime","line":65,"character":22},{"__symbolic":"reference","module":"@c8y/client","name":"EventBinaryService","line":66,"character":25}]}],"listRepositoryEntries":[{"__symbolic":"method"}],"save":[{"__symbolic":"method"}],"create":[{"__symbolic":"method"}],"createFirmwareOrSoftware":[{"__symbolic":"method"}],"saveBinary":[{"__symbolic":"method"}],"createOrUpdateRepositoryEntry":[{"__symbolic":"method"}],"createRepositoryBinary":[{"__symbolic":"method"}],"prepareRepositoryBinaryMO":[{"__symbolic":"method"}],"linkBinary":[{"__symbolic":"method"}],"cleanUp":[{"__symbolic":"method"}],"delete":[{"__symbolic":"method"}],"errorMsg":[{"__symbolic":"method"}],"getBaseVersionsCount$":[{"__symbolic":"method"}],"getBaseVersionFromMO":[{"__symbolic":"method"}],"isPatch":[{"__symbolic":"method"}],"getPatchVersionsCount$":[{"__symbolic":"method"}],"isLegacyEntry":[{"__symbolic":"method"}],"listAllVersions":[{"__symbolic":"method"}],"listBaseVersions":[{"__symbolic":"method"}],"listPatchVersions":[{"__symbolic":"method"}],"listBaseVersionAndPatches":[{"__symbolic":"method"}],"listChildren":[{"__symbolic":"method"}],"fetchAllItemsFromList":[{"__symbolic":"method"}],"getRepositoryEntryMO$":[{"__symbolic":"method"}],"getRepositoryBinaryMoByVersion":[{"__symbolic":"method"}],"getBinaryName$":[{"__symbolic":"method"}],"getDeviceTypeQuery":[{"__symbolic":"method"}],"getConfigurationTypeQuery":[{"__symbolic":"method"}],"getDeviceSoftwareList":[{"__symbolic":"method"}],"createSoftwareUpdateOperation":[{"__symbolic":"method"}],"getSoftwareUpdateOperation":[{"__symbolic":"method"}],"getDeviceSoftwareChangesFromOperation":[{"__symbolic":"method"}],"createFirmwareUpdateOperation":[{"__symbolic":"method"}],"getFirmwareUpdateOperation":[{"__symbolic":"method"}],"getUploadConfigurationFileOperation":[{"__symbolic":"method"}],"getDownloadConfigurationFileOperation":[{"__symbolic":"method"}],"getLastFirmwareUpdateOperation":[{"__symbolic":"method"}],"getLastSoftwareUpdateOperation":[{"__symbolic":"method"}],"getFirstMatchingOperation":[{"__symbolic":"method"}],"createObservedOperation":[{"__symbolic":"method"}],"observeOperation":[{"__symbolic":"method"}],"getLatestConfigurationEvent":[{"__symbolic":"method"}],"getConfigFileOperationList":[{"__symbolic":"method"}],"getConfigSnapshot":[{"__symbolic":"method"}],"getLegacyConfigSnapshot":[{"__symbolic":"method"}],"getBinaryFile":[{"__symbolic":"method"}],"getBinaryText":[{"__symbolic":"method"}],"getBinary":[{"__symbolic":"method"}],"fetchExternalBinary":[{"__symbolic":"method"}],"createEntry":[{"__symbolic":"method"}],"updateEntry":[{"__symbolic":"method"}],"getBaseVersionResultListForLegacyEntry":[{"__symbolic":"method"}],"getDeviceSoftwareChangesFromSoftwareListOperation":[{"__symbolic":"method"}],"getDeviceSoftwareChangesFromSoftwareOperation":[{"__symbolic":"method"}]}},"RepositorySelectModalComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":57,"character":1},"arguments":[{"selector":"c8y-repository-select-modal","template":"<c8y-select-modal\n  [icon]=\"icon\"\n  [title]=\"title\"\n  [subTitle]=\"subTitle\"\n  [items]=\"modalEntries | async\"\n  [mode]=\"mode\"\n  [disableSelected]=\"disableSelected\"\n  [labels]=\"labels\"\n  [showFilter]=\"showFilter\"\n  [areMoreEntries]=\"areMoreEntries\"\n  (search)=\"search($event)\"\n  (result)=\"result($event)\"\n>\n</c8y-select-modal>\n"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"RepositoryService"},{"__symbolic":"reference","module":"@ngx-translate/core","name":"TranslateService","line":184,"character":30}]}],"ngOnInit":[{"__symbolic":"method"}],"getAndAssignRepositoryBinaries":[{"__symbolic":"method"}],"search":[{"__symbolic":"method"}],"result":[{"__symbolic":"method"}],"aggregate":[{"__symbolic":"method"}],"getSelectModalOptions":[{"__symbolic":"method"}],"isBinaryRepositorySelected":[{"__symbolic":"method"}],"getSelectModalObject":[{"__symbolic":"method"}]}},"ɵa":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":22,"character":1},"arguments":[{"selector":"c8y-firmware-list","template":"<c8y-title>\n  {{ 'Firmware repository' | translate }}\n</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form\">\n  <div class=\"input-group input-group-search\">\n    <input\n      type=\"search\"\n      class=\"form-control\"\n      title=\"{{ 'Filter firmware…' | translate }}\"\n      placeholder=\"{{ 'Filter firmware…' | translate }}\"\n      [ngModel]=\"textFilter$ | async\"\n      (ngModelChange)=\"textFilter$.next($event)\"\n    />\n    <span class=\"input-group-addon\">\n      <i c8yIcon=\"filter\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n      <i\n        c8yIcon=\"times\"\n        class=\"text-muted\"\n        *ngIf=\"(textFilter$ | async).length > 0\"\n        (click)=\"textFilter$.next('')\"\n      ></i>\n    </span>\n  </div>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Add firmware' | translate }}\" (click)=\"addFirmware()\">\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add firmware' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    *ngIf=\"canAddFirmwarePatch$ | async\"\n    class=\"btn btn-link\"\n    title=\"{{ 'Add firmware patch' | translate }}\"\n    (click)=\"addFirmwarePatch()\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add firmware patch' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"reload$.next()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'fa-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<div class=\"c8y-empty-state text-center\" *ngIf=\"(firmwares$ | async)?.data.length === 0\">\n  <h1 c8yIcon=\"c8y-firmware\" class=\"c8y-icon-duocolor\"></h1>\n  <h3 translate>No firmware to display.</h3>\n  <p translate>Add a new firmware by clicking below.</p>\n  <p>\n    <button\n      class=\"btn btn-primary\"\n      title=\"{{ 'Add firmware' | translate }}\"\n      (click)=\"addFirmware()\"\n      translate\n    >\n      Add firmware\n    </button>\n  </p>\n</div>\n\n<c8y-list-group class=\"elevation-1\">\n  <c8y-li *c8yFor=\"let firmware of firmwares$ | async; let i = index; loadMore: 'auto'\">\n    <c8y-li-icon>\n      <i c8yIcon=\"c8y-firmware\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-5 pointer\" (click)=\"editFirmware(firmware)\">\n        <div class=\"text-truncate\" title=\"{{ firmware.name }}\">\n          {{ firmware.name }}\n        </div>\n      </div>\n      <div class=\"col-5\">\n        <div class=\"text-truncate\" title=\"{{ 'Device type' | translate }}: {{ getDeviceTypeTitle(firmware) }}\">\n          <span class=\"text-label-small m-r-8\" translate>\n            Device type\n          </span>\n          <span *ngIf=\"firmware.c8y_Filter?.type; else emptyText\">\n            {{ firmware.c8y_Filter?.type }}\n          </span>\n          <ng-template #emptyText> --- </ng-template>\n        </div>\n      </div>\n      <div class=\"col-2\">\n        <span *ngIf=\"isLegacy(firmware)\" class=\"label label-warning flex-item-right-sm\">\n          <span translate>Legacy</span>\n        </span>\n\n        <span *ngIf=\"!isLegacy(firmware)\">\n          <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) === null\">\n            <span class=\"label label-info\">\n              <i c8yIcon=\"circle-o-notch\" class=\"fa-spin\"></i>\n            </span>\n          </span>\n          <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) !== null\">\n            <span [ngPlural]=\"getBaseVersionsCount$(firmware) | async\">\n              <ng-template ngPluralCase=\"=0\">\n                <span class=\"label label-default flex-item-right-sm\">\n                  <span translate>No versions</span>\n                </span>\n              </ng-template>\n              <ng-template ngPluralCase=\"=1\">\n                <span class=\"label label-info\"><span translate>1 version</span></span>\n              </ng-template>\n              <ng-template ngPluralCase=\"other\">\n                <span class=\"label label-info\">\n                  <span\n                    ngNonBindable\n                    translate\n                    [translateParams]=\"{ count: getBaseVersionsCount$(firmware) | async }\"\n                    >{{ count }} versions</span\n                  >\n                </span>\n              </ng-template>\n            </span>\n          </span>\n        </span>\n      </div>\n    </c8y-li-body>\n\n    <c8y-li-action (click)=\"editFirmware(firmware)\" icon=\"pencil\">\n      {{ 'Edit' | translate }}\n    </c8y-li-action>\n\n    <c8y-li-action (click)=\"deleteFirmware(firmware)\" icon=\"trash\">\n      {{ 'Delete' | translate }}\n    </c8y-li-action>\n  </c8y-li>\n</c8y-list-group>\n"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"RepositoryService"},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"ModalService","line":54,"character":26},{"__symbolic":"reference","module":"ngx-bootstrap/modal","name":"BsModalService","line":55,"character":28},{"__symbolic":"reference","module":"@ngx-translate/core","name":"TranslateService","line":56,"character":30},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"AlertService","line":57,"character":26},{"__symbolic":"reference","module":"@angular/router","name":"Router","line":58,"character":20},{"__symbolic":"reference","module":"@angular/router","name":"ActivatedRoute","line":59,"character":28}]}],"getFirmwares":[{"__symbolic":"method"}],"addFirmware":[{"__symbolic":"method"}],"addFirmwarePatch":[{"__symbolic":"method"}],"editFirmware":[{"__symbolic":"method"}],"deleteFirmware":[{"__symbolic":"method"}],"getBaseVersionsCount$":[{"__symbolic":"method","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"memoize","line":110,"character":3},"arguments":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"lodash-es","name":"property","line":110,"character":11},"arguments":["id"]}]}]}],"getDeviceTypeTitle":[{"__symbolic":"method"}]}},"ɵb":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":24,"character":1},"arguments":[{"selector":"c8y-firmware-details","template":"<c8y-title>\n  {{ (firmware$ | async)?.name }}\n</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    path=\"#/firmware\"\n    label=\"{{ 'Firmware repository' | translate }}\"\n    icon=\"c8y-firmware\"\n  >\n  </c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    *ngIf=\"!(isLegacy$ | async)\"\n    class=\"btn btn-link\"\n    title=\"{{ 'Add firmware' | translate }}\"\n    (click)=\"addBaseVersion()\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add firmware' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    *ngIf=\"canAddPatchVersions$ | async\"\n    class=\"btn btn-link\"\n    title=\"{{ 'Add firmware patch' | translate }}\"\n    (click)=\"addPatchVersion()\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add firmware patch' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"reload$.next()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'fa-spin': reloading$ | async }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<div class=\"card m-b-4\">\n  <div class=\"card-header separator\">\n    <h4 class=\"card-title\" translate>\n      Name, description and device type filter\n    </h4>\n  </div>\n  <div class=\"card-block\">\n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <c8y-form-group>\n          <label class=\"control-label\">\n            {{ 'Name' | translate }}\n          </label>\n          <div class=\"input-group input-group-editable\">\n            <input\n              #nameInput\n              type=\"text\"\n              class=\"form-control\"\n              [ngModel]=\"(firmware$ | async)?.name\"\n              #nameModel=\"ngModel\"\n              placeholder=\"{{ 'e.g. My firmware' | translate }}\"\n              required\n            />\n            <span></span>\n            <div class=\"input-group-btn\">\n              <button\n                class=\"btn btn-primary\"\n                title=\"{{ 'Save' | translate }}\"\n                (click)=\"updateFirmware$.next({ name: nameInput.value }); nameModel.reset()\"\n                [disabled]=\"nameInput.value.length == 0\"\n              >\n                {{ 'Save' | translate }}\n              </button>\n            </div>\n          </div>\n        </c8y-form-group>\n      </div>\n      <div class=\"col-md-4\">\n        <c8y-form-group>\n          <label class=\"control-label\">\n            {{ 'Description' | translate }}\n          </label>\n          <div class=\"input-group input-group-editable\">\n            <input\n              #descriptionInput\n              type=\"text\"\n              class=\"form-control\"\n              [ngModel]=\"(firmware$ | async)?.description\"\n              #descriptionModel=\"ngModel\"\n              placeholder=\"{{ 'e.g. Firmware for hardware revision b' | translate }}\"\n            />\n            <span></span>\n            <div class=\"input-group-btn\">\n              <button\n                class=\"btn btn-primary\"\n                title=\"{{ 'Save' | translate }}\"\n                (click)=\"\n                  updateFirmware$.next({ description: descriptionInput.value });\n                  descriptionModel.reset()\n                \"\n              >\n                {{ 'Save' | translate }}\n              </button>\n            </div>\n          </div>\n        </c8y-form-group>\n      </div>\n      <div class=\"col-md-4\">\n        <c8y-form-group>\n          <label class=\"control-label\">\n            {{ 'Device type filter' | translate }}\n\n            <a\n              class=\"pointer\"\n              popover=\"{{\n                'If the filter is set, the firmware will show up for installation only for devices of that type. If no filter is set, it will be available for all devices.'\n                  | translate\n              }}\"\n              [outsideClick]=\"true\"\n              container=\"body\"\n            >\n              <i c8yIcon=\"question-circle-o\"></i>\n            </a>\n          </label>\n          <div class=\"input-group input-group-editable\">\n            <input\n              #deviceTypeInput\n              type=\"text\"\n              class=\"form-control\"\n              [ngModel]=\"(firmware$ | async)?.c8y_Filter?.type\"\n              #deviceTypeModel=\"ngModel\"\n              placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n            />\n            <span></span>\n            <div class=\"input-group-btn\">\n              <button\n                class=\"btn btn-primary\"\n                title=\"{{ 'Save' | translate }}\"\n                (click)=\"\n                  updateFirmware$.next({ c8y_Filter: { type: deviceTypeInput.value } });\n                  deviceTypeModel.reset()\n                \"\n              >\n                {{ 'Save' | translate }}\n              </button>\n            </div>\n          </div>\n        </c8y-form-group>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"card\">\n  <div class=\"card-header separator\">\n    <h4 class=\"card-title\" translate>\n      Versions and patches\n    </h4>\n  </div>\n\n  <div class=\"card-block p-t-0\">\n    <div *ngIf=\"(baseVersions$ | async)?.data.length === 0\">\n      <div class=\"c8y-empty-state text-center\">\n        <h1 c8yIcon=\"c8y-firmware\" class=\"c8y-icon-duocolor\"></h1>\n        <h3 translate>No versions to display.</h3>\n        <p translate>Add a new version by clicking below.</p>\n        <p>\n          <button\n            class=\"btn btn-primary\"\n            title=\"{{ 'Add firmware' | translate }}\"\n            (click)=\"addBaseVersion()\"\n            translate\n          >\n            Add firmware\n          </button>\n        </p>\n      </div>\n    </div>\n\n    <c8y-list-group class=\"m-b-16\" *ngIf=\"(baseVersions$ | async)?.data.length > 0\">\n      <c8y-li\n        *c8yFor=\"let baseVersion of baseVersions$ | async; let i = index; loadMore: 'auto'\"\n        [ngClass]=\"{\n          'c8y-list__item--empty-actions': !(getPatchVersions$(baseVersion) | async)?.data.length\n        }\"\n        [collapsed]=\"!expanded[baseVersion.id]\"\n        (collapsedChange)=\"expanded[baseVersion.id] = !$event\"\n      >\n        <c8y-li-icon>\n          <i c8yIcon=\"c8y-firmware\"></i>\n        </c8y-li-icon>\n\n        <c8y-li-body class=\"content-flex-50\">\n          <div class=\"col-4\">\n            <p>{{ baseVersion.c8y_Firmware.version }}</p>\n          </div>\n          <div class=\"col-5 \">\n            <p class=\"text-truncate\">\n              <span class=\"text-label-small m-r-8\" translate>\n                File\n              </span>\n              <span title=\" {{ getBinaryName$(baseVersion.c8y_Firmware.url) | async }}\">\n                <a href=\"{{baseVersion.c8y_Firmware.url}}\" target=\"_blank\" rel=\"noopener noreferrer\">{{ getBinaryName$(baseVersion.c8y_Firmware.url) | async }}</a>\n              </span>\n            </p>\n          </div>\n          <div class=\"col-2 flex-row\">\n            <span *ngIf=\"isLegacy$ | async\" class=\"label label-warning flex-item-right-sm\">\n              {{ 'Legacy' | translate }}\n            </span>\n\n            <span *ngIf=\"!(isLegacy$ | async)\">\n              <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) === null\">\n                <span class=\"label label-info\">\n                  <i c8yIcon=\"circle-o-notch\" class=\"fa-spin\"></i>\n                </span>\n              </span>\n              <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) !== null\">\n                <span [ngPlural]=\"getPatchVersionsCount$(baseVersion) | async\">\n                  <ng-template ngPluralCase=\"=0\">\n                    <span class=\"label label-default flex-item-right-sm\">\n                      <span translate>No patches</span></span\n                    >\n                  </ng-template>\n                  <ng-template ngPluralCase=\"=1\">\n                    <span class=\"label label-info\">\n                      <span translate>1 patch</span>\n                    </span>\n                  </ng-template>\n                  <ng-template ngPluralCase=\"other\">\n                    <span class=\"label label-info\">\n                      <span\n                        ngNonBindable\n                        translate\n                        [translateParams]=\"{ count: getPatchVersionsCount$(baseVersion) | async }\"\n                        >{{ count }} patches</span\n                      ></span\n                    >\n                  </ng-template>\n                </span>\n              </span>\n            </span>\n            <div class=\"v-fit-20\" *ngIf=\"!(isLegacy$ | async)\">\n              <button\n                class=\"btn btn-danger btn-xs visible-xs flex-item-right m-r-8 m-t-8\"\n                (click)=\"deleteBaseVersion(baseVersion)\"\n                title=\"{{ 'Delete' | translate }}\"\n              >\n                <i c8yIcon=\"minus-circle\"></i> {{ 'Delete' | translate }}\n              </button>\n            </div>\n          </div>\n          <div *ngIf=\"!(isLegacy$ | async)\" class=\"flex-item-right v-fit-20 p-r-8 hidden-xs\">\n            <button\n              class=\"btn btn-dot text-danger showOnHover\"\n              (click)=\"deleteBaseVersion(baseVersion)\"\n              title=\"{{ 'Delete' | translate }}\"\n            >\n              <i c8yIcon=\"minus-circle\"></i>\n            </button>\n          </div>\n        </c8y-li-body>\n        <c8y-li-collapse\n          *ngIf=\"(getPatchVersions$(baseVersion) | async)?.data.length\"\n          [item]=\"baseVersion\"\n        >\n          <c8y-list-group>\n            <c8y-li\n              *c8yFor=\"\n                let patchVersion of getPatchVersions$(baseVersion) | async;\n                let i = index;\n                loadMore: 'auto'\n              \"\n            >\n              <c8y-li-icon>\n                <i c8yIcon=\"c8y-firmware\"></i>\n              </c8y-li-icon>\n              <c8y-li-body class=\"content-flex-50\">\n                <div class=\"col-5\">\n                  {{ patchVersion.c8y_Firmware.version }}\n                </div>\n                <div class=\"col-5 text-truncate\">\n                  <span class=\"text-label-small m-r-8\" translate>\n                    File\n                  </span>\n                  <span title=\"{{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\">\n                    {{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\n                  </span>\n\n                  <button\n                    class=\"btn btn-danger btn-xs visible-xs flex-item-right m-r-8\"\n                    (click)=\"deletePatchVersion(patchVersion)\"\n                    title=\"{{ 'Delete' | translate }}\"\n                  >\n                    <i c8yIcon=\"minus-circle\"></i> {{ 'Delete' | translate }}\n                  </button>\n                </div>\n                <div class=\"flex-item-right p-r-8 hidden-xs\">\n                  <button\n                    class=\"btn btn-dot text-danger showOnHover\"\n                    (click)=\"deletePatchVersion(patchVersion)\"\n                    title=\"{{ 'Delete' | translate }}\"\n                  >\n                    <i c8yIcon=\"minus-circle\"></i>\n                  </button>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </c8y-li-collapse>\n      </c8y-li>\n    </c8y-list-group>\n  </div>\n</div>\n"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/router","name":"ActivatedRoute","line":78,"character":28},{"__symbolic":"reference","module":"@c8y/client","name":"InventoryService","line":79,"character":30},{"__symbolic":"reference","name":"RepositoryService"},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"AlertService","line":81,"character":26},{"__symbolic":"reference","module":"@ngx-translate/core","name":"TranslateService","line":82,"character":30},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"ModalService","line":83,"character":26},{"__symbolic":"reference","module":"ngx-bootstrap","name":"BsModalService","line":84,"character":28}]}],"ngOnInit":[{"__symbolic":"method"}],"getPatchVersionsCount$":[{"__symbolic":"method","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"memoize","line":105,"character":3},"arguments":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"lodash-es","name":"property","line":105,"character":11},"arguments":["id"]}]}]}],"getBinaryName$":[{"__symbolic":"method","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"memoize","line":119,"character":3}}]}],"getPatchVersions$":[{"__symbolic":"method","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"memoize","line":124,"character":3},"arguments":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"lodash-es","name":"property","line":124,"character":11},"arguments":["id"]}]}]}],"addBaseVersion":[{"__symbolic":"method"}],"addPatchVersion":[{"__symbolic":"method"}],"deleteBaseVersion":[{"__symbolic":"method"}],"deletePatchVersion":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}]}},"ɵc":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":11,"character":1},"arguments":[{"selector":"c8y-add-firmware-software-modal","template":"<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-firmware'\"></i>\n    <h4 translate>\n      Add firmware\n    </h4>\n  </div>\n  <div class=\"p-16 text-center separator-bottom\" *ngIf=\"!firmwarePreselected\">\n    <p class=\"lead m-0\" translate>\n      Select or create new firmware\n    </p>\n  </div>\n  <form\n    class=\"d-contents\"\n    autocomplete=\"off\"\n    #firmwareForm=\"ngForm\"\n    (ngSubmit)=\"firmwareForm.form.valid && save()\"\n  >\n    <div class=\"modal-inner-scroll\">\n      <div class=\"modal-body\">\n        <div [hidden]=\"firmwarePreselected\">\n          <c8y-form-group>\n            <label for=\"firmwareName\" translate>Firmware</label>\n            <c8y-typeahead\n              [(ngModel)]=\"model.selected\"\n              name=\"firmwareName\"\n              placeholder=\"{{ 'Select or enter' | translate }}\"\n              (onSearch)=\"onInput.next($event)\"\n              [required]=\"true\"\n            >\n              <c8y-li\n                *c8yFor=\"\n                  let firmware of firmwaresResult;\n                  loadMore: 'auto';\n                  notFound: notFoundTemplate\n                \"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"model.selected = firmware; model.description = firmware.description\"\n                [active]=\"model.selected === firmware\"\n              >\n                <c8y-highlight\n                  [text]=\"firmware.name || '--'\"\n                  [pattern]=\"onInput | async\"\n                ></c8y-highlight>\n              </c8y-li>\n              <ng-template #notFoundTemplate>\n                <c8y-li class=\"bg-gray-lighter p-8\" *ngIf=\"(onInput | async)?.length > 0\">\n                  <span translate>No match found, add new`firmware`? </span>\n                  <button\n                    title=\"{{ 'Create new`firmware`' | translate }}\"\n                    type=\"button\"\n                    class=\"btn btn-primary btn-xs m-l-16\"\n                    translate\n                  >\n                    Create new`firmware`\n                  </button>\n                </c8y-li>\n              </ng-template>\n            </c8y-typeahead>\n          </c8y-form-group>\n\n          <c8y-form-group>\n            <label for=\"firmwareDescription\" translate>Description</label>\n            <input\n              id=\"firmwareDescription\"\n              class=\"form-control\"\n              autocomplete=\"off\"\n              name=\"description\"\n              [(ngModel)]=\"model.description\"\n              placeholder=\"{{ 'e.g. Firmware for hardware revision b' | translate }}\"\n              [disabled]=\"model.selected?.id\"\n              [required]=\"true\"\n            />\n          </c8y-form-group>\n        </div>\n\n        <c8y-form-group>\n          <label for=\"firmwareVersion\" translate>Version</label>\n          <input\n            id=\"firmwareVersion\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"version\"\n            [(ngModel)]=\"model.version\"\n            placeholder=\"{{ 'e.g.' | translate }} 1.0.0\"\n            [required]=\"true\"\n          />\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <div class=\"legend form-block top-m-xxl\" translate>Firmware file</div>\n          <c8y-file-picker [maxAllowedFiles]=\"1\" (onFilesPicked)=\"onFile($event)\">\n          </c8y-file-picker>\n        </c8y-form-group>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <button\n        title=\"{{ 'Cancel' | translate }}\"\n        class=\"btn btn-default\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        [disabled]=\"saving\"\n        translate\n      >\n        Cancel\n      </button>\n\n      <button\n        title=\"{{ 'Add firmware' | translate }}\"\n        class=\"btn btn-primary\"\n        type=\"submit\"\n        [ngClass]=\"{ 'btn-pending': saving }\"\n        [disabled]=\"\n          !firmwareForm.form.valid ||\n          firmwareForm.form.pristine ||\n          saving ||\n          (!model.binary?.url && !model.binary?.file)\n        \"\n        translate\n      >\n        Add firmware\n      </button>\n    </div>\n  </form>\n</div>\n"}]}],"members":{"form":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":16,"character":3},"arguments":["firmwareForm",{"static":false}]}]}],"saved":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":17,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"ngx-bootstrap/modal","name":"BsModalRef","line":34,"character":19},{"__symbolic":"reference","name":"RepositoryService"},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"AlertService","line":36,"character":19}]}],"ngOnInit":[{"__symbolic":"method"}],"setInitialState":[{"__symbolic":"method"}],"loadFirmwares":[{"__symbolic":"method"}],"getFirmwareResult":[{"__symbolic":"method"}],"save":[{"__symbolic":"method"}],"successMsg":[{"__symbolic":"method"}],"cancel":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}],"onFile":[{"__symbolic":"method"}]}},"ɵd":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":20,"character":1},"arguments":[{"selector":"c8y-add-firmware-patch-modal.component","template":"<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-firmware'\"></i>\n    <h4 translate>\n      Add firmware patch\n    </h4>\n  </div>\n  <div class=\"p-16 text-center separator-bottom\">\n    <p class=\"lead m-0\" translate>\n      Select a firmware version\n    </p>\n  </div>\n\n  <form class=\"d-contents\" autocomplete=\"off\" #firmwarePatchForm=\"ngForm\" (ngSubmit)=\"save()\">\n    <div class=\"modal-inner-scroll\">\n      <div class=\"modal-body\">\n        <div [hidden]=\"firmwarePreselected\">\n          <c8y-form-group>\n            <label for=\"firmwareName\" translate>Firmware</label>\n            <c8y-typeahead\n              [ngModel]=\"model.selected\"\n              name=\"firmwareName\"\n              placeholder=\"{{ 'Select or enter' | translate }}\"\n              (onSearch)=\"firmwareInput$.next($event)\"\n              [allowFreeEntries]=\"false\"\n              [required]=\"true\"\n            >\n              <c8y-li\n                *c8yFor=\"let firmware of firmwares$ | async; loadMore: 'auto'\"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"model.selected = firmware; firmwareSelected$.next(firmware)\"\n                [active]=\"model.selected === firmware\"\n              >\n                <c8y-highlight\n                  [text]=\"firmware.name || '--'\"\n                  [pattern]=\"firmwareInput$ | async\"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <c8y-messages\n              ><c8y-message\n                name=\"notExisting\"\n                [text]=\"'Select one of the existing firmwares.' | translate\"\n              ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n\n        <c8y-form-group>\n          <label for=\"patchDependency\" class=\"m-r-8\" translate>Version</label>\n          <c8y-typeahead\n            [ngModel]=\"model.dependency\"\n            name=\"patchDependency\"\n            placeholder=\"{{ 'Select or enter' | translate }}\"\n            (onSearch)=\"patchDependencyInput$.next($event)\"\n            [displayProperty]=\"'c8y_Firmware.version'\"\n            [allowFreeEntries]=\"false\"\n            [disabled]=\"\n              (baseVersions$ | async) === null || (baseVersions$ | async)?.data.length === 0\n            \"\n            [required]=\"true\"\n          >\n            <c8y-li\n              *c8yFor=\"\n                let baseVersion of baseVersions$;\n                loadMore: 'auto';\n                pipe: baseVersionsFilterPipe\n              \"\n              class=\"p-l-8 p-r-8 c8y-list__item--link\"\n              (click)=\"model.dependency = baseVersion\"\n              [active]=\"model.dependency === baseVersion\"\n            >\n              <c8y-highlight\n                [text]=\"baseVersion.c8y_Firmware.version || '--'\"\n                [pattern]=\"patchDependencyInput$ | async\"\n              ></c8y-highlight>\n            </c8y-li>\n          </c8y-typeahead>\n          <c8y-messages\n            ><c8y-message\n              name=\"notExisting\"\n              [text]=\"'Select one of the existing versions.' | translate\"\n            ></c8y-message>\n          </c8y-messages>\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <label for=\"patchVersion\" translate>Patch</label>\n          <input\n            id=\"patchVersion\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"patchVersion\"\n            [(ngModel)]=\"model.patchVersion\"\n            placeholder=\"{{ 'e.g.' | translate }} 1.0.0\"\n            required\n          />\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <div class=\"legend form-block top-m-xxl\" translate>Patch file</div>\n          <c8y-file-picker [maxAllowedFiles]=\"1\" (onFilesPicked)=\"onFile($event)\">\n          </c8y-file-picker>\n        </c8y-form-group>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <button\n        title=\"{{ 'Cancel' | translate }}\"\n        class=\"btn btn-default\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        [disabled]=\"saving\"\n        translate\n      >\n        Cancel\n      </button>\n      <button\n        title=\"{{ 'Add firmware patch' | translate }}\"\n        class=\"btn btn-primary\"\n        [ngClass]=\"{ 'btn-pending': saving }\"\n        type=\"submit\"\n        [disabled]=\"\n          !firmwarePatchForm.form.valid ||\n          firmwarePatchForm.form.pristine ||\n          (!model.binary?.url && !model.binary?.file) ||\n          saving\n        \"\n        translate\n      >\n        Add firmware patch\n      </button>\n    </div>\n  </form>\n</div>\n"}]}],"members":{"saved":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":25,"character":3}}]}],"dropdown":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":27,"character":3},"arguments":["dropdown",{"static":false}]}]}],"form":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":28,"character":3},"arguments":["firmwarePatchForm",{"static":false}]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"ngx-bootstrap/modal","name":"BsModalRef","line":92,"character":19},{"__symbolic":"reference","name":"RepositoryService"},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"AlertService","line":94,"character":19}]}],"ngOnInit":[{"__symbolic":"method"}],"setInitialState":[{"__symbolic":"method"}],"save":[{"__symbolic":"method"}],"successMsg":[{"__symbolic":"method"}],"cancel":[{"__symbolic":"method"}],"onFile":[{"__symbolic":"method"}]}},"ɵe":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":19,"character":1},"arguments":[{"selector":"c8y-software-list","template":"<c8y-title>\n  {{ 'Software repository' | translate }}\n</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form\">\n  <div class=\"input-group input-group-search\">\n    <input\n      type=\"search\"\n      class=\"form-control\"\n      title=\"{{ 'Filter software…' | translate }}\"\n      placeholder=\"{{ 'Filter software…' | translate }}\"\n      [ngModel]=\"textFilter$ | async\"\n      (ngModelChange)=\"textFilter$.next($event)\"\n    />\n    <span class=\"input-group-addon\">\n      <i c8yIcon=\"filter\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n      <i\n        c8yIcon=\"times\"\n        class=\"text-muted\"\n        *ngIf=\"(textFilter$ | async).length > 0\"\n        (click)=\"textFilter$.next('')\"\n      ></i>\n    </span>\n  </div>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Add software' | translate }}\" (click)=\"addSoftware()\">\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add software' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"reload$.next()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'fa-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<div class=\"c8y-empty-state text-center\" *ngIf=\"(softwares$ | async)?.data.length === 0\">\n  <h1 c8yIcon=\"c8y-tools\" class=\"c8y-icon-duocolor\"></h1>\n  <h3 translate>No software to display.</h3>\n  <p translate>Add a new software by clicking below.</p>\n  <p>\n    <button\n      class=\"btn btn-primary\"\n      title=\"{{ 'Add software' | translate }}\"\n      (click)=\"addSoftware()\"\n      translate\n    >\n      Add software\n    </button>\n  </p>\n</div>\n\n<c8y-list-group class=\"elevation-1\">\n  <c8y-li *c8yFor=\"let software of softwares$ | async; let i = index; loadMore: 'auto'\">\n    <c8y-li-icon>\n      <i c8yIcon=\"c8y-tools\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-5 pointer\" (click)=\"editSoftware(software)\">\n        <div class=\"text-truncate\" title=\"{{ software.name }}\">\n          {{ software.name }}\n        </div>\n      </div>\n      <div class=\"col-5\">\n        <div class=\"text-truncate\" title=\"{{ 'Device type' | translate }}: {{ getDeviceTypeTitle(software) }}\">\n          <span class=\"text-label-small m-r-8\" translate>\n            Device type\n          </span>\n          <span *ngIf=\"software.c8y_Filter?.type; else emptyText\">\n            {{ software.c8y_Filter?.type }}\n          </span>\n          <ng-template #emptyText> --- </ng-template>\n        </div>\n      </div>\n      <div class=\"col-2\">\n        <span *ngIf=\"isLegacy(software)\" class=\"label label-warning flex-item-right-sm\">\n          <span translate>Legacy</span>\n        </span>\n\n        <span *ngIf=\"!isLegacy(software)\">\n          <span *ngIf=\"(getBaseVersionsCount$(software) | async) === null\">\n            <span class=\"label label-info\">\n              <i c8yIcon=\"circle-o-notch\" class=\"fa-spin\"></i>\n            </span>\n          </span>\n          <span *ngIf=\"(getBaseVersionsCount$(software) | async) !== null\">\n            <span [ngPlural]=\"getBaseVersionsCount$(software) | async\">\n              <ng-template ngPluralCase=\"=0\">\n                <span class=\"label label-default flex-item-right-sm\">\n                  <span translate>No versions</span>\n                </span>\n              </ng-template>\n              <ng-template ngPluralCase=\"=1\">\n                <span class=\"label label-info\"><span translate>1 version</span></span>\n              </ng-template>\n              <ng-template ngPluralCase=\"other\">\n                <span class=\"label label-info\">\n                  <span ngNonBindable translate [translateParams]=\"{ count: getBaseVersionsCount$(software) | async }\">\n                    {{ count }} versions\n                  </span>\n                </span>\n              </ng-template>\n            </span>\n          </span>\n        </span>\n      </div>\n    </c8y-li-body>\n\n    <c8y-li-action (click)=\"editSoftware(software)\" icon=\"pencil\">\n      {{ 'Edit' | translate }}\n    </c8y-li-action>\n\n    <c8y-li-action (click)=\"deleteSoftware(software)\" icon=\"trash\">\n      {{ 'Delete' | translate }}\n    </c8y-li-action>\n  </c8y-li>\n</c8y-list-group>\n"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"RepositoryService"},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"ModalService","line":48,"character":26},{"__symbolic":"reference","module":"ngx-bootstrap/modal","name":"BsModalService","line":49,"character":28},{"__symbolic":"reference","module":"@ngx-translate/core","name":"TranslateService","line":50,"character":30},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"AlertService","line":51,"character":26},{"__symbolic":"reference","module":"@angular/router","name":"Router","line":52,"character":20},{"__symbolic":"reference","module":"@angular/router","name":"ActivatedRoute","line":53,"character":28}]}],"getSoftwares":[{"__symbolic":"method"}],"addSoftware":[{"__symbolic":"method"}],"editSoftware":[{"__symbolic":"method"}],"deleteSoftware":[{"__symbolic":"method"}],"getBaseVersionsCount$":[{"__symbolic":"method","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"memoize","line":96,"character":3},"arguments":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"lodash-es","name":"property","line":96,"character":11},"arguments":["id"]}]}]}],"getDeviceTypeTitle":[{"__symbolic":"method"}]}},"ɵf":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":21,"character":1},"arguments":[{"selector":"c8y-software-details","template":"<c8y-title>\n  {{ (software$ | async)?.name }}\n</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    path=\"#/software\"\n    label=\"{{ 'Software repository' | translate }}\"\n    icon=\"c8y-tools\"\n  >\n  </c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    *ngIf=\"!(isLegacy$ | async)\"\n    class=\"btn btn-link\"\n    title=\"{{ 'Add software' | translate }}\"\n    (click)=\"addBaseVersion()\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add software' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"reload$.next()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'fa-spin': reloading$ | async }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<div class=\"card m-b-4\">\n  <div class=\"card-header separator\">\n    <h4 class=\"card-title\" translate>\n      Name, description and device type filter\n    </h4>\n  </div>\n  <div class=\"card-block\">\n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <c8y-form-group>\n          <label class=\"control-label\">\n            {{ 'Name' | translate }}\n          </label>\n          <div class=\"input-group input-group-editable\">\n            <input\n              #nameInput\n              type=\"text\"\n              class=\"form-control\"\n              [ngModel]=\"(software$ | async)?.name\"\n              #nameModel=\"ngModel\"\n              placeholder=\"{{ 'e.g. My software' | translate }}\"\n              required\n            />\n            <span></span>\n            <div class=\"input-group-btn\">\n              <button\n                class=\"btn btn-primary\"\n                title=\"{{ 'Save' | translate }}\"\n                (click)=\"updateSoftware$.next({ name: nameInput.value }); nameModel.reset()\"\n                [disabled]=\"nameInput.value.length == 0\"\n              >\n                {{ 'Save' | translate }}\n              </button>\n            </div>\n          </div>\n        </c8y-form-group>\n      </div>\n      <div class=\"col-md-4\">\n        <c8y-form-group>\n          <label class=\"control-label\">\n            {{ 'Description' | translate }}\n          </label>\n          <div class=\"input-group input-group-editable\">\n            <input\n              #descriptionInput\n              type=\"text\"\n              class=\"form-control\"\n              [ngModel]=\"(software$ | async)?.description\"\n              #descriptionModel=\"ngModel\"\n              placeholder=\"{{ 'e.g. Cloud connectivity software' | translate }}\"\n            />\n            <span></span>\n            <div class=\"input-group-btn\">\n              <button\n                class=\"btn btn-primary\"\n                title=\"{{ 'Save' | translate }}\"\n                (click)=\"\n                  updateSoftware$.next({ description: descriptionInput.value });\n                  descriptionModel.reset()\n                \"\n              >\n                {{ 'Save' | translate }}\n              </button>\n            </div>\n          </div>\n        </c8y-form-group>\n      </div>\n      <div class=\"col-md-4\">\n        <c8y-form-group>\n          <label class=\"control-label\">\n            {{ 'Device type filter' | translate }}\n\n            <a\n              class=\"pointer\"\n              popover=\"{{\n                'If the filter is set, the software will show up for installation only for devices of that type. If no filter is set, it will be available for all devices.'\n                  | translate\n              }}\"\n              [outsideClick]=\"true\"\n              container=\"body\"\n            >\n              <i c8yIcon=\"question-circle-o\"></i>\n            </a>\n          </label>\n          <div class=\"input-group input-group-editable\">\n            <input\n              #deviceTypeInput\n              type=\"text\"\n              class=\"form-control\"\n              [ngModel]=\"(software$ | async)?.c8y_Filter?.type\"\n              #deviceTypeModel=\"ngModel\"\n              placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n            />\n            <span></span>\n            <div class=\"input-group-btn\">\n              <button\n                class=\"btn btn-primary\"\n                title=\"{{ 'Save' | translate }}\"\n                (click)=\"\n                  updateSoftware$.next({ c8y_Filter: { type: deviceTypeInput.value } });\n                  deviceTypeModel.reset()\n                \"\n              >\n                {{ 'Save' | translate }}\n              </button>\n            </div>\n          </div>\n        </c8y-form-group>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"card\">\n  <div class=\"card-header separator\">\n    <h4 class=\"card-title\" translate>\n      Versions\n    </h4>\n  </div>\n\n  <div class=\"card-block p-t-0\">\n    <div *ngIf=\"(baseVersions$ | async)?.data.length === 0\">\n      <div class=\"c8y-empty-state text-center\">\n        <h1 c8yIcon=\"c8y-tools\" class=\"c8y-icon-duocolor\"></h1>\n        <h3 translate>No versions to display.</h3>\n        <p translate>Add a new version by clicking below.</p>\n        <p>\n          <button\n            class=\"btn btn-primary\"\n            title=\"{{ 'Add software' | translate }}\"\n            (click)=\"addBaseVersion()\"\n            translate\n          >\n            Add software\n          </button>\n        </p>\n      </div>\n    </div>\n\n    <c8y-list-group class=\"m-b-16\" *ngIf=\"(baseVersions$ | async)?.data.length > 0\">\n      <c8y-li *c8yFor=\"let baseVersion of baseVersions$ | async; let i = index; loadMore: 'auto'\">\n        <c8y-li-icon>\n          <i c8yIcon=\"c8y-tools\"></i>\n        </c8y-li-icon>\n\n        <c8y-li-body class=\"content-flex-50\">\n          <div class=\"col-4\">\n            <p>{{ baseVersion.c8y_Software.version }}</p>\n          </div>\n          <div class=\"col-5 \">\n            <p class=\"text-truncate\">\n              <span class=\"text-label-small m-r-8\" translate>\n                File\n              </span>\n              <span title=\" {{ getBinaryName$(baseVersion.c8y_Software.url) | async }}\">\n                <a href=\"{{baseVersion.c8y_Software.url}}\" target=\"_blank\" rel=\"noopener noreferrer\">{{ getBinaryName$(baseVersion.c8y_Software.url) | async }}</a>\n              </span>\n            </p>\n          </div>\n          <div class=\"col-2 flex-row\">\n            <span *ngIf=\"isLegacy$ | async\" class=\"label label-warning flex-item-right-sm\">\n              {{ 'Legacy' | translate }}\n            </span>\n\n            <div class=\"v-fit-20\" *ngIf=\"!(isLegacy$ | async)\">\n              <button\n                class=\"btn btn-danger btn-xs visible-xs flex-item-right m-r-8 m-t-8\"\n                (click)=\"deleteBaseVersion(baseVersion)\"\n                title=\"{{ 'Delete' | translate }}\"\n              >\n                <i c8yIcon=\"minus-circle\"></i> {{ 'Delete' | translate }}\n              </button>\n            </div>\n          </div>\n          <div *ngIf=\"!(isLegacy$ | async)\" class=\"flex-item-right v-fit-20 p-r-8 hidden-xs\">\n            <button\n              class=\"btn btn-dot text-danger showOnHover\"\n              (click)=\"deleteBaseVersion(baseVersion)\"\n              title=\"{{ 'Delete' | translate }}\"\n            >\n              <i c8yIcon=\"minus-circle\"></i>\n            </button>\n          </div>\n        </c8y-li-body>\n      </c8y-li>\n    </c8y-list-group>\n  </div>\n</div>\n"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/router","name":"ActivatedRoute","line":66,"character":28},{"__symbolic":"reference","module":"@c8y/client","name":"InventoryService","line":67,"character":30},{"__symbolic":"reference","name":"RepositoryService"},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"AlertService","line":69,"character":26},{"__symbolic":"reference","module":"@ngx-translate/core","name":"TranslateService","line":70,"character":30},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"ModalService","line":71,"character":26},{"__symbolic":"reference","module":"ngx-bootstrap","name":"BsModalService","line":72,"character":28}]}],"ngOnInit":[{"__symbolic":"method"}],"getBinaryName$":[{"__symbolic":"method","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"memoize","line":93,"character":3}}]}],"addBaseVersion":[{"__symbolic":"method"}],"deleteBaseVersion":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}]}},"ɵg":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":11,"character":1},"arguments":[{"selector":"c8y-add-software-software-modal","template":"<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-tools'\"></i>\n    <h4 translate>\n      Add software\n    </h4>\n  </div>\n  <div class=\"p-16 text-center separator-bottom\" *ngIf=\"!softwarePreselected\">\n    <p class=\"lead m-0\" translate>\n      Select or create new software\n    </p>\n  </div>\n  <form\n    class=\"d-contents\"\n    autocomplete=\"off\"\n    #softwareForm=\"ngForm\"\n    (ngSubmit)=\"softwareForm.form.valid && save()\"\n  >\n    <div class=\"modal-inner-scroll\">\n      <div class=\"modal-body\">\n        <div [hidden]=\"softwarePreselected\">\n          <c8y-form-group>\n            <label for=\"softwareName\" translate>Software</label>\n            <c8y-typeahead\n              [(ngModel)]=\"model.selected\"\n              name=\"softwareName\"\n              placeholder=\"{{ 'Select or enter' | translate }}\"\n              (onSearch)=\"onInput.next($event)\"\n              [required]=\"true\"\n            >\n              <c8y-li\n                *c8yFor=\"\n                  let software of softwaresResult;\n                  loadMore: 'auto';\n                  notFound: notFoundTemplate\n                \"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"model.selected = software; model.description = software.description\"\n                [active]=\"model.selected === software\"\n              >\n                <c8y-highlight\n                  [text]=\"software.name || '--'\"\n                  [pattern]=\"onInput | async\"\n                ></c8y-highlight>\n              </c8y-li>\n              <ng-template #notFoundTemplate>\n                <c8y-li class=\"bg-gray-lighter p-8\" *ngIf=\"(onInput | async)?.length > 0\">\n                  <span translate>No match found, add new`software`? </span>\n                  <button\n                    title=\"{{ 'Create new`software`' | translate }}\"\n                    type=\"button\"\n                    class=\"btn btn-primary btn-xs m-l-16\"\n                    translate\n                  >\n                    Create new`software`\n                  </button>\n                </c8y-li>\n              </ng-template>\n            </c8y-typeahead>\n          </c8y-form-group>\n\n          <c8y-form-group>\n            <label for=\"softwareDescription\" translate>Description</label>\n            <input\n              id=\"softwareDescription\"\n              class=\"form-control\"\n              autocomplete=\"off\"\n              name=\"description\"\n              [(ngModel)]=\"model.description\"\n              placeholder=\"{{ 'e.g. Cloud connectivity software' | translate }}\"\n              [disabled]=\"model.selected?.id\"\n              [required]=\"true\"\n            />\n          </c8y-form-group>\n        </div>\n\n        <c8y-form-group>\n          <label for=\"softwareVersion\" translate>Version</label>\n          <input\n            id=\"softwareVersion\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"version\"\n            [(ngModel)]=\"model.version\"\n            placeholder=\"{{ 'e.g.' | translate }} 1.0.0\"\n            [required]=\"true\"\n          />\n        </c8y-form-group>\n\n        <c8y-form-group>\n          <div class=\"legend form-block top-m-xxl\" translate>Software file</div>\n          <c8y-file-picker [maxAllowedFiles]=\"1\" (onFilesPicked)=\"onFile($event)\">\n          </c8y-file-picker>\n        </c8y-form-group>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <button\n        title=\"{{ 'Cancel' | translate }}\"\n        class=\"btn btn-default\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        [disabled]=\"saving\"\n        translate\n      >\n        Cancel\n      </button>\n\n      <button\n        title=\"{{ 'Add software' | translate }}\"\n        class=\"btn btn-primary\"\n        type=\"submit\"\n        [ngClass]=\"{ 'btn-pending': saving }\"\n        [disabled]=\"\n          !softwareForm.form.valid ||\n          softwareForm.form.pristine ||\n          saving ||\n          (!model.binary?.url && !model.binary?.file)\n        \"\n        translate\n      >\n        Add software\n      </button>\n    </div>\n  </form>\n</div>\n"}]}],"members":{"form":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":16,"character":3},"arguments":["softwareForm",{"static":false}]}]}],"saved":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":17,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"ngx-bootstrap/modal","name":"BsModalRef","line":34,"character":19},{"__symbolic":"reference","name":"RepositoryService"},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"AlertService","line":36,"character":19}]}],"ngOnInit":[{"__symbolic":"method"}],"setInitialState":[{"__symbolic":"method"}],"loadSoftwares":[{"__symbolic":"method"}],"getSoftwareResult":[{"__symbolic":"method"}],"save":[{"__symbolic":"method"}],"successMsg":[{"__symbolic":"method"}],"cancel":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}],"onFile":[{"__symbolic":"method"}]}},"ɵh":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":14,"character":1},"arguments":[{"selector":"c8y-firmware-device-tab","template":"<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"loadDevice()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'fa-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<div class=\"card\">\n  <div class=\"card-header separator\">\n    <h4 class=\"card-title\" translate>Current firmware</h4>\n  </div>\n  <fieldset *ngIf=\"changesOperation$ | async\" class=\"card-block bg-gray-white\">\n    <c8y-single-operation [operation]=\"changesOperation$ | async\"></c8y-single-operation>\n  </fieldset>\n  <div class=\"card-block p-t-0\">\n    <!-- EMPTY STATE -->\n    <ng-container *ngIf=\"!(deviceFirmwareFragment$ | async); else firmwareBlock\">\n      <div class=\"c8y-empty-state text-center\">\n        <h1 c8yIcon=\"c8y-firmware\" class=\"c8y-icon-duocolor\"></h1>\n        <p>\n          <strong translate>No firmware installed.</strong> <br /><small translate\n            >Click below to install firmware into this device.</small\n          >\n        </p>\n      </div>\n\n      <!-- INSTALL FIRMWARE-->\n      <div class=\"m-t-16\">\n        <button class=\"btn btn-primary\" (click)=\"installFirmware()\" translate>\n          Install firmware\n        </button>\n      </div>\n    </ng-container>\n\n    <!-- FIRMWARE -->\n    <ng-template #firmwareBlock>\n      <c8y-list-group class=\"m-b-16\">\n        <c8y-li>\n          <c8y-li-icon>\n            <i c8yIcon=\"c8y-firmware\"></i>\n          </c8y-li-icon>\n\n          <c8y-li-body\n            *ngIf=\"deviceFirmwareFragment$ | async as deviceFirmwareFragment\"\n            class=\"content-flex-50\"\n          >\n            <div title=\"{{ deviceFirmwareFragment.name }}\" class=\"col-3\">\n              <p class=\"text-truncate\">{{ deviceFirmwareFragment.name }}</p>\n            </div>\n\n            <!-- BASE/PATCH VERSION -->\n            <div class=\"col-3\">\n              <p class=\"text-truncate\">\n                <span class=\"text-label-small m-r-8\" translate>\n                  Version\n                </span>\n                <span\n                  *ngIf=\"deviceFirmwareFragment.version; else versionNotSpecified\"\n                  title=\"{{ deviceFirmwareFragment.version }}\"\n                >\n                  {{ deviceFirmwareFragment.version }}\n                </span>\n                <ng-template #versionNotSpecified>\n                  <span class=\"text-muted\" title=\"({{ 'not specified`version`' | translate }})\">\n                    ({{ 'not specified`version`' | translate }})\n                  </span>\n                </ng-template>\n              </p>\n            </div>\n\n            <div *ngIf=\"repositoryEntry$ | async as repositoryEntry\" class=\"col-4\">\n              <p class=\"text-truncate\">\n                <span class=\"text-label-small m-r-8\" translate>\n                  Description\n                </span>\n                <span title=\"{{ repositoryEntry.description }}\">\n                  {{ repositoryEntry.description }}\n                </span>\n              </p>\n            </div>\n\n            <!-- ADD PATCH -->\n            <div class=\"col-2\">\n              <button\n                *ngIf=\"(this.patches$ | async)?.length > 0\"\n                (click)=\"addPatch()\"\n                class=\"btn btn-xs btn-primary\"\n                [disabled]=\"changesInProgress$ | async\"\n                translate\n              >\n                Patches available\n              </button>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n\n      <!-- REPLACE FIRMWARE -->\n      <div class=\"m-t-16\">\n        <button\n          class=\"btn btn-primary\"\n          (click)=\"installFirmware()\"\n          [disabled]=\"changesInProgress$ | async\"\n          translate\n        >\n          Replace firmware\n        </button>\n      </div>\n    </ng-template>\n  </div>\n</div>\n"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/router","name":"ActivatedRoute","line":67,"character":19},{"__symbolic":"reference","name":"RepositoryService"},{"__symbolic":"reference","module":"@c8y/client","name":"InventoryService","line":69,"character":23},{"__symbolic":"reference","module":"ngx-bootstrap/modal","name":"BsModalService","line":70,"character":21}]}],"ngOnInit":[{"__symbolic":"method"}],"installFirmware":[{"__symbolic":"method"}],"getRepositoryEntriesWithVersions$":[{"__symbolic":"method"}],"getAndAssignRepositoryBinaries":[{"__symbolic":"method"}],"addPatch":[{"__symbolic":"method"}],"getRepositoryEntryWithPatches$":[{"__symbolic":"method"}],"loadDevice":[{"__symbolic":"method"}],"handleOperation":[{"__symbolic":"method"}],"loadOperation":[{"__symbolic":"method"}],"trackOperation":[{"__symbolic":"method"}],"isInProgress":[{"__symbolic":"method"}]}},"ɵi":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":8,"character":1},"arguments":[{"selector":"c8y-software-device-tab","template":"<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"loadDevice()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'fa-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<div class=\"row\">\n  <c8y-installed-software\n    class=\"col-md-8\"\n    [deviceTypeQuery]=\"deviceTypeQuery$ | async\"\n    [softwareList]=\"list$ | async\"\n    [deviceSoftwareChanges]=\"changes$ | async\"\n    [deviceSoftwareChangesOperation]=\"changesOperation$ | async\"\n    [deviceSoftwareChangesInProgress]=\"changesInProgress$ | async\"\n    (changes)=\"addChanges($event)\"\n  ></c8y-installed-software>\n  <c8y-device-software-changes\n    class=\"col-md-4\"\n    [changes]=\"changes$ | async\"\n    [changesInProgress]=\"changesInProgress$ | async\"\n    (clear)=\"clearChanges()\"\n    (apply)=\"applyChanges()\"\n  ></c8y-device-software-changes>\n</div>\n"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/router","name":"ActivatedRoute","line":29,"character":19},{"__symbolic":"reference","name":"RepositoryService"},{"__symbolic":"reference","module":"@c8y/client","name":"InventoryService","line":31,"character":23}]}],"ngOnInit":[{"__symbolic":"method"}],"addChanges":[{"__symbolic":"method"}],"clearChanges":[{"__symbolic":"method"}],"applyChanges":[{"__symbolic":"method"}],"loadDevice":[{"__symbolic":"method"}],"loadOperation":[{"__symbolic":"method"}],"trackOperation":[{"__symbolic":"method"}],"displayChangesFromOperation":[{"__symbolic":"method"}],"isInProgress":[{"__symbolic":"method"}]}},"ɵj":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":10,"character":1},"arguments":[{"selector":"c8y-installed-software","template":"<div class=\"card\">\n  <div class=\"card-header separator\">\n    <h4 class=\"card-title\" translate>Installed software</h4>\n  </div>\n\n  <fieldset *ngIf=\"deviceSoftwareChangesOperation\" class=\"card-block bg-gray-white\">\n    <c8y-single-operation [operation]=\"deviceSoftwareChangesOperation\"></c8y-single-operation>\n  </fieldset>\n\n  <fieldset>\n    <!-- EMPTY STATE -->\n    <div class=\"card-block\" *ngIf=\"softwareList.length === 0\">\n      <div class=\"c8y-empty-state text-center m-t-16\">\n        <h1 class=\"c8y-icon c8y-icon-tools c8y-icon-duocolor\"></h1>\n        <p>\n          <strong translate>No software installed.</strong> <br />\n          <small translate>Click below to install software into this device.</small>\n        </p>\n      </div>\n    </div>\n\n    <!-- NOT EMPTY STATE -->\n    <ng-container *ngIf=\"softwareList.length > 0\">\n      <c8y-device-software-list\n        [softwareList]=\"softwareList\"\n        [deviceSoftwareChanges]=\"deviceSoftwareChanges\"\n        (update)=\"updateSoftware($event)\"\n        (remove)=\"removeSoftware($event)\"\n        class=\"d-block p-l-16 p-r-16\"\n      >\n      </c8y-device-software-list>\n    </ng-container>\n  </fieldset>\n\n  <!-- INSTALL SOFTWARE-->\n  <div class=\"card-footer\">\n    <button\n      class=\"btn btn-add-block m-0\"\n      title=\"{{ 'Install software' | translate }}\"\n      (click)=\"installSoftware()\"\n      [disabled]=\"deviceSoftwareChangesInProgress\"\n    >\n      <i c8yIcon=\"plus-circle\"></i>\n      {{ 'Install software' | translate }}\n    </button>\n  </div>\n</div>\n"}]}],"members":{"softwareList":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":15,"character":3}}]}],"deviceSoftwareChanges":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":16,"character":3}}]}],"deviceSoftwareChangesOperation":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":17,"character":3}}]}],"deviceSoftwareChangesInProgress":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":18,"character":3}}]}],"deviceTypeQuery":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":19,"character":3}}]}],"changes":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":20,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"RepositoryService"},{"__symbolic":"reference","module":"@c8y/client","name":"InventoryService","line":24,"character":23},{"__symbolic":"reference","module":"ngx-bootstrap/modal","name":"BsModalService","line":25,"character":21}]}],"installSoftware":[{"__symbolic":"method"}],"updateSoftware":[{"__symbolic":"method"}],"removeSoftware":[{"__symbolic":"method"}],"getAllSoftwaresWithVersions$":[{"__symbolic":"method"}],"getSingleSoftwareWithVersions$":[{"__symbolic":"method"}],"attachVersions":[{"__symbolic":"method"}],"displaySoftwareSelectModal":[{"__symbolic":"method"}],"emitSoftwareInstall":[{"__symbolic":"method"}],"emitSoftwareUpdate":[{"__symbolic":"method"}],"emitSoftwareRemoval":[{"__symbolic":"method"}]}},"ɵk":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":5,"character":1},"arguments":[{"selector":"c8y-device-software-list","template":"<c8y-list-group>\n  <c8y-li\n    [ngClass]=\"{ disabled: isSoftwareGoingToBeChanged(software) }\"\n    *ngFor=\"let software of softwareList\"\n  >\n    <!-- SOFTWARE ICON -->\n    <c8y-li-icon>\n      <i c8yIcon=\"c8y-tools\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-20\">\n      <!-- SOFTWARE NAME -->\n      <div title=\"{{ software.name }}\" class=\"col-6\">\n        <p class=\"text-truncate\">{{ software.name }}</p>\n      </div>\n\n      <!-- SOFTWARE VERSION -->\n      <div [ngClass]=\"{ 'col-3': showUpdate || showRemove, 'col-5': !showUpdate && showRemove }\">\n        <p class=\"text-truncate\">\n          <span class=\"text-label-small m-r-4\" translate>\n            Version\n          </span>\n          <span title=\"{{ software.version }}\">\n            {{ software.version }}\n          </span>\n        </p>\n      </div>\n\n      <div *ngIf=\"showUpdate || showRemove\" class=\"col-3 p-r-16\">\n        <!-- UPDATE SOFTWARE -->\n        <button\n          *ngIf=\"showUpdate && !isSoftwareGoingToBeChanged(software)\"\n          class=\"btn btn-default btn-xs showOnHover\"\n          (click)=\"update.emit(software)\"\n          title=\"{{ 'Update`software,verb`' | translate }}\"\n          translate\n        >\n          Update\n        </button>\n\n        <!-- REMOVE SOFTWARE -->\n        <button\n          *ngIf=\"showRemove && !isSoftwareGoingToBeChanged(software)\"\n          title=\"{{ 'Remove`software`' | translate }}\"\n          class=\"showOnHover btn btn-dot pull-right\"\n          (click)=\"remove.emit(software)\"\n        >\n          <i c8yIcon=\"minus-circle\" class=\"text-danger\"></i>\n        </button>\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n</c8y-list-group>\n"}]}],"members":{"softwareList":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":10,"character":3}}]}],"deviceSoftwareChanges":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":11,"character":3}}]}],"update":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":12,"character":3}}]}],"remove":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":13,"character":3}}]}],"ngAfterContentInit":[{"__symbolic":"method"}],"isSoftwareGoingToBeChanged":[{"__symbolic":"method"}]}},"ɵl":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":7,"character":1},"arguments":[{"selector":"c8y-device-software-changes","template":"<div class=\"card\">\n  <div class=\"card-header separator\">\n    <h4 class=\"card-title\" translate>Software changes</h4>\n  </div>\n\n  <div class=\"card-block\" *ngIf=\"(changes$ | async).length === 0; else changesList\">\n    <div class=\"c8y-empty-state text-center\">\n      <h1 class=\"c8y-icon c8y-icon-device-control c8y-icon-duocolor\"></h1>\n      <p>\n        <strong translate>No software changes.</strong> <br />\n        <small translate>Selected actions will be displayed here.</small>\n      </p>\n    </div>\n  </div>\n\n  <ng-template #changesList>\n    <fieldset *ngIf=\"(installations$ | async).length > 0\">\n      <div class=\"p-l-16 p-r-16\">\n        <div class=\"form-block legend\" translate>Installations`software`</div>\n      </div>\n      <c8y-device-software-list [softwareList]=\"installations$ | async\"></c8y-device-software-list>\n    </fieldset>\n\n    <fieldset *ngIf=\"(updates$ | async).length > 0\">\n      <div class=\"p-l-16 p-r-16\">\n        <div class=\"form-block legend\" translate>Updates`software,noun`</div>\n      </div>\n      <c8y-device-software-list [softwareList]=\"updates$ | async\"></c8y-device-software-list>\n    </fieldset>\n\n    <fieldset *ngIf=\"(removals$ | async).length > 0\">\n      <div class=\"p-l-16 p-r-16\">\n        <div class=\"form-block legend\" translate>Removals`software`</div>\n      </div>\n      <c8y-device-software-list [softwareList]=\"removals$ | async\"></c8y-device-software-list>\n    </fieldset>\n  </ng-template>\n\n  <div class=\"card-footer p-b-8\" *ngIf=\"(changes$ | async).length > 0\">\n    <div class=\"content-flex-27\">\n      <button\n        class=\"btn btn-default col-6 m-b-8\"\n        (click)=\"clear.emit()\"\n        title=\"{{ 'Clear changes' | translate }}\"\n        [disabled]=\"changesInProgress\"\n        translate\n      >\n        Clear changes\n      </button>\n      <button\n        class=\"btn btn-primary col-6 btn-block m-b-8\"\n        [ngClass]=\"{ 'btn-pending': changesInProgress }\"\n        [disabled]=\"changesInProgress\"\n        (click)=\"apply.emit()\"\n        title=\"{{ 'Apply changes' | translate }}\"\n        translate\n      >\n        Apply changes\n      </button>\n    </div>\n  </div>\n</div>\n"}]}],"members":{"changes":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":12,"character":3}}]}],"changesInProgress":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":13,"character":3}}]}],"clear":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":14,"character":3}}]}],"apply":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":15,"character":3}}]}],"ngOnChanges":[{"__symbolic":"method"}]}},"ɵm":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":19,"character":1},"arguments":[{"selector":"c8y-configuration-list","template":"<c8y-title>\n  <span translate>Configuration snapshots repository</span>&nbsp;\n  <small *ngIf=\"(configurations$ | async)?.paging.totalPages === 1 && !filterTerm\"\n    >{{ (configurations$ | async).data.length }} <span translate>snapshots</span></small\n  >\n  <small\n    *ngIf=\"(configurations$ | async)?.paging.totalPages > 1 && !filterTerm\"\n    [tooltip]=\"'More data available. Scroll to the bottom of the list to load it.' | translate\"\n    container=\"body\"\n    >{{ (configurations$ | async).paging.pageSize }}+ <span translate>snapshots</span></small\n  >\n  <small *ngIf=\"filterTerm\"\n    ><span translate>Search results for</span>&nbsp;\"{{ this.filterTerm }}\"</small\n  >\n</c8y-title>\n\n<c8y-action-bar-item itemClass=\"navbar-form\">\n  <c8y-filter [icon]=\"'search'\" (onSearch)=\"setPipe($event)\"></c8y-filter>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" (click)=\"add()\">\n    <i c8yIcon=\"plus-circle\"></i> {{ 'Add configuration snapshot' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"loadConfigurations()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'fa-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<div\n  class=\"c8y-empty-state text-center\"\n  *ngIf=\"!filterTerm && (configurations$ | async)?.data.length === 0\"\n>\n  <h1 c8yIcon=\"gears\"></h1>\n  <h3 translate>There are no configuration snapshots defined</h3>\n  <p translate>Add a configuration snapshot first.</p>\n  <div>\n    <button (click)=\"add()\" class=\"btn btn-primary\" translate>\n      Add configuration snapshot\n    </button>\n  </div>\n  <p c8y-guide-docs>\n    <small translate\n      >Find out more in the\n      <a c8y-guide-href=\"users-guide/device-management/#configuration-repository\"\n        >User guide`KEEP_ORIGINAL`</a\n      >.</small\n    >\n  </p>\n</div>\n\n<ng-template #notFound>\n  <c8y-li class=\"p-8 text-center\">\n    <p>\n      <span translate>No more entries found for filter:</span>&nbsp;<strong>{{\n        filterTerm\n      }}</strong>\n    </p>\n    <button class=\"btn btn-primary btn-xs m-t-8\" translate (click)=\"setPipe(''); reset()\">\n      Reset filter\n    </button>\n  </c8y-li>\n</ng-template>\n<div class=\"p-b-32\">\n  <c8y-list-group>\n    <c8y-li\n      *c8yFor=\"\n        let configuration of configurations$;\n        pipe: filterPipe;\n        notFound: this.filterTerm ? notFound : undefined\n      \"\n    >\n      <c8y-li-icon icon=\"gears\"></c8y-li-icon>\n      <div class=\"row flex-row\">\n        <div class=\"col-xs-2\">\n          <div class=\"text-truncate\" title=\"{{ configuration.name || '-' }}\">\n            <c8y-highlight\n              [text]=\"configuration.name || '-'\"\n              elementClass=\"text-info\">\n            </c8y-highlight>\n          </div>\n        </div>\n        <div class=\"col-xs-3\">\n          <span class=\"text-muted text-truncate\" [title]=\"configuration.description\">\n            {{ configuration.description }}\n          </span>\n        </div>\n        <div class=\"col-xs-3\">\n          <span class=\"text-truncate\">\n            <small translate class=\"text-label-small m-r-4\">File</small>\n            <span\n              *ngIf=\"isBinaryFile(configuration); else noFile\"\n              title=\"{{ getBinaryName(configuration) | async }}\"\n            >\n              {{ getBinaryName(configuration) | async }}\n            </span>\n            <ng-template #noFile>\n              <span title=\"{{ configuration.url }}\">{{ configuration.url }}</span>\n            </ng-template>\n          </span>\n        </div>\n        <div class=\"col-xs-2\">\n          <div class=\"text-truncate\" title=\"{{'Device type' | translate}}: {{ configuration.deviceType || '-' }}\">\n            <small translate class=\"text-muted text-uppercase\">Device type</small>&nbsp;\n            <c8y-highlight\n              [text]=\"configuration.deviceType || '-'\"\n              elementClass=\"text-info\"\n              [pattern]=\"filterTerm\">\n            </c8y-highlight>\n          </div>\n        </div>\n        <div class=\"col-xs-2\">\n          <div class=\"text-right text-truncate\" title=\"{{ configuration.configurationType }}\">\n            <span class=\"label label-primary\" *ngIf=\"configuration.configurationType\">\n              <c8y-highlight\n                [text]=\"configuration.configurationType\"\n                elementClass=\"text-info\"\n                [pattern]=\"filterTerm\">\n              </c8y-highlight>\n            </span>\n          </div>\n        </div>\n      </div>\n      <c8y-li-action\n        (click)=\"edit(configuration)\"\n        icon=\"pencil\"\n        label=\"{{ 'Edit' | translate }}\"\n      ></c8y-li-action>\n      <c8y-li-action\n        (click)=\"delete(configuration)\"\n        icon=\"trash-o\"\n        label=\"{{ 'Delete' | translate }}\"\n      >\n      </c8y-li-action>\n      <c8y-li-action\n        *ngIf=\"isBinaryFile(configuration)\"\n        (click)=\"download(configuration)\"\n        icon=\"download\"\n        label=\"{{ 'Download' | translate }}\"\n      >\n      </c8y-li-action>\n    </c8y-li>\n  </c8y-list-group>\n</div>\n"}]}],"members":{"filter":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":24,"character":3},"arguments":[{"__symbolic":"reference","module":"@c8y/ngx-components","name":"FilterInputComponent","line":24,"character":13},{"static":false}]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@c8y/ngx-components","name":"AlertService","line":32,"character":19},{"__symbolic":"reference","name":"RepositoryService"},{"__symbolic":"reference","module":"ngx-bootstrap/modal","name":"BsModalService","line":34,"character":28},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"ModalService","line":35,"character":26},{"__symbolic":"reference","module":"@ngx-translate/core","name":"TranslateService","line":36,"character":30},{"__symbolic":"reference","module":"@c8y/client","name":"InventoryBinaryService","line":37,"character":36},{"__symbolic":"reference","module":"@c8y/client","name":"InventoryService","line":38,"character":30}]}],"ngOnInit":[{"__symbolic":"method"}],"loadConfigurations":[{"__symbolic":"method"}],"add":[{"__symbolic":"method"}],"edit":[{"__symbolic":"method"}],"isBinaryFile":[{"__symbolic":"method"}],"getBinaryName":[{"__symbolic":"method","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@c8y/ngx-components","name":"memoize","line":95,"character":3},"arguments":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"lodash-es","name":"property","line":95,"character":11},"arguments":["id"]}]}]}],"download":[{"__symbolic":"method"}],"delete":[{"__symbolic":"method"}],"setPipe":[{"__symbolic":"method"}],"reset":[{"__symbolic":"method"}],"filterContainString":[{"__symbolic":"method"}]}},"ɵn":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":12,"character":1},"arguments":[{"selector":"c8y-configuration-detail","template":"<div class=\"modal-header bg-primary text-white text-center\">\n  <h1 c8yIcon=\"cogs\" style=\"font-size: 55px;\"></h1>\n  <h4 class=\"p-t-16 text-uppercase\" translate *ngIf=\"mo.id\">Update configuration</h4>\n  <h4 class=\"p-t-16 text-uppercase\" translate *ngIf=\"!mo.id\">Add configuration</h4>\n</div>\n\n<form #configurationForm=\"ngForm\" (ngSubmit)=\"configurationForm.form.valid && save()\">\n  <div class=\"modal-body\">\n    <c8y-form-group>\n      <label translate>Name</label>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'e.g.' | translate }} hosts\"\n        autocomplete=\"off\"\n        required\n        maxlength=\"254\"\n        [(ngModel)]=\"version\"\n        name=\"version\"\n      />\n    </c8y-form-group>\n\n    <c8y-form-group>\n      <label translate>Device type</label>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n        maxlength=\"254\"\n        autocomplete=\"off\"\n        [(ngModel)]=\"deviceType\"\n        name=\"deviceType\"\n      />\n    </c8y-form-group>\n\n    <c8y-form-group>\n      <label translate>Description</label>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'e.g. Host configuration' | translate }} c8y_Linux\"\n        maxlength=\"254\"\n        autocomplete=\"off\"\n        [(ngModel)]=\"description\"\n        name=\"description\"\n      />\n    </c8y-form-group>\n\n    <c8y-form-group>\n      <label translate>Configuration type</label>\n      <c8y-typeahead\n        [(ngModel)]=\"selected\"\n        name=\"confType\"\n        placeholder=\"{{ 'e.g.' | translate }} ssh\"\n        (onSearch)=\"setPipe($event)\"\n        displayProperty=\"configurationType\"\n      >\n        <c8y-li\n          *c8yFor=\"let config of configs; pipe: filterPipe; notFound: notFoundTemplate\"\n          class=\"p-l-8 p-r-8 c8y-list__item--link\"\n          (click)=\"selected = config; setPipe('')\"\n          [active]=\"selected === config\"\n        >\n          <c8y-highlight\n            [text]=\"config.configurationType || '--'\"\n            [pattern]=\"pattern\"\n          ></c8y-highlight>\n        </c8y-li>\n        <ng-template #notFoundTemplate>\n          <c8y-li class=\"bg-gray-lighter p-8\" *ngIf=\"pattern.length > 0\">\n            <span translate>No match found, add new`configuration`?</span>\n            <button title=\"Create new`configuration`\" type=\"button\" class=\"btn btn-primary btn-xs m-l-16\" translate>\n              Create new`configuration`\n            </button>\n          </c8y-li>\n        </ng-template>\n      </c8y-typeahead>\n    </c8y-form-group>\n\n    <c8y-form-group>\n      <div class=\"legend form-block top-m-xxl\" translate>Configuration file</div>\n      <c8y-file-picker\n        [maxAllowedFiles]=\"1\"\n        (onFilesPicked)=\"onFile($event)\"\n        [uploadChoice]=\"uploadChoice\"\n        [fileUrl]=\"binary.url\"\n        [fileBinary]=\"binary.file\"\n      >\n      </c8y-file-picker>\n    </c8y-form-group>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      (click)=\"cancel()\"\n      type=\"button\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      [disabled]=\"saving\"\n    >\n      <span translate>Cancel</span>\n    </button>\n    <button\n      class=\"btn btn-primary\"\n      type=\"submit\"\n      title=\"{{ submitButtonTitle | translate }}\"\n      [ngClass]=\"{ 'btn-pending': saving }\"\n      [disabled]=\"\n        !configurationForm.valid ||\n        configurationForm.pristine ||\n        (!binary?.url && !binary?.file) ||\n        saving\n      \"\n    >\n      {{ submitButtonTitle | translate }}\n    </button>\n  </div>\n</form>\n"}]}],"members":{"configurationForm":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":17,"character":3},"arguments":["configurationForm",{"static":true}]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"RepositoryService"},{"__symbolic":"reference","module":"ngx-bootstrap/modal","name":"BsModalRef","line":46,"character":24},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"AlertService","line":47,"character":19}]}],"ngOnInit":[{"__symbolic":"method"}],"cancel":[{"__symbolic":"method"}],"setPipe":[{"__symbolic":"method"}],"onFile":[{"__symbolic":"method"}],"save":[{"__symbolic":"method"}]}},"ɵo":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":14,"character":1},"arguments":[{"selector":"c8y-device-configuration","template":"<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"updateSnapshots()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'fa-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<div class=\"card card--grid card--grid--fullpage grid__col--4-8 grid__row--6-6\">\n  <!-- DEVICE SUPPORTED CONFIGURATIONS -->\n  <div class=\"card--grid__inner-scroll\">\n    <div class=\"card-header separator\">\n      <h4 class=\"card-title\" translate>Configurations</h4>\n    </div>\n    <div class=\"card-block\">\n      <h5 class=\"legend form-block\"><span translate>Device-supported configurations</span></h5>\n    </div>\n    <div class=\"p-r-16\">\n      <c8y-device-configuration-list\n        [items]=\"supportedConfigurations\"\n        [itemIcon]=\"'gears'\"\n        (configSelected)=\"onConfigTypeSelected($event)\"\n      ></c8y-device-configuration-list>\n    </div>\n  </div>\n\n  <!-- CONFIGURATION PREVIEW -->\n  <div class=\"card--grid__inner-scroll bg-gray-lighter\">\n    <div class=\"card-header separator bg-gray-lighter hidden-xs hidden-sm\">\n      <h4>&nbsp;</h4>\n    </div>\n    <div class=\"card-block\">\n      <h5 class=\"legend form-block\"><span translate>Preview</span></h5>\n\n      <!-- EMPTY STATE -->\n      <div class=\"c8y-empty-state text-left\" *ngIf=\"!configurationType\">\n        <h1 [c8yIcon]=\"'file-text'\"></h1>\n        <p>\n          <strong translate>No configuration selected.</strong><br />\n          <small translate>Select a configuration to preview</small>\n        </p>\n      </div>\n\n      <!-- PREVIEW AVAILABLE STATE -->\n      <c8y-device-configuration-preview\n        *ngIf=\"configurationType\"\n        [device]=\"device\"\n        [configurationType]=\"configurationType\"\n        [configSnapshot]=\"configSnapshot\"\n        [canSaveSnapshot]=\"true\"\n        [operationToTrigger]=\"'c8y_UploadConfigFile'\"\n        [actionButtonText]=\"'Get snapshot from device' | translate\"\n        [actionButtonIcon]=\"'download'\"\n        [isLegacy]=\"isLegacy\"\n      ></c8y-device-configuration-preview>\n    </div>\n  </div>\n\n  <!-- AVAILABLE SUPPORTED CONFIGURATIONS -->\n  <div class=\"card--grid__inner-scroll\">\n    <div class=\"card-block\">\n      <h5 class=\"legend form-block\" translate>Available supported configurations</h5>\n    </div>\n\n    <!-- EMPTY STATE -->\n    <div class=\"c8y-empty-state text-left\" *ngIf=\"!configurationType\">\n      <h1 [c8yIcon]=\"'gears'\"></h1>\n      <p>\n        <strong translate>No selection</strong><br />\n        <small translate>Select a configuration from the device-supported configuration list</small>\n      </p>\n    </div>\n    <div class=\"p-r-16\" *ngIf=\"configurationType\">\n      <c8y-device-configuration-list\n        [items]=\"repositorySnapshots\"\n        [itemIcon]=\"'file-text'\"\n        [emptyState]=\"repositorySnapshotsEmptyState\"\n        [isFilterEnabled]=\"true\"\n        (configSelected)=\"onRepositoryConfigSelected($event)\"\n      ></c8y-device-configuration-list>\n    </div>\n  </div>\n\n  <!-- CONFIGURATION PREVIEW -->\n  <div class=\"card--grid__inner-scroll bg-gray-lighter\">\n    <div class=\"card-block\">\n      <h5 class=\"legend form-block\" translate>Preview</h5>\n\n      <!-- EMPTY STATE -->\n\n      <div class=\"c8y-empty-state text-left\" *ngIf=\"!repositorySnapshot\">\n        <h1 [c8yIcon]=\"'file-text'\"></h1>\n        <p>\n          <strong translate>No configuration selected.</strong><br />\n          <small *ngIf=\"!configurationType; else noSnapshot\" translate\n            >Select a configuration to preview</small\n          >\n          <ng-template #noSnapshot>\n            <small translate>Select the configuration you want to preview</small>\n          </ng-template>\n        </p>\n      </div>\n\n      <!-- CONFIGURATION SELECTED STATE -->\n      <c8y-device-configuration-preview\n        *ngIf=\"repositorySnapshot\"\n        [device]=\"device\"\n        [configurationType]=\"configurationType\"\n        [configSnapshot]=\"repositorySnapshot\"\n        [operationToTrigger]=\"'c8y_DownloadConfigFile'\"\n        [actionButtonText]=\"'Send configuration to device' | translate\"\n        [actionButtonIcon]=\"'upload'\"\n        [isLegacy]=\"isLegacy\"\n      ></c8y-device-configuration-preview>\n    </div>\n  </div>\n</div>\n"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/router","name":"ActivatedRoute","line":30,"character":19},{"__symbolic":"reference","name":"ɵp"},{"__symbolic":"reference","module":"@c8y/client","name":"Realtime","line":32,"character":22},{"__symbolic":"reference","name":"RepositoryService"}]}],"ngOnInit":[{"__symbolic":"method"}],"onConfigTypeSelected":[{"__symbolic":"method"}],"onRepositoryConfigSelected":[{"__symbolic":"method"}],"updateSnapshots":[{"__symbolic":"method"}],"getSnapshotsFromRepository":[{"__symbolic":"method"}]}},"ɵp":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":4,"character":1}}],"members":{"updateConfigurations":[{"__symbolic":"method"}],"hasAnySupportedOperation":[{"__symbolic":"method"}]}},"ɵq":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"c8y-device-configuration-list","template":"<div class=\"p-l-16 m-b-8\" style=\"margin-top: -16px;\" *ngIf=\"isFilterEnabled\">\n  <c8y-filter [icon]=\"'search'\" (onSearch)=\"updatePipe($event)\"></c8y-filter>\n</div>\n\n<!-- EMPTY STATE -->\n<div class=\"c8y-empty-state text-left\" *ngIf=\"items?.length === 0\">\n  <h1 [c8yIcon]=\"emptyState.icon\"></h1>\n  <p>\n    <strong>{{ emptyState.title | translate }}</strong\n    ><br />\n    <small>{{ emptyState.text | translate }}</small>\n  </p>\n</div>\n\n<!-- CONFIGURATIONS AVAILABLE -->\n<div class=\"c8y-nav-stacked\">\n  <div\n    class=\"c8y-stacked-item flex-row\"\n    [class.active]=\"config === selectedConfig\"\n    *ngFor=\"let config of items | configurationFilterPipe: filterTerm\"\n    (click)=\"showConfigurationTypePreview(config)\"\n  >\n    <div class=\"list-item-icon\">\n      <i [c8yIcon]=\"itemIcon\"></i>\n    </div>\n    <div class=\"list-item-body text-truncate\">\n      <div class=\"d-flex\">\n        <span class=\"text-truncate\" title=\"{{ config.name }}\">{{ config.name }}</span>\n        <span class=\"text-label-small flex-item-right flex-item-middle\">{{ config.deviceType }}</span>\n      </div>\n    </div>\n  </div>\n</div>\n\n<!-- for Carlos: config.configurationType to differentiate whether a config matches configuration type. -->\n"}]}],"members":{"items":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":8,"character":3}}]}],"itemIcon":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":9,"character":3}}]}],"emptyState":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":10,"character":3}}]}],"isFilterEnabled":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":11,"character":3}}]}],"configSelected":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":12,"character":3}}]}],"showConfigurationTypePreview":[{"__symbolic":"method"}],"updatePipe":[{"__symbolic":"method"}]}},"ɵr":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":2,"character":1},"arguments":[{"selector":"c8y-source-code-preview","template":"<textarea [disabled]=\"isDisabled\" class=\"form-control no-resize\" rows=\"8\">{{ text }}</textarea>\n"}]}],"members":{"isDisabled":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":7,"character":3}}]}],"text":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":8,"character":3}}]}]}},"ɵs":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":19,"character":1},"arguments":[{"selector":"c8y-device-configuration-preview","template":"<div class=\"content-flex-55 p-b-16\">\n  <div class=\"col-7 p-t-4\">\n    <p>\n      <span class=\"text-label-small text-uppercase m-r-4\" translate>Configuration</span>\n      <span *ngIf=\"configSnapshot?.name; else emptyText\">\n        <strong>{{ configSnapshot.name }}</strong>\n      </span>\n      <ng-template #emptyText> --- </ng-template>\n    </p>\n    <p>\n      <span class=\"text-label-small text-uppercase m-r-4\" translate>Last updated</span>\n      <small *ngIf=\"configSnapshot?.time; else emptyDate\">\n        {{ configSnapshot.time | c8yDate }}\n      </small>\n      <ng-template #emptyDate> --- </ng-template>\n    </p>\n  </div>\n  <div class=\"col-5\">\n    <button\n      class=\"btn btn-default btn-sm pull-right\"\n      type=\"button\"\n      title=\"{{ actionButtonText | translate }}\"\n      (click)=\"createDeviceOperation()\"\n      [disabled]=\"isCreateOperationDisabled()\"\n      *ngIf=\"canCallAction\"\n    >\n      <i [c8yIcon]=\"actionButtonIcon\"></i> {{ actionButtonText | translate }}\n    </button>\n  </div>\n</div>\n<div class=\"c8y-empty-state text-left\" *ngIf=\"!configSnapshot?.binary && showBinary()\">\n  <h1 [c8yIcon]=\"'file-image-o'\"></h1>\n  <p>\n    <strong translate>No preview available.</strong><br />\n    <small translate>Could not fetch the file.</small>\n  </p>\n</div>\n<div *ngIf=\"configSnapshot?.binary && showBinary()\">\n  <c8y-source-code-preview\n    [text]=\"configSnapshot.binary\"\n    [isDisabled]=\"true\"\n  ></c8y-source-code-preview>\n  <div *ngIf=\"canSaveSnapshot\" class=\"top-p-md\">\n    <button\n      type=\"button\"\n      class=\"btn btn-primary btn-sm pull-right left-m-sm\"\n      (click)=\"download()\"\n      translate\n    >\n      Download\n    </button>\n    <button\n      *ngIf=\"hasPermission()\"\n      type=\"button\"\n      class=\"btn btn-default btn-sm pull-right\"\n      (click)=\"saveToRepository()\"\n      translate\n    >\n      Save to repository\n    </button>\n  </div>\n</div>\n<div *ngIf=\"showOperation()\">\n  <c8y-single-operation [operation]=\"operation\"></c8y-single-operation>\n</div>\n"}]}],"members":{"device":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":24,"character":3}}]}],"configurationType":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":25,"character":3}}]}],"configSnapshot":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":32,"character":3}}]}],"canSaveSnapshot":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":33,"character":3}}]}],"actionButtonText":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":34,"character":3}}]}],"actionButtonIcon":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":35,"character":3}}]}],"isLegacy":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":36,"character":3}}]}],"operationToTrigger":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":37,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"ɵp"},{"__symbolic":"reference","module":"@c8y/client","name":"Realtime","line":49,"character":22},{"__symbolic":"reference","module":"ngx-bootstrap/modal","name":"BsModalService","line":50,"character":21},{"__symbolic":"reference","module":"@c8y/client","name":"UserService","line":51,"character":18},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"AppStateService","line":52,"character":22},{"__symbolic":"reference","name":"RepositoryService"},{"__symbolic":"reference","module":"@c8y/client","name":"OperationService","line":54,"character":30},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"AlertService","line":55,"character":26}]}],"ngOnInit":[{"__symbolic":"method"}],"setOperation":[{"__symbolic":"method"}],"createDeviceOperation":[{"__symbolic":"method"}],"showOperation":[{"__symbolic":"method"}],"showBinary":[{"__symbolic":"method"}],"isCreateOperationDisabled":[{"__symbolic":"method"}],"updatePreview":[{"__symbolic":"method"}],"download":[{"__symbolic":"method"}],"saveToRepository":[{"__symbolic":"method"}],"hasPermission":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}],"updateSnapshotsOnConfigUpload":[{"__symbolic":"method"}]}},"ɵt":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Pipe","line":3,"character":1},"arguments":[{"name":"configurationFilterPipe"}]}],"members":{"transform":[{"__symbolic":"method"}],"filterContainString":[{"__symbolic":"method"}]}},"ɵu":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":6,"character":1},"arguments":[{"selector":"c8y-save-config-to-configuration-repository","template":"<div class=\"modal-header bg-primary text-center text-white\">\n  <div style=\"font-size: 62px;\">\n    <span c8yIcon=\"gears\"></span>\n  </div>\n  <h4 class=\"text-uppercase\" translate>\n    Save configuration\n  </h4>\n</div>\n<div class=\"modal-body\">\n  <form #saveConfigurationSnapshot=\"ngForm\" class=\"p-t-24\">\n    <c8y-form-group>\n      <label translate for=\"name\">Name</label>\n      <input\n        id=\"name\"\n        type=\"text\"\n        class=\"form-control\"\n        autocomplete=\"off\"\n        name=\"name\"\n        [(ngModel)]=\"configSnapshot.name\"\n        required\n      />\n    </c8y-form-group>\n    <c8y-form-group>\n      <label translate for=\"deviceType\">Device type</label>\n      <input\n        id=\"deviceType\"\n        class=\"form-control\"\n        rows=\"6\"\n        name=\"deviceType\"\n        [(ngModel)]=\"configSnapshot.deviceType\"\n      />\n    </c8y-form-group>\n    <c8y-form-group>\n      <label translate for=\"description\">Description</label>\n      <input\n        type=\"text\"\n        id=\"description\"\n        class=\"form-control\"\n        maxlength=\"254\"\n        autocomplete=\"off\"\n        name=\"description\"\n        [(ngModel)]=\"configSnapshot.description\"\n      />\n    </c8y-form-group>\n    <c8y-form-group>\n      <label translate for=\"configurationType\">Configuration type</label>\n      <input\n        id=\"configurationType\"\n        class=\"form-control\"\n        rows=\"6\"\n        name=\"configurationType\"\n        [(ngModel)]=\"configSnapshot.configurationType\"\n      />\n    </c8y-form-group>\n  </form>\n</div>\n<div class=\"modal-footer\">\n  <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\" translate>\n    Cancel\n  </button>\n\n  <button\n    title=\"{{ 'Add certificate' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"save()\"\n    [disabled]=\"saveConfigurationSnapshot.form.invalid\"\n    translate\n  >\n    Save\n  </button>\n</div>\n"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"ngx-bootstrap/modal","name":"BsModalRef","line":20,"character":19},{"__symbolic":"reference","module":"@c8y/ngx-components","name":"AlertService","line":21,"character":26},{"__symbolic":"reference","name":"RepositoryService"}]}],"save":[{"__symbolic":"method"}],"close":[{"__symbolic":"method"}]}},"ɵv":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":7,"character":1}}],"members":{"canActivate":[{"__symbolic":"method"}]}},"ɵw":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":3,"character":1}}],"members":{"canActivate":[{"__symbolic":"method"}],"isAnyOperationSupported":[{"__symbolic":"method"}]}},"ɵx":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":5,"character":1}}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"ɵp"}]}],"canActivate":[{"__symbolic":"method"}]}},"ɵy":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":3,"character":1}}],"members":{"get":[{"__symbolic":"method"}]}}},"origins":{"RepositoryModule":"./repository.module","RepositoryType":"./repository.model","REPOSITORY_BINARY_TYPES":"./repository.model","ModalModel":"./repository.model","RepositoryCategory":"./repository.model","FirmwareBinary":"./repository.model","FirmwarePatchBinary":"./repository.model","SoftwareBinary":"./repository.model","RepositoryBinary":"./repository.model","SelectedRepositoryBinary":"./repository.model","DeviceFirmware":"./repository.model","DeviceSoftware":"./repository.model","DeviceSoftwareChange":"./repository.model","ConfigurationSnapshot":"./repository.model","SupportedConfigurationItem":"./repository.model","DeviceConfigurationListEmptyState":"./repository.model","DeviceConfigurationOperation":"./repository.model","RepositoryService":"./repository.service","RepositorySelectModalComponent":"./select-modal/repository-select-modal.component","ɵa":"./firmware/firmware-list.component","ɵb":"./firmware/firmware-details.component","ɵc":"./firmware/add-firmware-modal.component","ɵd":"./firmware/add-firmware-patch-modal.component","ɵe":"./software/software-list.component","ɵf":"./software/software-details.component","ɵg":"./software/add-software-modal.component","ɵh":"./firmware-device-tab/firmware-device-tab.component","ɵi":"./software-device-tab/software-device-tab.component","ɵj":"./software-device-tab/installed-software.component","ɵk":"./software-device-tab/device-software-list.component","ɵl":"./software-device-tab/device-software-changes.component","ɵm":"./configuration/configuration-list.component","ɵn":"./configuration/configuration-detail.component","ɵo":"./configuration-device-tab/device-configuration.component","ɵp":"./configuration-device-tab/device-configuration.service","ɵq":"./configuration-device-tab/device-configuration-list.component","ɵr":"./configuration-device-tab/source-code-preview.component","ɵs":"./configuration-device-tab/configuration-preview.component","ɵt":"./configuration-device-tab/configuration-filter.pipe","ɵu":"./configuration-device-tab/save-to-repository.component","ɵv":"./firmware-device-tab/firmware-device-tab.guard","ɵw":"./software-device-tab/software-device-tab.guard","ɵx":"./configuration-device-tab/device-configuration.guard","ɵy":"./repository-navigation-factory"},"importAs":"@c8y/ngx-components/repository"}