{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@c8y/ngx-components/repository/repository.model.ts","ng://@c8y/ngx-components/repository/repository.service.ts","ng://@c8y/ngx-components/repository/firmware/add-firmware-modal.component.ts","ng://@c8y/ngx-components/repository/firmware/add-firmware-patch-modal.component.ts","ng://@c8y/ngx-components/repository/firmware/firmware-list.component.ts","ng://@c8y/ngx-components/repository/firmware/firmware-details.component.ts","ng://@c8y/ngx-components/repository/software/add-software-modal.component.ts","ng://@c8y/ngx-components/repository/software/software-list.component.ts","ng://@c8y/ngx-components/repository/software/software-details.component.ts","ng://@c8y/ngx-components/repository/configuration/configuration-detail.component.ts","ng://@c8y/ngx-components/repository/configuration/configuration-list.component.ts","ng://@c8y/ngx-components/repository/repository-navigation-factory.ts","ng://@c8y/ngx-components/repository/select-modal/repository-select-modal.component.ts","ng://@c8y/ngx-components/repository/firmware-device-tab/firmware-device-tab.component.ts","ng://@c8y/ngx-components/repository/firmware-device-tab/firmware-device-tab.guard.ts","ng://@c8y/ngx-components/repository/software-device-tab/software-device-tab.component.ts","ng://@c8y/ngx-components/repository/software-device-tab/software-device-tab.guard.ts","ng://@c8y/ngx-components/repository/software-device-tab/installed-software.component.ts","ng://@c8y/ngx-components/repository/software-device-tab/device-software-list.component.ts","ng://@c8y/ngx-components/repository/software-device-tab/device-software-changes.component.ts","ng://@c8y/ngx-components/repository/configuration-device-tab/device-configuration.service.ts","ng://@c8y/ngx-components/repository/configuration-device-tab/device-configuration.component.ts","ng://@c8y/ngx-components/repository/configuration-device-tab/source-code-preview.component.ts","ng://@c8y/ngx-components/repository/configuration-device-tab/save-to-repository.component.ts","ng://@c8y/ngx-components/repository/configuration-device-tab/configuration-preview.component.ts","ng://@c8y/ngx-components/repository/configuration-device-tab/configuration-filter.pipe.ts","ng://@c8y/ngx-components/repository/configuration-device-tab/device-configuration.guard.ts","ng://@c8y/ngx-components/repository/configuration-device-tab/device-configuration-list.component.ts","ng://@c8y/ngx-components/repository/repository.module.ts"],"names":["RepositoryType","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","ar","error","__spread","concat","DeviceConfigurationOperation","REPOSITORY_BINARY_TYPES","_a","SOFTWARE","FIRMWARE","CONFIGURATION","RepositoryService","inventory","inventoryBinary","operation","alert","event","realtime","eventBinary","dateFrom","Date","dateTo","now","queriesUtil","QueriesUtil","listRepositoryEntries","type","options","defaultFilters","fullQuery","query","addOrderbys","name","addAndFilter","partialName","skipLegacy","__not","__has","filters","buildQuery","pageSize","withTotalPages","params","list","save","data","mo","configurationType","selected","undefined","version","description","deviceType","c8y_Global","existingUrl","url","binary","file","create","response","self","id","updateEntry","createEntry","modal","createFirmwareOrSoftware","mos","selectedId","saveBinary","_b","binaryURL","createOrUpdateRepositoryEntry","repositoryEntry","isNil","createRepositoryBinary","repositoryBinary","linkBinary","cleanUp","errorMsg","error_1","update","parent","prepareRepositoryBinaryMO","childAdditionsCreate","patchVersion","dependency","set","c8y_Patch","c8y_Firmware","repositoryBinaryId","binaryId","childAdditionsAdd","mosToDelete","_this","forEach","c8y_IsBinary","isUndefined","delete","entity","forceCascade","msg","gettext","danger","getBaseVersionsCount$","entry","isLegacyEntry","of","from","listBaseVersions","pipe","map","paging","totalPages","getBaseVersionFromMO","isPatch","get","getPatchVersionsCount$","baseVersion","listPatchVersions","Boolean","listAllVersions","getBaseVersionResultListForLegacyEntry","listChildren","__filter","__orderby","creationTime.date","creationTime","PATCH_FILTER_ORDER","c8y_Patch.dependency","isString","listBaseVersionAndPatches","__or","c8y_Firmware.version","childrenFilters","__bygroupid","listQuery","fetchAllItemsFromList","firstPage","allItems","_c","items","nextPage","getRepositoryEntryMO$","reference","lodashEs","detail","withChildren","getRepositoryBinaryMoByVersion","deviceRepositoryFragment","_d","_e","repositoryBinaryType","newModelBaseVersionQuery","legacyVersionQuery","withParents","__and","head","getBinaryName$","binaryUrl","getIdFromUrl","detail$","getDeviceTypeQuery","repositoryType","device","c8y_Filter.type","getConfigurationTypeQuery","getDeviceSoftwareList","c8y_SoftwareList","cloneDeep","c8y_Software","_map","createSoftwareUpdateOperation","changes","getSoftwareUpdateOperation","deviceId","change","action","join","c8y_SupportedOperations","includes","c8y_SoftwareUpdate","deviceSoftware","pick","remove","getDeviceSoftwareChangesFromOperation","getDeviceSoftwareChangesFromSoftwareListOperation","getDeviceSoftwareChangesFromSoftwareOperation","createFirmwareUpdateOperation","selectedOption","getFirmwareUpdateOperation","getUploadConfigurationFileOperation","isLegacy","c8y_UploadConfigFile","getDownloadConfigurationFileOperation","configSnapshot","c8y_DownloadConfigFile","c8y_ConfigurationDump","getLastFirmwareUpdateOperation","toISOString","revert","getFirstMatchingOperation","fragmentType","getLastSoftwareUpdateOperation","filtersList","matchingOperation","filtersList_1","tslib_1.__values","filtersList_1_1","operations","createObservedOperation","take","switchMap","createdOperation","observeOperation","observedOperation$","operationUpdates$","observedOperation","observable","withLatestFrom","filter","operationUpdate","status","OperationStatus","FAILED","throwError","takeWhile","SUCCESSFUL","merge","getLatestConfigurationEvent","eventFilter","source","getConfigFileOperationList","operationType","operationFilter","getConfigSnapshot","time","text","download","binaryType","getLegacyConfigSnapshot","snapshotId","getBinaryText","allowExternal","getBinaryFile","getBinary","fetchExternalBinary","File","contentType","fetch","res","configBinary","newMo","existingBinaryId","newBinaryId","operationSoftware","find","tslib_1.__assign","deviceSoftwareVersion","deviceSoftwareName","operationSoftwareVersion","operationSoftwareName","InventoryService","InventoryBinaryService","OperationService","AlertService","EventService","Realtime","EventBinaryService","Injectable","AddFirmwareModalComponent","repositoryService","saved","EventEmitter","onInput","BehaviorSubject","model","saving","firmwarePreselected","ngOnInit","setInitialState","loadFirmwares","inputSubscription$","tap","form","reset","debounceTime","distinctUntilChanged","searchStr","getFirmwareResult","subscribe","firmwaresResult","savedFirmware","successMsg","cancel","catch","success","hide","complete","ngOnDestroy","unsubscribe","onFile","dropped","droppedFiles","BsModalRef","tslib_1.__decorate","ViewChild","static","Output","Component","selector","template","AddFirmwarePatchModalComponent","repository","firmwareInput$","firmwares$","shareReplay","firmwareSelected$","patchDependencyInput$","baseVersions$","selectedFirmware","baseVersionsFilterPipe","partialVersion","toLowerCase","indexOf","FirmwareListComponent","modalService","bsModalService","translateService","alertService","router","activatedRoute","textFilter$","reload$","reloading","combineLatest","getFirmwares","canAddFirmwarePatch$","bind","DEVICE_TYPE_NOT_AVAILABLE","addFirmware","show","class","ignoreBackdropClick","content","editFirmware","addFirmwarePatch","firmware","navigate","relativeTo","deleteFirmware","title","instant","labels","ok","confirm","Status","DANGER","addServerFailure","ex_1","getDeviceTypeTitle","ModalService","BsModalService","TranslateService","Router","ActivatedRoute","memoize","property","FirmwareDetailsComponent","inventoryService","Subject","reloading$","updateFirmware$","firmwareUpdated$","baseVersionsUpdated$","patchVersionsUpdated$","firmware$","distinctUntilKeyChanged","isLegacy$","canAddPatchVersions$","hasBaseVersions","expanded","destroy$","firmwarePartial","takeUntil","getPatchVersions$","addBaseVersion","config","initialState","addPatchVersion","deleteBaseVersion","deletePatchVersion","ex_2","AddSoftwareModalComponent","softwarePreselected","loadSoftwares","getSoftwareResult","softwaresResult","savedSoftware","SoftwareListComponent","softwares$","getSoftwares","addSoftware","editSoftware","software","deleteSoftware","SoftwareDetailsComponent","updateSoftware$","softwareUpdated$","software$","softwarePartial","ConfigurationDetailComponent","bsModalRef","pattern","uploadChoice","_save","_cancel","configs","existingBinary","setPipe","submitButtonTitle","filterStr","filterPipe","uniqBy","configurationForm","markAsDirty","ConfigurationListComponent","inventoryBinaryService","filterTerm","DELETED_SUCCESS_MSG","loadConfigurations","configurations$","add","edit","configuration","fileBinary","isBinaryFile","getBinaryName","saveAs","confirmationText","hint","proceed","ex_3","trim","filterContainString","term","FilterInputComponent","RepositoryNavigationFactory","navs","NavigatorNode","path","icon","priority","RepositorySelectModalComponent","repositoryEntriesWithVersions$","badgeTemplates","=1","other","load","searchTerm","deviceTypeQuery","searchQuery","showFilter","areMoreEntries","resultEmitter","mode","ModalSelectionMode","SINGLE","disableSelected","modalEntries","mergeMap","aggregate","PAGE_SIZE","Error","addOrFilter","getAndAssignRepositoryBinaries","versions","search","selectedItems","emit","all","getSelectModalOptions","getSelectModalObject","selectModalOptions","isSelected","isBinaryRepositorySelected","bodyValue","bodyClass","obj","repositoryFragment","count","groupId","additionalInformation","FirmwareDeviceTabComponent","route","bsModal","device$","snapshot","contextData","deviceFirmwareFragment$","firmwareBinary$","deviceFirmwareFragment","isEmpty","repositoryEntry$","patches$","firmwareBinary","changesOperation$","changesInProgress$","isInProgress","loadDevice","loadOperation","installFirmware","repositoryEntriesWithVersionsFn$","getRepositoryEntriesWithVersions$","subTitle","handleOperation","searchTerm$","addPatch","getRepositoryEntryWithPatches$","patches","trackOperation","PENDING","EXECUTING","FirmwareDeviceTabGuard","canActivate","supportedOperations","SoftwareDeviceTabComponent","deviceTypeQuery$","list$","changes$","addChanges","clearChanges","applyChanges","displayChangesFromOperation","SoftwareDeviceTabGuard","isAnyOperationSupported","some","InstalledSoftwareComponent","installSoftware","displaySoftwareSelectModal","getAllSoftwaresWithVersions$","softwareToInstall","emitSoftwareInstall","updateSoftware","softwareToRemove","getSingleSoftwareWithVersions$","emitSoftwareUpdate","removeSoftware","emitSoftwareRemoval","softwares","attachVersions","initialStateOverrides","softwareList","Input","DeviceSoftwareListComponent","ngAfterContentInit","showUpdate","observers","showRemove","isSoftwareGoingToBeChanged","deviceSoftwareChanges","DeviceSoftwareChangesComponent","clear","installations$","relatedChanges","updates$","removals$","ngOnChanges","currentValue","DeviceConfigurationService","configurationsUpdated","updateConfigurations","repositorySnapsOnly","hasAnySupportedOperation","supported","Array","isArray","supportedOperation","DeviceConfigurationComponent","deviceConfigurationService","supportedConfigurations","updateSnapshots","c8y_SupportedConfigurations","item","DOWNLOAD_CONFIG","UPLOAD_CONFIG","repositorySnapshotsEmptyState","onConfigTypeSelected","onRepositoryConfigSelected","repositorySnapshot","getSnapshotsFromRepository","repositorySnapshots","SourceCodePreviewComponent","SaveToRepositoryComponent","configSnapshotData","close","ConfigurationPreviewComponent","user","appState","operationService","canCallAction","deviceConfigurationOperation","_configurationType","setOperation","operationsChannel","operationsSubscription","updatePreview","operationToTrigger","configType","operationList","createDeviceOperation","operationCfg","showOperation","showBinary","isCreateOperationDisabled","updateSnapshotsOnConfigUpload","blob","Blob","fileName","saveToRepository","hasPermission","hasAnyRole","currentUser","UserService","AppStateService","ConfigurationFilterPipe","transform","Pipe","DeviceConfigurationGuard","state","DeviceConfigurationListComponent","configSelected","showConfigurationTypePreview","selectedConfig","updatePipe","component","context","ViewContext","Device","RepositoryModule","NgModule","imports","CoreModule","FormsModule","BsDropdownModule","forRoot","TooltipModule","PopoverModule","exports","declarations","entryComponents","providers","provide","HOOK_NAVIGATOR_NODES","useClass","multi","HOOK_ONCE_ROUTE","useValue","ɵ0"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { IManagedObject } from '@c8y/client';\n\nexport enum RepositoryType {\n  FIRMWARE = 'c8y_Firmware',\n  SOFTWARE = 'c8y_Software',\n  CONFIGURATION = 'c8y_ConfigurationDump'\n}\n\nexport const REPOSITORY_BINARY_TYPES = {\n  [RepositoryType.SOFTWARE]: 'c8y_SoftwareBinary',\n  [RepositoryType.FIRMWARE]: 'c8y_FirmwareBinary',\n  [RepositoryType.CONFIGURATION]: 'c8y_ConfigurationDumpBinary'\n};\n\nexport interface ModalModel {\n  selected?: { id?: string; name?: string; [key: string]: any };\n  version?: string;\n  dependency?: { c8y_Firmware: { version: string } };\n  patchVersion?: string;\n  description?: string;\n  deviceType?: string;\n  binary?: {\n    file?: File;\n    url?: string;\n  };\n}\n\nexport interface RepositoryCategory extends Partial<IManagedObject> {\n  type: string;\n  description?: string;\n  c8y_Filter?: {\n    type: string;\n  };\n}\n\nexport interface FirmwareBinary extends Partial<IManagedObject> {\n  type: 'c8y_FirmwareBinary';\n  c8y_Firmware: {\n    version: string;\n    url: string;\n  };\n}\n\nexport interface FirmwarePatchBinary extends FirmwareBinary {\n  c8y_Patch: {\n    dependency: string;\n  };\n}\n\nexport interface SoftwareBinary extends Partial<IManagedObject> {\n  type: string;\n  c8y_Software: {\n    version: string;\n    url: string;\n  };\n}\n\nexport type RepositoryBinary = FirmwareBinary | SoftwareBinary | FirmwarePatchBinary;\n\nexport interface SelectedRepositoryBinary {\n  id: string;\n  name: string;\n  version: string;\n  url: string;\n  dependency?: string;\n  c8y_Patch?: boolean;\n}\n\nexport interface DeviceFirmware {\n  version: string;\n  url: string;\n  name: string;\n}\n\nexport interface DeviceSoftware {\n  name: string;\n  version?: string;\n  url: string;\n}\n\nexport interface DeviceSoftwareChange extends DeviceSoftware {\n  action: 'install' | 'delete';\n}\n\nexport interface ConfigurationSnapshot {\n  id?: string;\n  time: string;\n  name: string;\n  binaryUrl?: string;\n  binary?: any;\n  binaryType?: any;\n  deviceType?: string;\n  configurationType?: string;\n  description?: string;\n}\n\nexport interface SupportedConfigurationItem {\n  name: string;\n  deviceType?: string;\n  configurationType?: string;\n  isLegacy?: boolean;\n}\n\nexport interface DeviceConfigurationListEmptyState {\n  icon?: string;\n  title?: string;\n  text?: string;\n}\n\nexport enum DeviceConfigurationOperation {\n  UPLOAD_CONFIG = 'c8y_UploadConfigFile',\n  DOWNLOAD_CONFIG = 'c8y_DownloadConfigFile'\n}\n","import { Observable, of, from, throwError, merge } from 'rxjs';\nimport { map, switchMap, takeWhile, take, filter, withLatestFrom } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  isNil,\n  isUndefined,\n  assign,\n  set,\n  head,\n  get,\n  isString,\n  pick,\n  cloneDeep,\n  remove,\n  find,\n  forEach,\n  map as _map\n} from 'lodash-es';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport {\n  InventoryService,\n  InventoryBinaryService,\n  IResult,\n  IManagedObject,\n  IManagedObjectBinary,\n  IIdentified,\n  QueriesUtil,\n  IResultList,\n  IFetchResponse,\n  IOperation,\n  OperationService,\n  Realtime,\n  OperationStatus,\n  IEvent,\n  EventService,\n  EventBinaryService\n} from '@c8y/client';\nimport {\n  RepositoryCategory,\n  RepositoryBinary,\n  FirmwareBinary,\n  SoftwareBinary,\n  FirmwarePatchBinary,\n  ModalModel,\n  RepositoryType,\n  REPOSITORY_BINARY_TYPES,\n  DeviceFirmware,\n  DeviceSoftware,\n  DeviceSoftwareChange,\n  SelectedRepositoryBinary,\n  ConfigurationSnapshot\n} from './repository.model';\n\n@Injectable()\nexport class RepositoryService {\n  readonly dateFrom = new Date(0);\n  readonly dateTo = new Date(Date.now() + 86400000); // 1 day in the future\n  private queriesUtil: QueriesUtil;\n\n  constructor(\n    private inventory: InventoryService,\n    private inventoryBinary: InventoryBinaryService,\n    private operation: OperationService,\n    private alert: AlertService,\n    private event: EventService,\n    private realtime: Realtime,\n    private eventBinary: EventBinaryService\n  ) {\n    this.queriesUtil = new QueriesUtil();\n  }\n\n  /**\n   * Lists repository entries of given type.\n   * @param type The type of repository entries to list.\n   * @param options Extra listing options.\n   */\n  listRepositoryEntries(\n    type: RepositoryType,\n    options?: {\n      /** Additional query. */\n      query?: any;\n      /** Only include entries with matching partial names. */\n      partialName?: string;\n      /** Exclude legacy entries. */\n      skipLegacy?: boolean;\n      /** Other request params. */\n      params?: any;\n    }\n  ) {\n    const defaultOrder = [{ name: 1 }];\n    const defaultFilters = { type };\n    const legacyFilters = { __has: `url` };\n\n    let fullQuery = (options && options.query) || {};\n    fullQuery = this.queriesUtil.addOrderbys(fullQuery, defaultOrder, 'prepend');\n    fullQuery = this.queriesUtil.addAndFilter(fullQuery, defaultFilters);\n    if (options && options.partialName) {\n      fullQuery = this.queriesUtil.addAndFilter(fullQuery, { name: `*${options.partialName}*` });\n    }\n    if (options && options.skipLegacy) {\n      fullQuery = this.queriesUtil.addAndFilter(fullQuery, { __not: legacyFilters });\n    }\n\n    const filters = {\n      query: this.queriesUtil.buildQuery(fullQuery),\n      pageSize: 50,\n      withTotalPages: true,\n      ...((options && options.params) || {})\n    };\n    return this.inventory.list(filters);\n  }\n\n  // TODO: merge with create()\n  async save(data: ModalModel, type: RepositoryType, mo: Partial<IManagedObject> = {}) {\n    switch (type) {\n      case RepositoryType.CONFIGURATION: {\n        Object.assign(mo, {\n          type: RepositoryType.CONFIGURATION,\n          configurationType: data.selected ? data.selected.configurationType : undefined,\n          name: data.version,\n          description: data.description,\n          deviceType: data.deviceType,\n          c8y_Global: {}\n        });\n        break;\n      }\n    }\n\n    const existingUrl = mo.url;\n    if (data.binary.url) {\n      mo.url = data.binary.url;\n    } else if (data.binary.file) {\n      const response = await this.inventoryBinary.create(data.binary.file, {\n        c8y_Global: {}\n      } as Partial<IManagedObject>);\n      mo.url = response.data.self;\n    }\n\n    if (mo.id) {\n      return this.updateEntry(mo, existingUrl);\n    }\n    return this.createEntry(mo);\n  }\n\n  async create(modal: ModalModel, type: RepositoryType) {\n    switch (type) {\n      case RepositoryType.FIRMWARE:\n      case RepositoryType.SOFTWARE:\n        return this.createFirmwareOrSoftware(modal, type);\n    }\n  }\n\n  async createFirmwareOrSoftware(\n    modal: ModalModel,\n    type: RepositoryType\n  ): Promise<RepositoryCategory> {\n    let binary: IManagedObjectBinary;\n    let binaryURL: string;\n    let repositoryEntry: RepositoryCategory;\n    let repositoryBinary: FirmwareBinary | SoftwareBinary;\n    const mos = [];\n    const {\n      selected: { id: selectedId },\n      binary: { file, url }\n    } = modal;\n    try {\n      if (file) {\n        ({ data: binary } = await this.saveBinary(file));\n        ({ self: binaryURL } = binary);\n        mos.push(binary);\n      } else {\n        binaryURL = url;\n      }\n\n      ({ data: repositoryEntry } = await this.createOrUpdateRepositoryEntry(modal, type));\n      if (isNil(selectedId)) {\n        mos.push(repositoryEntry);\n      }\n\n      ({ data: repositoryBinary } = await this.createRepositoryBinary(\n        modal,\n        binaryURL,\n        type,\n        repositoryEntry\n      ));\n      mos.push(repositoryBinary);\n\n      if (file) {\n        await this.linkBinary(repositoryBinary, binary);\n      }\n\n      return repositoryEntry;\n    } catch (error) {\n      this.cleanUp(mos);\n      this.errorMsg();\n\n      // Propagate error\n      throw error;\n    }\n  }\n\n  saveBinary(file: File): Promise<IResult<IManagedObjectBinary>> {\n    return this.inventoryBinary.create(file, { c8y_Global: {} } as Partial<IManagedObject>);\n  }\n\n  createOrUpdateRepositoryEntry(\n    modal: ModalModel,\n    type: RepositoryType\n  ): Promise<IResult<RepositoryCategory>> {\n    const {\n      selected: { id, name },\n      description\n    } = modal;\n\n    const mo = {\n      id,\n      name: id ? undefined : name,\n      description,\n      type: id ? undefined : type,\n      c8y_Global: {}\n    };\n\n    return id\n      ? (this.inventory.update(mo) as Promise<IResult<RepositoryCategory>>)\n      : (this.inventory.create(mo) as Promise<IResult<RepositoryCategory>>);\n  }\n\n  createRepositoryBinary(\n    modal: ModalModel,\n    binaryURL: string,\n    type: RepositoryType,\n    parent: RepositoryCategory\n  ): Promise<IResult<FirmwareBinary | SoftwareBinary | FirmwarePatchBinary>> {\n    const mo = this.prepareRepositoryBinaryMO(modal, binaryURL, type);\n\n    return this.inventory.childAdditionsCreate(mo, parent) as Promise<\n      IResult<FirmwareBinary | SoftwareBinary | FirmwarePatchBinary>\n    >;\n  }\n\n  prepareRepositoryBinaryMO(modal: ModalModel, binaryURL: string, type: RepositoryType) {\n    const { version, patchVersion, dependency } = modal;\n    const result = {\n      type: REPOSITORY_BINARY_TYPES[type],\n      [type]: {\n        url: binaryURL\n      },\n      c8y_Global: {}\n    };\n\n    if (dependency) {\n      set(result, [type, 'version'], patchVersion);\n      assign(result, {\n        c8y_Patch: {\n          dependency: dependency.c8y_Firmware.version\n        }\n      });\n    } else {\n      set(result, [type, 'version'], version);\n    }\n    return result;\n  }\n\n  async linkBinary(\n    repositoryBinary: FirmwareBinary | SoftwareBinary,\n    binary: IManagedObjectBinary\n  ) {\n    const { id: repositoryBinaryId } = repositoryBinary;\n    if (binary) {\n      const { id: binaryId } = binary;\n      return this.inventory.childAdditionsAdd(binaryId, repositoryBinaryId);\n    }\n  }\n\n  cleanUp(mosToDelete: IIdentified[]) {\n    mosToDelete.forEach(mo => {\n      const { c8y_IsBinary } = mo;\n      isUndefined(c8y_IsBinary) ? this.delete(mo) : this.inventoryBinary.delete(mo);\n    });\n  }\n\n  delete(entity: IIdentified): Promise<IResult<null>> {\n    return this.inventory.delete(entity, { forceCascade: true });\n  }\n\n  errorMsg() {\n    const msg = gettext('Failed to save');\n    this.alert.danger(msg);\n  }\n\n  getBaseVersionsCount$(entry: IManagedObject): Observable<number> {\n    if (this.isLegacyEntry(entry)) {\n      return of(1);\n    }\n    return from(this.listBaseVersions(entry, { pageSize: 1, withTotalPages: true })).pipe(\n      map(({ paging }) => paging.totalPages)\n    );\n  }\n\n  getBaseVersionFromMO(mo: RepositoryBinary): string {\n    return this.isPatch(mo) ? get(mo, 'c8y_Patch.dependency') : get(mo, 'c8y_Firmware.version');\n  }\n\n  isPatch(mo: RepositoryBinary): boolean {\n    return !!get(mo, 'c8y_Patch.dependency');\n  }\n\n  getPatchVersionsCount$(entry: IManagedObject, baseVersion: FirmwareBinary): Observable<number> {\n    if (this.isLegacyEntry(baseVersion)) {\n      return of(0);\n    }\n    return from(\n      this.listPatchVersions(entry, baseVersion, { pageSize: 1, withTotalPages: true })\n    ).pipe(map(({ paging }) => paging.totalPages));\n  }\n\n  isLegacyEntry(entry: Partial<IManagedObject>): boolean {\n    return Boolean(entry.url);\n  }\n\n  /**\n   * Lists all versions (base and patch ones) of given top level entry.\n   * Versions are ordered by creation time (assuming the earlier created, the older the version).\n   * @param entry Top level repository entry.\n   * @param params Additional query params.\n   */\n  listAllVersions(entry: Partial<IManagedObject>, params = {}) {\n    if (this.isLegacyEntry(entry)) {\n      return this.getBaseVersionResultListForLegacyEntry(entry);\n    }\n\n    const VERSION_FILTER_ORDER = {\n      __filter: {},\n      __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]\n    };\n    return this.listChildren(entry, VERSION_FILTER_ORDER, params);\n  }\n\n  /**\n   * Lists base versions of given top level entry.\n   * Versions are ordered by creation time (assuming the earlier created, the older the version).\n   * @param entry Top level repository entry.\n   * @param params Additional query params.\n   */\n  listBaseVersions(entry: Partial<IManagedObject>, params = {}) {\n    if (this.isLegacyEntry(entry)) {\n      return this.getBaseVersionResultListForLegacyEntry(entry);\n    }\n\n    const NO_PATCH_FILTER_ORDER = {\n      __filter: {\n        __not: { __has: 'c8y_Patch' }\n      },\n      __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]\n    };\n    return this.listChildren(entry, NO_PATCH_FILTER_ORDER, params);\n  }\n\n  /**\n   * Lists patch versions of given base version under the entry.\n   * Versions are ordered by creation time (assuming the earlier created, the older the version).\n   * @param entry Top level repository entry.\n   * @param baseVersion Base version.\n   * @param params Additional query params.\n   */\n  listPatchVersions(entry: IManagedObject, baseVersion: FirmwareBinary | string, params = {}) {\n    const version = isString(baseVersion) ? baseVersion : get(baseVersion, 'c8y_Firmware.version');\n    const PATCH_FILTER_ORDER = {\n      __filter: {\n        'c8y_Patch.dependency': version\n      },\n      __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]\n    };\n    return this.listChildren(entry, PATCH_FILTER_ORDER, params);\n  }\n\n  /**\n   * Lists patch versions of given base version under the entry including the base version.\n   * Versions are ordered by creation time (assuming the earlier created, the older the version).\n   * In terms of legacy base version the entry gets transformed to fit the needed data model.\n   * @param entry Top level repository entry.\n   * @param baseVersion Base version.\n   * @param params Additional query params.\n   */\n  listBaseVersionAndPatches(entry: IManagedObject, baseVersion: IManagedObject, params = {}) {\n    if (this.isLegacyEntry(entry)) {\n      return Promise.resolve({\n        data: [\n          Object.assign(\n            {\n              c8y_Firmware: {\n                version: entry.version,\n                url: entry.url\n              }\n            },\n            entry\n          )\n        ]\n      });\n    }\n\n    const PATCH_FILTER_ORDER = {\n      __filter: {\n        __or: {\n          'c8y_Patch.dependency': baseVersion.c8y_Firmware.version,\n          'c8y_Firmware.version': baseVersion.c8y_Firmware.version\n        }\n      },\n      __orderby: [{ 'c8y_Patch.dependency': 1 }, { 'c8y_Firmware.version': 1 }]\n    };\n    return this.listChildren(entry, PATCH_FILTER_ORDER, params);\n  }\n\n  listChildren(entry: Partial<IManagedObject>, filters = {}, params: any = {}) {\n    const childrenFilters = { __bygroupid: entry.id };\n    const query = this.queriesUtil.addAndFilter(filters, childrenFilters);\n    // FIXME: needed because of issue in forOf directive (...)\n    params.withTotalPages = true;\n    return this.inventory.listQuery(query, params);\n  }\n\n  /**\n   * Fetches all items from the list starting with the provided page.\n   * @param firstPage The first page of the list to fetch all items for.\n   */\n  async fetchAllItemsFromList(firstPage) {\n    let allItems;\n\n    if (!firstPage.then) {\n      allItems = [...firstPage];\n    } else {\n      let { paging, data: items } = await firstPage;\n      allItems = [...items];\n\n      while (paging && paging.nextPage) {\n        ({ paging, data: items } = await paging.next());\n        allItems = [...allItems, ...items];\n      }\n    }\n\n    return allItems;\n  }\n\n  /**\n   * Gets top level repository entry managed object for base or patch version.\n   * @param mo Base or patch version managed object with parents.\n   */\n  getRepositoryEntryMO$(mo: IManagedObject): Observable<IManagedObject | undefined> {\n    if (!mo) {\n      return of(undefined);\n    }\n    const [reference] = get(mo, 'additionParents.references');\n    const id = get(reference, 'managedObject.id');\n    return id\n      ? from(this.inventory.detail(id, { withChildren: false })).pipe(map(({ data }) => data))\n      : of(undefined);\n  }\n  /**\n   * Gets base or patch version managed object.\n   * @param deviceRepositoryFragment Device repository fragment.\n   * @param type Top level repository entry type.\n   * @param configuration Configuration object with options:\n   * - **skipLegacy** - `boolean` - Exclude legacy entries.\n   * - **filters** - `object` - Filter object.\n   *\n   * @deprecated as it doesn't support 'missing url' case\n   */\n  getRepositoryBinaryMoByVersion(\n    deviceRepositoryFragment: DeviceFirmware | DeviceSoftware,\n    type: RepositoryType,\n    { skipLegacy = false, filters = {} }: { skipLegacy?: boolean; filters?: object } = {}\n  ): Promise<IManagedObject> {\n    const { version, url, name } = deviceRepositoryFragment;\n    const repositoryBinaryType = REPOSITORY_BINARY_TYPES[type];\n    let query;\n    const newModelBaseVersionQuery = {\n      [`${type}.version`]: version,\n      [`${type}.url`]: url,\n      type: repositoryBinaryType\n    };\n    const legacyVersionQuery = { url, type, name };\n    filters = { withChildren: false, withParents: true, ...filters };\n\n    if (skipLegacy) {\n      query = {\n        __and: {\n          ...newModelBaseVersionQuery\n        }\n      };\n    } else {\n      query = {\n        __or: [{ __and: { ...newModelBaseVersionQuery } }, { __and: { ...legacyVersionQuery } }]\n      };\n    }\n\n    return this.inventory.listQuery(query, filters).then(({ data }) => head(data));\n  }\n\n  getBinaryName$(binaryUrl: string): Observable<string> {\n    if (!binaryUrl) {\n      return of('---');\n    }\n\n    const binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);\n    if (!binaryId) {\n      return of(binaryUrl);\n    }\n    return this.inventory.detail$(binaryId).pipe(map(mo => mo.name));\n  }\n\n  /**\n   * Generates an inventory query object which can be used to find\n   * repository entries of specified type matching the type of provided device.\n   * @param repositoryType The type of repository entries which will be queried with the generated query.\n   * @param device The device for which matching repository entries will be queried with the generated query.\n   */\n  getDeviceTypeQuery(repositoryType: RepositoryType, device: IManagedObject): object {\n    let result = { type: repositoryType };\n    if (device.type) {\n      if (repositoryType === RepositoryType.CONFIGURATION) {\n        result = this.queriesUtil.addAndFilter(result, {\n          __or: [{ deviceType: device.type }, { __not: { __has: `deviceType` } }]\n        });\n      } else {\n        result = this.queriesUtil.addAndFilter(result, {\n          __or: [{ 'c8y_Filter.type': device.type }, { __not: { __has: `c8y_Filter.type` } }]\n        });\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Generates an inventory query object which can be used to find configuration repository entries\n   * matching the type of provided device and specified configuration type.\n   * @param device The device for which matching repository entries will be queried with the generated query.\n   * @param configurationType Configuration type for which matching repository entries will be queried with the generated query.\n   */\n  getConfigurationTypeQuery(device: IManagedObject, configurationType: string): object {\n    const query = this.getDeviceTypeQuery(RepositoryType.CONFIGURATION, device);\n    return this.queriesUtil.addAndFilter(query, {\n      __or: [{ configurationType }, { __not: { __has: `configurationType` } }]\n    });\n  }\n\n  /**\n   * Gets the list of software installed in the device in the uniform format.\n   * Supports c8y_SoftwareList and c8y_Software fragments.\n   * @param device The device whose software list should be returned.\n   */\n  getDeviceSoftwareList(device: IManagedObject): DeviceSoftware[] {\n    if (device.c8y_SoftwareList) {\n      return cloneDeep(device.c8y_SoftwareList);\n    }\n    if (device.c8y_Software) {\n      return _map(device.c8y_Software, (version, name) => ({ name, version }));\n    }\n    return [];\n  }\n\n  /**\n   * Prepares a software update operation for given device and the list of changes, and sends it to the device.\n   * @param device The device which the operation should be prepared for and sent to.\n   * @param changes The list of software changes which should be applied.\n   */\n  async createSoftwareUpdateOperation(\n    device: IManagedObject,\n    changes: DeviceSoftwareChange[]\n  ): Promise<IOperation> {\n    const operation = this.getSoftwareUpdateOperation(device, changes);\n    return (await this.operation.create(operation)).data;\n  }\n\n  /**\n   * Prepares a software update operation for given device and changes.\n   * Returned operation type depends on device's supported operations.\n   * Supports c8y_SoftwareUpdate, c8y_SoftwareList, and c8y_Software operations.\n   * @param device The device for which operation should be prepared.\n   * @param changes The list of software changes which should be applied.\n   */\n  getSoftwareUpdateOperation(device: IManagedObject, changes: DeviceSoftwareChange[]): IOperation {\n    const operation: IOperation = {\n      deviceId: device.id,\n      description: `Apply software changes: ${changes\n        .map(\n          change =>\n            `${change.action} \"${change.name}\"${\n              change.version ? ` (version: ${change.version})` : ''\n            }`\n        )\n        .join(', ')}`\n    };\n    if (device.c8y_SupportedOperations.includes('c8y_SoftwareUpdate')) {\n      operation.c8y_SoftwareUpdate = cloneDeep(changes);\n    } else if (device.c8y_SupportedOperations.includes('c8y_SoftwareList')) {\n      operation.c8y_SoftwareList = cloneDeep(device.c8y_SoftwareList) || [];\n      changes.forEach(change => {\n        const deviceSoftware: DeviceSoftware = pick(change, ['name', 'version', 'url']);\n        if (change.action === 'delete') {\n          remove(operation.c8y_SoftwareList, deviceSoftware);\n        }\n        if (change.action === 'install') {\n          operation.c8y_SoftwareList.push(deviceSoftware);\n        }\n      });\n    } else if (device.c8y_SupportedOperations.includes('c8y_Software')) {\n      operation.c8y_Software = cloneDeep(device.c8y_Software) || {};\n      changes.forEach(change => {\n        if (change.action === 'delete') {\n          delete operation.c8y_Software[change.name];\n        }\n        if (change.action === 'install') {\n          operation.c8y_Software[change.name] = change.version;\n        }\n      });\n    }\n    return operation;\n  }\n\n  /**\n   * Extracts the list of device software changes from given operation in the context of given device.\n   * @param operation The operation from which the list should be extracted.\n   * @param device The target device of the operation.\n   */\n  getDeviceSoftwareChangesFromOperation(\n    operation: IOperation,\n    device: IManagedObject\n  ): DeviceSoftwareChange[] {\n    if (operation.c8y_SoftwareUpdate) {\n      return cloneDeep(operation.c8y_SoftwareUpdate);\n    }\n    if (operation.c8y_SoftwareList) {\n      return this.getDeviceSoftwareChangesFromSoftwareListOperation(operation, device);\n    }\n    if (operation.c8y_Software) {\n      return this.getDeviceSoftwareChangesFromSoftwareOperation(operation, device);\n    }\n    return [];\n  }\n\n  /**\n   * Prepares a firmware update operation for given device and the selected repository binary, and sends it to the device.\n   * @param device The device which the operation should be prepared for and sent to.\n   * @param selectedOption The selected repository binary option.\n   */\n  async createFirmwareUpdateOperation(\n    device: IManagedObject,\n    selectedOption: SelectedRepositoryBinary\n  ): Promise<IOperation> {\n    const operation = this.getFirmwareUpdateOperation(device, selectedOption);\n    return (await this.operation.create(operation)).data;\n  }\n\n  /**\n   * Prepares a firmware update operation for given device and selected version.\n   * Supports c8y_Firmware operation.\n   * @param device The device for which operation should be prepared.\n   * @param selectedOption Selected firmware version.\n   */\n  getFirmwareUpdateOperation(\n    device: IManagedObject,\n    selectedOption: SelectedRepositoryBinary\n  ): IOperation {\n    delete selectedOption.id;\n\n    const operation: IOperation = {\n      deviceId: device.id,\n      description: `Update firmware to: \"${selectedOption.name}\"${\n        selectedOption.version ? ` (version: ${selectedOption.version})` : ''\n      }`,\n      c8y_Firmware: { ...selectedOption }\n    };\n\n    return operation;\n  }\n\n  /**\n   * Prepares a configuration file upload operation for given device and configuration type.\n   * @param device The device for which operation should be prepared.\n   * @param configurationType Selected configuration type.\n   * @param isLegacy  A legacy operation is created without a configurationType.\n   */\n  getUploadConfigurationFileOperation(\n    device: IManagedObject,\n    configurationType: string,\n    isLegacy: boolean = false\n  ): IOperation {\n    if (isLegacy) {\n      return {\n        deviceId: device.id,\n        description: `Retrieve configuration snapshot from device ${device.name}`,\n        c8y_UploadConfigFile: {}\n      };\n    }\n    return {\n      deviceId: device.id,\n      description: `Retrieve ${configurationType} configuration snapshot from device ${\n        device.name\n      }`,\n      c8y_UploadConfigFile: {\n        type: configurationType\n      }\n    };\n  }\n\n  /**\n   * Prepares a configuration file download operation for given device and configuration type.\n   * @param device The device for which operation should be prepared.\n   * @param configurationType Selected configuration type.\n   * @param binaryUrl The url of a binary to be downloaded.\n   * @param isLegacy A legacy operation is created without a configurationType.\n   */\n  getDownloadConfigurationFileOperation(\n    device: IManagedObject,\n    configurationType: string,\n    configSnapshot: ConfigurationSnapshot,\n    isLegacy: boolean = false\n  ): IOperation {\n    if (isLegacy) {\n      return {\n        deviceId: device.id,\n        description: `Send configuration snapshot ${configSnapshot.name} to device ${device.name}`,\n        c8y_DownloadConfigFile: {\n          url: configSnapshot.binaryUrl,\n          c8y_ConfigurationDump: {\n            id: configSnapshot.id\n          }\n        }\n      };\n    }\n    return {\n      deviceId: device.id,\n      description: `Send configuration snapshot ${\n        configSnapshot.name\n      } of configuration type ${configurationType} to device ${device.name}`,\n      c8y_DownloadConfigFile: {\n        url: configSnapshot.binaryUrl,\n        type: configurationType\n      }\n    };\n  }\n\n  /**\n   * Gets the last firmware update operation for given device.\n   * Looks for c8y_Firmware operations.\n   * @param deviceId The ID of the device to find an operation for.\n   */\n  async getLastFirmwareUpdateOperation(deviceId: string | number): Promise<IOperation> {\n    const filters = {\n      deviceId,\n      dateFrom: new Date(0).toISOString(),\n      dateTo: new Date(Date.now()).toISOString(),\n      revert: true,\n      pageSize: 1\n    };\n    return this.getFirstMatchingOperation([{ ...filters, fragmentType: 'c8y_Firmware' }]);\n  }\n\n  /**\n   * Gets the last software update operation for given device.\n   * Looks for c8y_SoftwareUpdate, c8y_SoftwareList, or c8y_Software operations.\n   * @param deviceId The ID of the device to find an operation for.\n   */\n  async getLastSoftwareUpdateOperation(deviceId: string | number): Promise<IOperation> {\n    const filters = {\n      deviceId,\n      dateFrom: new Date(0).toISOString(),\n      dateTo: new Date(Date.now()).toISOString(),\n      revert: true,\n      pageSize: 1\n    };\n    return this.getFirstMatchingOperation([\n      { ...filters, fragmentType: 'c8y_SoftwareUpdate' },\n      { ...filters, fragmentType: 'c8y_SoftwareList' },\n      { ...filters, fragmentType: 'c8y_Software' }\n    ]);\n  }\n\n  /**\n   * Iterates over the list of filters and queries the operations.\n   * If a query returns at least one operation, the first one will be returned.\n   * Otherwise the next query will be performed.\n   * If none of the queries returns any operation, null will be returned.\n   * @param filtersList The list of filters for the queries.\n   */\n  async getFirstMatchingOperation(filtersList: any[]): Promise<IOperation> {\n    let matchingOperation = null;\n\n    for (const filters of filtersList) {\n      const operations = (await this.operation.list(filters)).data;\n      if (operations.length) {\n        matchingOperation = operations[0];\n        break;\n      }\n    }\n\n    return matchingOperation;\n  }\n\n  /**\n   * Creates the operation and returns an observable to track its progress.\n   * Fails the observable when the operation returns FAILED status.\n   * Completes the observable when the operation returns SUCCESSFUL status.\n   * @param operation The operation to create and track.\n   */\n  createObservedOperation(operation: IOperation): Observable<IOperation> {\n    return from(this.operation.create(operation)).pipe(\n      map(({ data }) => data),\n      take(1),\n      switchMap(createdOperation => this.observeOperation(createdOperation))\n    );\n  }\n\n  /**\n   * Returns an observable to track progress of given operation.\n   * Fails the observable when the operation returns FAILED status.\n   * Completes the observable when the operation returns SUCCESSFUL status.\n   * @param operation The operation to be observed.\n   */\n  observeOperation(operation: IOperation): Observable<IOperation> {\n    const observedOperation$ = of(operation);\n    const operationUpdates$ = observedOperation$.pipe(\n      switchMap(observedOperation =>\n        this.realtime.observable(`/operations/${observedOperation.deviceId}`)\n      ),\n      map(({ data }) => data),\n      withLatestFrom(observedOperation$),\n      filter(([operationUpdate, observedOperation]) => operationUpdate.id === observedOperation.id),\n      switchMap(([operationUpdate]) => {\n        if (operationUpdate.status === OperationStatus.FAILED) {\n          return throwError(operationUpdate);\n        }\n        return of(operationUpdate);\n      }),\n      takeWhile(operationUpdate => operationUpdate.status !== OperationStatus.SUCCESSFUL, true)\n    );\n    return merge(observedOperation$, operationUpdates$);\n  }\n\n  /**\n   * Gets a single event with latest creationTime for the given device Id and event type.\n   * @param deviceId The device Id for which the events should be queried.\n   * @param type Event type.\n   */\n  async getLatestConfigurationEvent(\n    deviceId: string | number,\n    type: string\n  ): Promise<IEvent | undefined> {\n    const eventFilter: object = {\n      source: deviceId,\n      type,\n      dateFrom: this.dateFrom.toISOString(),\n      dateTo: this.dateTo.toISOString(),\n      pageSize: 1\n    };\n\n    const { data } = await this.event.list(eventFilter);\n    return data[0];\n  }\n\n  /**\n   * Gets a list of operations for the given device Id, and operation type.\n   * @param deviceId The device Id for which the operation should be queried.\n   * @param operationType Operation type fragment.\n   */\n  async getConfigFileOperationList(\n    deviceId: string | number,\n    operationType: string\n  ): Promise<IOperation[]> {\n    const operationFilter: object = {\n      deviceId,\n      fragmentType: operationType,\n      dateFrom: this.dateFrom.toISOString(),\n      dateTo: this.dateTo.toISOString(),\n      revert: true,\n      pageSize: 2000\n    };\n\n    return (await this.operation.list(operationFilter)).data;\n  }\n\n  /**\n   * Gets latest uploaded configuration snapshot for the given device, and configuration type.\n   * @param device The device for which the configuration snapshot was uploaded.\n   * @param configurationType Selected configuration type.\n   */\n  async getConfigSnapshot(\n    device: IManagedObject,\n    configurationType: string\n  ): Promise<ConfigurationSnapshot | undefined> {\n    const event: IEvent = await this.getLatestConfigurationEvent(device.id, configurationType);\n    let configSnapshot: ConfigurationSnapshot;\n    if (event) {\n      configSnapshot = {\n        time: event.time,\n        name: event.text,\n        deviceType: device.type,\n        configurationType\n      };\n      try {\n        configSnapshot.binary = await (await this.eventBinary.download(event)).text();\n        if (event.c8y_IsBinary) {\n          configSnapshot.binaryType = event.c8y_IsBinary.type;\n        }\n      } catch (ex) {\n        const msg = gettext('Could not get the binary.');\n        this.alert.danger(msg);\n      }\n    }\n    return configSnapshot;\n  }\n\n  async getLegacyConfigSnapshot(deviceId) {\n    let configSnapshot: ConfigurationSnapshot;\n    let mo;\n    const device = (await this.inventory.detail(deviceId, { withChildren: false })).data;\n    const snapshotId = device.c8y_ConfigurationDump && device.c8y_ConfigurationDump.id;\n    if (!snapshotId) {\n      return;\n    }\n\n    try {\n      mo = (await this.inventory.detail(snapshotId)).data;\n    } catch (ex) {\n      // do nothing\n    }\n    if (mo) {\n      configSnapshot = {\n        time: mo.creationTime,\n        name: mo.name\n      };\n      configSnapshot.binary = await this.getBinaryText(mo.url, { allowExternal: false });\n    }\n    return configSnapshot;\n  }\n\n  async getBinaryFile(binaryUrl: string, options: { allowExternal: boolean }): Promise<File> {\n    const binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);\n\n    if (!binaryId && !options.allowExternal) {\n      return;\n    }\n    const { data } = await this.inventory.detail(binaryId);\n    const binary = !!binaryId\n      ? await this.getBinary(binaryId)\n      : this.fetchExternalBinary(binaryUrl);\n    const fileBinary = new File([binary], data.name, { type: data.contentType });\n    return fileBinary;\n  }\n\n  getBinaryText(binaryUrl: string, options: { allowExternal: boolean }): Promise<string> {\n    const binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);\n    if (!binaryId && options.allowExternal) {\n      return this.fetchExternalBinary(binaryUrl);\n    }\n    return this.getBinary(binaryId);\n  }\n\n  private async getBinary(binaryId) {\n    let binary;\n    try {\n      const res = await this.inventoryBinary.download(binaryId);\n      binary = await res.text();\n    } catch (ex) {\n      const msg = gettext('Could not get the binary.');\n      this.alert.danger(msg);\n    }\n\n    return binary;\n  }\n\n  private async fetchExternalBinary(url) {\n    let configBinary;\n    try {\n      const res = await fetch(url);\n      if (res.status === 200) {\n        configBinary = await res.text();\n      }\n    } catch (ex) {\n      const msg = gettext('Could not get the external binary.');\n      this.alert.danger(msg);\n    }\n    return configBinary;\n  }\n\n  private async createEntry(mo: Partial<IManagedObject>) {\n    const binaryId = await this.inventoryBinary.getIdFromUrl(mo.url);\n    const newMo = await this.inventory.create(mo);\n    if (binaryId) {\n      await this.inventory.childAdditionsAdd(binaryId, newMo.data);\n    }\n    return newMo;\n  }\n\n  private async updateEntry(mo: Partial<IManagedObject>, url) {\n    const existingBinaryId = await this.inventoryBinary.getIdFromUrl(url);\n    const newBinaryId = await this.inventoryBinary.getIdFromUrl(mo.url);\n    if (existingBinaryId && existingBinaryId !== newBinaryId) {\n      const id = this.inventoryBinary.getIdFromUrl(url);\n      await this.inventoryBinary.delete(id);\n    }\n    if (newBinaryId) {\n      await this.inventory.childAdditionsAdd(newBinaryId, mo);\n    }\n    return this.inventory.update(mo);\n  }\n\n  private getBaseVersionResultListForLegacyEntry(entry) {\n    return Promise.resolve({\n      res: {} as IFetchResponse,\n      data: [\n        {\n          ...entry,\n          [entry.type]: {\n            version: entry.version,\n            url: entry.url\n          }\n        }\n      ]\n    } as IResultList<IManagedObject>);\n  }\n\n  private getDeviceSoftwareChangesFromSoftwareListOperation(\n    operation: IOperation,\n    device: IManagedObject\n  ): DeviceSoftwareChange[] {\n    const changes: DeviceSoftwareChange[] = [];\n    forEach(device.c8y_SoftwareList, deviceSoftware => {\n      const operationSoftware = find(operation.c8y_SoftwareList, { name: deviceSoftware.name });\n      if (deviceSoftware.version !== operationSoftware.version) {\n        changes.push({\n          ...deviceSoftware,\n          action: 'delete'\n        } as DeviceSoftwareChange);\n      }\n    });\n    forEach(operation.c8y_SoftwareList, operationSoftware => {\n      const deviceSoftware = find(device.c8y_SoftwareList, { name: operationSoftware.name });\n      if (operationSoftware.version !== deviceSoftware.version) {\n        changes.push({\n          ...operationSoftware,\n          action: 'install'\n        } as DeviceSoftwareChange);\n      }\n    });\n    return changes;\n  }\n\n  private getDeviceSoftwareChangesFromSoftwareOperation(\n    operation: IOperation,\n    device: IManagedObject\n  ): DeviceSoftwareChange[] {\n    const changes: DeviceSoftwareChange[] = [];\n    forEach(device.c8y_Software, (deviceSoftwareVersion, deviceSoftwareName) => {\n      if (operation.c8y_Software[deviceSoftwareName] !== deviceSoftwareVersion) {\n        changes.push({\n          name: deviceSoftwareName,\n          version: deviceSoftwareVersion,\n          action: 'delete'\n        } as DeviceSoftwareChange);\n      }\n    });\n    forEach(operation.c8y_Software, (operationSoftwareVersion, operationSoftwareName) => {\n      if (device.c8y_Software[operationSoftwareName] !== operationSoftwareVersion) {\n        changes.push({\n          name: operationSoftwareName,\n          version: operationSoftwareVersion,\n          action: 'install'\n        } as DeviceSoftwareChange);\n      }\n    });\n    return changes;\n  }\n}\n","import { Component, Output, EventEmitter, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { RepositoryService } from '../repository.service';\nimport { RepositoryType, ModalModel, RepositoryCategory } from '../repository.model';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { isUndefined } from 'lodash-es';\nimport { BehaviorSubject, Subscription, from } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, tap, switchMap } from 'rxjs/operators';\nimport { PickedFiles } from '@c8y/ngx-components';\n\n@Component({\n  selector: 'c8y-add-firmware-software-modal',\n  templateUrl: 'add-firmware-modal.component.html'\n})\nexport class AddFirmwareModalComponent {\n  @ViewChild('firmwareForm', { static: false }) form: NgForm;\n  @Output() saved: EventEmitter<RepositoryCategory> = new EventEmitter<RepositoryCategory>();\n  onInput: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  model: ModalModel = {\n    selected: undefined,\n    version: undefined,\n    description: undefined,\n    binary: {\n      file: undefined,\n      url: undefined\n    }\n  };\n  firmwaresResult;\n  saving = false;\n  firmwarePreselected: boolean = false;\n  private inputSubscription$: Subscription;\n\n  constructor(\n    private modal: BsModalRef,\n    private repositoryService: RepositoryService,\n    private alert: AlertService\n  ) {}\n\n  ngOnInit() {\n    this.setInitialState();\n    this.loadFirmwares();\n  }\n\n  setInitialState() {\n    if (this.model.selected) {\n      this.firmwarePreselected = true;\n    }\n  }\n\n  loadFirmwares() {\n    this.inputSubscription$ = this.onInput\n      .pipe(\n        tap(() => {\n          if (!this.firmwarePreselected) {\n            this.model.description = null;\n            if (this.form) {\n              this.form.form.get('description').reset();\n            }\n          }\n        }),\n        debounceTime(300),\n        distinctUntilChanged(),\n        switchMap(searchStr => this.getFirmwareResult(searchStr))\n      )\n      .subscribe(result => {\n        this.firmwaresResult = result;\n      });\n  }\n\n  getFirmwareResult(searchStr: string) {\n    return from(\n      this.repositoryService.listRepositoryEntries(RepositoryType.FIRMWARE, {\n        partialName: searchStr,\n        skipLegacy: true\n      })\n    );\n  }\n\n  async save() {\n    this.saving = true;\n    this.repositoryService\n      .create(this.model, RepositoryType.FIRMWARE)\n      .then(savedFirmware => {\n        this.successMsg();\n        this.saving = false;\n        this.saved.next(savedFirmware);\n        this.cancel();\n      })\n      .catch(e => {\n        this.saving = false;\n        this.saved.error(e);\n        this.cancel();\n      });\n  }\n\n  successMsg() {\n    const msg = gettext('Firmware added, optionally set device type filter.');\n    this.alert.success(msg);\n  }\n\n  cancel() {\n    this.modal.hide();\n    this.saved.complete();\n  }\n\n  ngOnDestroy() {\n    this.inputSubscription$.unsubscribe();\n  }\n\n  onFile(dropped: PickedFiles) {\n    if (!isUndefined(dropped.url)) {\n      this.model.binary = {\n        url: dropped.url\n      };\n      return;\n    } else if (!isUndefined(dropped.droppedFiles)) {\n      this.model.binary = {\n        file: dropped.droppedFiles[0].file\n      };\n      return;\n    } else {\n      this.model.binary = {\n        file: undefined,\n        url: undefined\n      };\n    }\n  }\n}\n","import { Component, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { RepositoryService } from '../repository.service';\nimport { RepositoryType, ModalModel, RepositoryCategory } from '../repository.model';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { IManagedObject, IResultList } from '@c8y/client';\nimport { isUndefined } from 'lodash-es';\nimport { BehaviorSubject, of, from, pipe, merge, Observable } from 'rxjs';\nimport { BsDropdownDirective } from 'ngx-bootstrap';\nimport { NgForm } from '@angular/forms';\nimport {\n  debounceTime,\n  tap,\n  switchMap,\n  distinctUntilChanged,\n  shareReplay,\n  map\n} from 'rxjs/operators';\nimport { PickedFiles } from '@c8y/ngx-components';\n\n@Component({\n  selector: 'c8y-add-firmware-patch-modal.component',\n  templateUrl: 'add-firmware-patch-modal.component.html'\n})\nexport class AddFirmwarePatchModalComponent {\n  @Output() saved: EventEmitter<RepositoryCategory> = new EventEmitter<RepositoryCategory>();\n\n  @ViewChild('dropdown', { static: false }) dropdown: BsDropdownDirective;\n  @ViewChild('firmwarePatchForm', { static: false }) form: NgForm;\n\n  model: ModalModel = {\n    selected: undefined,\n    dependency: null,\n    patchVersion: undefined,\n    binary: {\n      file: undefined,\n      url: undefined\n    }\n  };\n\n  firmwareInput$ = new BehaviorSubject<string>('');\n  firmwares$: Observable<IResultList<IManagedObject>> = this.firmwareInput$.pipe(\n    debounceTime(300),\n    distinctUntilChanged(),\n    switchMap(searchStr =>\n      from(\n        this.repository.listRepositoryEntries(RepositoryType.FIRMWARE, {\n          partialName: searchStr,\n          skipLegacy: true\n        })\n      )\n    ),\n    shareReplay(1)\n  );\n  firmwareSelected$ = new BehaviorSubject<Partial<RepositoryCategory>>(null);\n  patchDependencyInput$ = new BehaviorSubject<string>('');\n\n  saving = false;\n  firmwarePreselected: boolean = false;\n  baseVersions$: Observable<IResultList<IManagedObject>> = merge(\n    this.firmwareInput$.pipe(\n      tap(() => {\n        this.model.dependency = null;\n        if (this.form) {\n          this.form.form.get('patchDependency').reset();\n        }\n      }),\n      switchMap(() => of(null))\n    ),\n    this.firmwareSelected$\n  ).pipe(\n    switchMap(selectedFirmware =>\n      selectedFirmware ? this.repository.listBaseVersions(selectedFirmware) : of(null)\n    ),\n    shareReplay(1)\n  );\n  baseVersionsFilterPipe = pipe(\n    switchMap((data: []) =>\n      this.patchDependencyInput$.pipe(\n        map(partialVersion =>\n          data.filter((mo: any) => {\n            const version = mo.c8y_Firmware.version.toLowerCase();\n            return (\n              partialVersion.length === 0 || version.indexOf(partialVersion.toLowerCase()) > -1\n            );\n          })\n        )\n      )\n    )\n  );\n\n  constructor(\n    private modal: BsModalRef,\n    private repository: RepositoryService,\n    private alert: AlertService\n  ) {}\n\n  async ngOnInit() {\n    this.setInitialState();\n  }\n\n  setInitialState() {\n    if (this.model.selected) {\n      this.firmwarePreselected = true;\n      this.firmwareSelected$.next(this.model.selected);\n    }\n  }\n\n  async save() {\n    this.saving = true;\n    this.repository\n      .create(this.model, RepositoryType.FIRMWARE)\n      .then(savedFirmware => {\n        this.successMsg();\n        this.saving = false;\n        this.saved.next(savedFirmware);\n        this.cancel();\n      })\n      .catch(e => {\n        this.saving = false;\n        this.saved.error(e);\n        this.cancel();\n      });\n  }\n\n  successMsg() {\n    const msg = gettext('Firmware patch added.');\n    this.alert.success(msg);\n  }\n\n  cancel() {\n    this.modal.hide();\n    this.saved.complete();\n  }\n\n  onFile(dropped: PickedFiles) {\n    if (!isUndefined(dropped.url)) {\n      this.model.binary = {\n        url: dropped.url\n      };\n      return;\n    } else if (!isUndefined(dropped.droppedFiles)) {\n      this.model.binary = {\n        file: dropped.droppedFiles[0].file\n      };\n      return;\n    } else {\n      this.model.binary = {\n        file: undefined,\n        url: undefined\n      };\n    }\n  }\n}\n","import { Router, ActivatedRoute } from '@angular/router';\nimport { Component } from '@angular/core';\nimport { BsModalService, ModalOptions } from 'ngx-bootstrap/modal';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  distinctUntilChanged,\n  tap,\n  debounceTime,\n  switchMap,\n  shareReplay,\n  map,\n  pluck\n} from 'rxjs/operators';\nimport { Observable, BehaviorSubject, combineLatest, from } from 'rxjs';\nimport { IResultList, IManagedObject } from '@c8y/client';\nimport { ModalService, gettext, Status, AlertService, memoize } from '@c8y/ngx-components';\nimport { RepositoryService } from '../repository.service';\nimport { RepositoryType } from '../repository.model';\nimport { AddFirmwareModalComponent } from './add-firmware-modal.component';\nimport { AddFirmwarePatchModalComponent } from './add-firmware-patch-modal.component';\nimport { property, get } from 'lodash-es';\n\n@Component({\n  selector: 'c8y-firmware-list',\n  templateUrl: 'firmware-list.component.html'\n})\nexport class FirmwareListComponent {\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n  reload$: BehaviorSubject<void> = new BehaviorSubject(null);\n  reloading: boolean = false;\n  firmwares$: Observable<IResultList<IManagedObject>> = combineLatest(\n    this.textFilter$.pipe(\n      debounceTime(400),\n      distinctUntilChanged()\n    ),\n    this.reload$\n  ).pipe(\n    tap(() => {\n      this.reloading = true;\n    }),\n    switchMap(([text]) => this.getFirmwares(text)),\n    tap(() => {\n      this.reloading = false;\n    }),\n    shareReplay(1)\n  );\n  canAddFirmwarePatch$: Observable<boolean> = from(\n    this.repositoryService.listRepositoryEntries(RepositoryType.FIRMWARE, { skipLegacy: true })\n  ).pipe(map(({ data }) => data.length > 0));\n  isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);\n  readonly DEVICE_TYPE_NOT_AVAILABLE: string = gettext('No device type available');\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private modalService: ModalService,\n    private bsModalService: BsModalService,\n    private translateService: TranslateService,\n    private alertService: AlertService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  getFirmwares(partialName?: string) {\n    return this.repositoryService.listRepositoryEntries(RepositoryType.FIRMWARE, { partialName });\n  }\n\n  addFirmware() {\n    const config: ModalOptions = { class: 'modal-sm', ignoreBackdropClick: true };\n    const modalRef = this.bsModalService.show(AddFirmwareModalComponent, config);\n    modalRef.content.saved.subscribe(savedFirmware => this.editFirmware(savedFirmware));\n  }\n\n  addFirmwarePatch() {\n    const config: ModalOptions = { class: 'modal-sm', ignoreBackdropClick: true };\n    const modalRef = this.bsModalService.show(AddFirmwarePatchModalComponent, config);\n    modalRef.content.saved.subscribe(savedFirmware => this.editFirmware(savedFirmware));\n  }\n\n  editFirmware(firmware: IManagedObject) {\n    this.router.navigate([firmware.id], { relativeTo: this.activatedRoute });\n  }\n\n  async deleteFirmware(firmware: IManagedObject) {\n    try {\n      const title = gettext('Delete firmware');\n      const body = `\n        ${this.translateService.instant(\n          gettext(\n            'You are about to delete firmware \"{{ name }}\" with all its versions and patches.'\n          ),\n          { name: firmware.name }\n        )}\n        ${this.translateService.instant(gettext('This operation is irreversible.'))}\n        ${this.translateService.instant(gettext('Do you want to proceed?'))}\n      `;\n      const labels = {\n        ok: gettext('Delete')\n      };\n      await this.modalService.confirm(title, body, Status.DANGER, labels);\n      await this.repositoryService.delete(firmware);\n      this.alertService.success(gettext('Firmware deleted.'));\n      this.reload$.next();\n    } catch (ex) {\n      // only if not cancel from modal\n      if (ex) {\n        this.alertService.addServerFailure(ex);\n      }\n    }\n  }\n\n  @memoize(property('id'))\n  getBaseVersionsCount$(firmware: IManagedObject): Observable<number | string> {\n    return this.firmwares$.pipe(\n      switchMap(() => this.repositoryService.getBaseVersionsCount$(firmware)),\n      shareReplay(1)\n    );\n  }\n\n  getDeviceTypeTitle(firmware: IManagedObject): string {\n    return get(\n      firmware,\n      'c8y_Filter.type',\n      this.translateService.instant(this.DEVICE_TYPE_NOT_AVAILABLE));\n  }\n}\n","import { BsModalService, ModalOptions } from 'ngx-bootstrap';\nimport { AlertService, gettext, memoize, ModalService, Status } from '@c8y/ngx-components';\nimport { Observable, Subject, merge, BehaviorSubject, combineLatest } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { RepositoryService } from './../repository.service';\nimport { IManagedObject } from '@c8y/client';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  map,\n  switchMap,\n  takeUntil,\n  withLatestFrom,\n  tap,\n  take,\n  distinctUntilKeyChanged,\n  shareReplay\n} from 'rxjs/operators';\nimport { InventoryService, IResultList } from '@c8y/client';\nimport { TranslateService } from '@ngx-translate/core';\nimport { AddFirmwareModalComponent } from './add-firmware-modal.component';\nimport { AddFirmwarePatchModalComponent } from './add-firmware-patch-modal.component';\nimport { property } from 'lodash-es';\nimport { FirmwareBinary } from '../repository.model';\n\n@Component({\n  selector: 'c8y-firmware-details',\n  templateUrl: './firmware-details.component.html'\n})\nexport class FirmwareDetailsComponent implements OnInit, OnDestroy {\n  reload$: Subject<void> = new Subject();\n  reloading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  updateFirmware$: Subject<Partial<IManagedObject>> = new Subject();\n  firmwareUpdated$: Subject<IManagedObject> = new Subject();\n  baseVersionsUpdated$: Subject<void> = new Subject();\n  patchVersionsUpdated$: Subject<void> = new Subject();\n\n  firmware$: Observable<IManagedObject> = merge(\n    this.activatedRoute.params.pipe(\n      map(params => params.id),\n      switchMap(id => this.inventoryService.detail$(id))\n    ),\n    this.reload$.pipe(\n      tap(() => this.reloading$.next(true)),\n      switchMap(() => this.activatedRoute.params),\n      map(params => params.id),\n      switchMap(id => this.inventoryService.detail$(id)),\n      tap(() => this.reloading$.next(false))\n    ),\n    this.firmwareUpdated$\n  ).pipe(shareReplay(1));\n\n  baseVersions$: Observable<IResultList<IManagedObject>> = merge(\n    this.firmware$.pipe(distinctUntilKeyChanged('id')),\n    this.baseVersionsUpdated$,\n    this.patchVersionsUpdated$,\n    this.reload$\n  ).pipe(\n    switchMap(() => this.firmware$),\n    switchMap(firmware => this.repositoryService.listBaseVersions(firmware)),\n    shareReplay(1)\n  );\n\n  isLegacy$: Observable<boolean> = this.firmware$.pipe(\n    map(firmware => this.repositoryService.isLegacyEntry(firmware)),\n    shareReplay(1)\n  );\n\n  canAddPatchVersions$: Observable<boolean> = combineLatest(\n    this.isLegacy$,\n    this.baseVersions$.pipe(map(({ data }) => data.length > 0))\n  ).pipe(map(([isLegacy, hasBaseVersions]) => !isLegacy && hasBaseVersions));\n\n  expanded: { [id: string]: boolean } = {};\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private inventoryService: InventoryService,\n    private repositoryService: RepositoryService,\n    private alertService: AlertService,\n    private translateService: TranslateService,\n    private modalService: ModalService,\n    private bsModalService: BsModalService\n  ) {}\n\n  ngOnInit() {\n    this.updateFirmware$\n      .pipe(\n        withLatestFrom(this.firmware$),\n        switchMap(([firmwarePartial, firmware]) =>\n          this.inventoryService.update({\n            id: firmware.id,\n            ...firmwarePartial\n          })\n        ),\n        map(({ data }) => data),\n        tap(firmware => this.firmwareUpdated$.next(firmware)),\n        tap(() => this.alertService.success(gettext('Saved.'))),\n        takeUntil(this.destroy$)\n      )\n      .subscribe();\n  }\n\n  @memoize(property('id'))\n  getPatchVersionsCount$(baseVersion: FirmwareBinary) {\n    return merge(\n      this.firmware$.pipe(distinctUntilKeyChanged('id')),\n      this.baseVersionsUpdated$,\n      this.patchVersionsUpdated$,\n      this.reload$\n    ).pipe(\n      switchMap(() => this.firmware$),\n      switchMap(firmware => this.repositoryService.getPatchVersionsCount$(firmware, baseVersion)),\n      shareReplay(1)\n    );\n  }\n\n  @memoize()\n  getBinaryName$(binaryUrl) {\n    return this.repositoryService.getBinaryName$(binaryUrl);\n  }\n\n  @memoize(property('id'))\n  getPatchVersions$(baseVersion) {\n    return merge(\n      this.firmware$.pipe(distinctUntilKeyChanged('id')),\n      this.patchVersionsUpdated$,\n      this.reload$\n    ).pipe(\n      switchMap(() => this.firmware$),\n      switchMap(firmware => this.repositoryService.listPatchVersions(firmware, baseVersion)),\n      shareReplay(1)\n    );\n  }\n\n  addBaseVersion() {\n    this.firmware$\n      .pipe(\n        take(1),\n        switchMap(firmware => {\n          const initialState = {\n            model: {\n              selected: firmware,\n              description: firmware.description\n            }\n          };\n          const config: ModalOptions = {\n            class: 'modal-sm',\n            ignoreBackdropClick: true,\n            initialState\n          };\n          const modalRef = this.bsModalService.show(AddFirmwareModalComponent, config);\n          return modalRef.content.saved;\n        })\n      )\n      .subscribe(() => this.baseVersionsUpdated$.next());\n  }\n\n  addPatchVersion() {\n    this.firmware$\n      .pipe(\n        take(1),\n        switchMap(firmware => {\n          const initialState = {\n            model: {\n              selected: firmware\n            }\n          };\n          const config: ModalOptions = {\n            class: 'modal-sm',\n            ignoreBackdropClick: true,\n            initialState\n          };\n          const modalRef = this.bsModalService.show(AddFirmwarePatchModalComponent, config);\n          return modalRef.content.saved;\n        })\n      )\n      .subscribe(() => this.patchVersionsUpdated$.next());\n  }\n\n  async deleteBaseVersion(baseVersion: IManagedObject) {\n    try {\n      const title = gettext('Delete firmware');\n      const body = `\n        ${this.translateService.instant(\n          gettext('You are about to delete firmware {{ version }} with all its patches.'),\n          { version: baseVersion.c8y_Firmware.version }\n        )}\n        ${this.translateService.instant(gettext('This operation is irreversible.'))}\n        ${this.translateService.instant(gettext('Do you want to proceed?'))}\n      `;\n      const labels = {\n        ok: gettext('Delete')\n      };\n      await this.modalService.confirm(title, body, Status.DANGER, labels);\n      await this.repositoryService.delete(baseVersion);\n      this.alertService.success(gettext('Firmware deleted.'));\n      this.baseVersionsUpdated$.next();\n    } catch (ex) {\n      // only if not cancel from modal\n      if (ex) {\n        this.alertService.addServerFailure(ex);\n      }\n    }\n  }\n\n  async deletePatchVersion(patchVersion: IManagedObject) {\n    try {\n      const title = gettext('Delete firmware patch');\n      const body = `\n        ${this.translateService.instant(\n          gettext('You are about to delete firmware patch {{ version }}.'),\n          { version: patchVersion.c8y_Firmware.version }\n        )}\n        ${this.translateService.instant(gettext('This operation is irreversible.'))}\n        ${this.translateService.instant(gettext('Do you want to proceed?'))}\n      `;\n      const labels = {\n        ok: gettext('Delete')\n      };\n      await this.modalService.confirm(title, body, Status.DANGER, labels);\n      await this.repositoryService.delete(patchVersion);\n      this.alertService.success(gettext('Firmware patch deleted.'));\n      this.patchVersionsUpdated$.next();\n    } catch (ex) {\n      // only if not cancel from modal\n      if (ex) {\n        this.alertService.addServerFailure(ex);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next(true);\n    this.destroy$.unsubscribe();\n  }\n}\n","import { Component, Output, EventEmitter, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { RepositoryService } from '../repository.service';\nimport { RepositoryType, ModalModel, RepositoryCategory } from '../repository.model';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { isUndefined } from 'lodash-es';\nimport { BehaviorSubject, Subscription, from } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, tap, switchMap } from 'rxjs/operators';\nimport { PickedFiles } from '@c8y/ngx-components';\n\n@Component({\n  selector: 'c8y-add-software-software-modal',\n  templateUrl: 'add-software-modal.component.html'\n})\nexport class AddSoftwareModalComponent {\n  @ViewChild('softwareForm', { static: false }) form: NgForm;\n  @Output() saved: EventEmitter<RepositoryCategory> = new EventEmitter<RepositoryCategory>();\n  onInput: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  model: ModalModel = {\n    selected: undefined,\n    version: undefined,\n    description: undefined,\n    binary: {\n      file: undefined,\n      url: undefined\n    }\n  };\n  softwaresResult;\n  saving = false;\n  softwarePreselected: boolean = false;\n  private inputSubscription$: Subscription;\n\n  constructor(\n    private modal: BsModalRef,\n    private repositoryService: RepositoryService,\n    private alert: AlertService\n  ) {}\n\n  ngOnInit() {\n    this.setInitialState();\n    this.loadSoftwares();\n  }\n\n  setInitialState() {\n    if (this.model.selected) {\n      this.softwarePreselected = true;\n    }\n  }\n\n  loadSoftwares() {\n    this.inputSubscription$ = this.onInput\n      .pipe(\n        tap(() => {\n          if (!this.softwarePreselected) {\n            this.model.description = null;\n            if (this.form) {\n              this.form.form.get('description').reset();\n            }\n          }\n        }),\n        debounceTime(300),\n        distinctUntilChanged(),\n        switchMap(searchStr => this.getSoftwareResult(searchStr))\n      )\n      .subscribe(result => {\n        this.softwaresResult = result;\n      });\n  }\n\n  getSoftwareResult(searchStr: string) {\n    return from(\n      this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, {\n        partialName: searchStr,\n        skipLegacy: true\n      })\n    );\n  }\n\n  async save() {\n    this.saving = true;\n    this.repositoryService\n      .create(this.model, RepositoryType.SOFTWARE)\n      .then(savedSoftware => {\n        this.successMsg();\n        this.saving = false;\n        this.saved.next(savedSoftware);\n        this.cancel();\n      })\n      .catch(e => {\n        this.saving = false;\n        this.saved.error(e);\n        this.cancel();\n      });\n  }\n\n  successMsg() {\n    const msg = gettext('Software added, optionally set device type filter.');\n    this.alert.success(msg);\n  }\n\n  cancel() {\n    this.modal.hide();\n    this.saved.complete();\n  }\n\n  ngOnDestroy() {\n    this.inputSubscription$.unsubscribe();\n  }\n\n  onFile(dropped: PickedFiles) {\n    if (!isUndefined(dropped.url)) {\n      this.model.binary = {\n        url: dropped.url\n      };\n      return;\n    } else if (!isUndefined(dropped.droppedFiles)) {\n      this.model.binary = {\n        file: dropped.droppedFiles[0].file\n      };\n      return;\n    } else {\n      this.model.binary = {\n        file: undefined,\n        url: undefined\n      };\n    }\n  }\n}\n","import { Router, ActivatedRoute } from '@angular/router';\nimport { Component } from '@angular/core';\nimport { BsModalService, ModalOptions } from 'ngx-bootstrap/modal';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  distinctUntilChanged,\n  tap,\n  debounceTime,\n  switchMap,\n  shareReplay,\n} from 'rxjs/operators';\nimport { Observable, BehaviorSubject, combineLatest } from 'rxjs';\nimport { IResultList, IManagedObject } from '@c8y/client';\nimport { ModalService, gettext, Status, AlertService, memoize } from '@c8y/ngx-components';\nimport { RepositoryService } from '../repository.service';\nimport { RepositoryType } from '../repository.model';\nimport { AddSoftwareModalComponent } from './add-software-modal.component';\nimport { property, get } from 'lodash-es';\n\n@Component({\n  selector: 'c8y-software-list',\n  templateUrl: 'software-list.component.html'\n})\nexport class SoftwareListComponent {\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n  reload$: BehaviorSubject<void> = new BehaviorSubject(null);\n  reloading: boolean = false;\n  softwares$: Observable<IResultList<IManagedObject>> = combineLatest(\n    this.textFilter$.pipe(\n      debounceTime(400),\n      distinctUntilChanged()\n    ),\n    this.reload$\n  ).pipe(\n    tap(() => {\n      this.reloading = true;\n    }),\n    switchMap(([text]) => this.getSoftwares(text)),\n    tap(() => {\n      this.reloading = false;\n    }),\n    shareReplay(1)\n  );\n  isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);\n  readonly DEVICE_TYPE_NOT_AVAILABLE: string = gettext('No device type available');\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private modalService: ModalService,\n    private bsModalService: BsModalService,\n    private translateService: TranslateService,\n    private alertService: AlertService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  getSoftwares(partialName?: string) {\n    return this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, { partialName });\n  }\n\n  addSoftware() {\n    const config: ModalOptions = { class: 'modal-sm', ignoreBackdropClick: true };\n    const modalRef = this.bsModalService.show(AddSoftwareModalComponent, config);\n    modalRef.content.saved.subscribe(savedSoftware => this.editSoftware(savedSoftware));\n  }\n\n  editSoftware(software: IManagedObject) {\n    this.router.navigate([software.id], { relativeTo: this.activatedRoute });\n  }\n\n  async deleteSoftware(software: IManagedObject) {\n    try {\n      const title = gettext('Delete software');\n      const body = `\n        ${this.translateService.instant(\n          gettext('You are about to delete software \"{{ name }}\" with all its versions.'),\n          { name: software.name }\n        )}\n        ${this.translateService.instant(gettext('This operation is irreversible.'))}\n        ${this.translateService.instant(gettext('Do you want to proceed?'))}\n      `;\n      const labels = {\n        ok: gettext('Delete')\n      };\n      await this.modalService.confirm(title, body, Status.DANGER, labels);\n      await this.repositoryService.delete(software);\n      this.alertService.success(gettext('Software deleted.'));\n      this.reload$.next();\n    } catch (ex) {\n      // only if not cancel from modal\n      if (ex) {\n        this.alertService.addServerFailure(ex);\n      }\n    }\n  }\n\n  @memoize(property('id'))\n  getBaseVersionsCount$(software: IManagedObject): Observable<number | string> {\n    return this.softwares$.pipe(\n      switchMap(() => this.repositoryService.getBaseVersionsCount$(software)),\n      shareReplay(1)\n    );\n  }\n\n  getDeviceTypeTitle(software: IManagedObject): string {\n    return get(\n      software,\n      'c8y_Filter.type',\n      this.translateService.instant(this.DEVICE_TYPE_NOT_AVAILABLE));\n  }\n}\n","import { BsModalService, ModalOptions } from 'ngx-bootstrap';\nimport { AlertService, gettext, memoize, ModalService, Status } from '@c8y/ngx-components';\nimport { Observable, Subject, merge, BehaviorSubject } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { RepositoryService } from '../repository.service';\nimport { IManagedObject } from '@c8y/client';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  map,\n  switchMap,\n  takeUntil,\n  withLatestFrom,\n  tap,\n  take,\n  distinctUntilKeyChanged,\n  shareReplay\n} from 'rxjs/operators';\nimport { InventoryService, IResultList } from '@c8y/client';\nimport { TranslateService } from '@ngx-translate/core';\nimport { AddSoftwareModalComponent } from './add-software-modal.component';\n\n@Component({\n  selector: 'c8y-software-details',\n  templateUrl: './software-details.component.html'\n})\nexport class SoftwareDetailsComponent implements OnInit, OnDestroy {\n  reload$: Subject<void> = new Subject();\n  reloading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  updateSoftware$: Subject<Partial<IManagedObject>> = new Subject();\n  softwareUpdated$: Subject<IManagedObject> = new Subject();\n  baseVersionsUpdated$: Subject<void> = new Subject();\n\n  software$: Observable<IManagedObject> = merge(\n    this.activatedRoute.params.pipe(\n      map(params => params.id),\n      switchMap(id => this.inventoryService.detail$(id))\n    ),\n    this.reload$.pipe(\n      tap(() => this.reloading$.next(true)),\n      switchMap(() => this.activatedRoute.params),\n      map(params => params.id),\n      switchMap(id => this.inventoryService.detail$(id)),\n      tap(() => this.reloading$.next(false))\n    ),\n    this.softwareUpdated$\n  ).pipe(shareReplay(1));\n\n  baseVersions$: Observable<IResultList<IManagedObject>> = merge(\n    this.software$.pipe(distinctUntilKeyChanged('id')),\n    this.baseVersionsUpdated$,\n    this.reload$\n  ).pipe(\n    switchMap(() => this.software$),\n    switchMap(software => this.repositoryService.listBaseVersions(software)),\n    shareReplay(1)\n  );\n\n  isLegacy$: Observable<boolean> = this.software$.pipe(\n    map(software => this.repositoryService.isLegacyEntry(software)),\n    shareReplay(1)\n  );\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private inventoryService: InventoryService,\n    private repositoryService: RepositoryService,\n    private alertService: AlertService,\n    private translateService: TranslateService,\n    private modalService: ModalService,\n    private bsModalService: BsModalService\n  ) {}\n\n  ngOnInit() {\n    this.updateSoftware$\n      .pipe(\n        withLatestFrom(this.software$),\n        switchMap(([softwarePartial, software]) =>\n          this.inventoryService.update({\n            id: software.id,\n            ...softwarePartial\n          })\n        ),\n        map(({ data }) => data),\n        tap(software => this.softwareUpdated$.next(software)),\n        tap(() => this.alertService.success(gettext('Saved.'))),\n        takeUntil(this.destroy$)\n      )\n      .subscribe();\n  }\n\n  @memoize()\n  getBinaryName$(binaryUrl) {\n    return this.repositoryService.getBinaryName$(binaryUrl);\n  }\n\n  addBaseVersion() {\n    this.software$\n      .pipe(\n        take(1),\n        switchMap(software => {\n          const initialState = {\n            model: {\n              selected: software,\n              description: software.description\n            }\n          };\n          const config: ModalOptions = {\n            class: 'modal-sm',\n            ignoreBackdropClick: true,\n            initialState\n          };\n          const modalRef = this.bsModalService.show(AddSoftwareModalComponent, config);\n          return modalRef.content.saved;\n        })\n      )\n      .subscribe(() => this.baseVersionsUpdated$.next());\n  }\n\n  async deleteBaseVersion(baseVersion: IManagedObject) {\n    try {\n      const title = gettext('Delete software');\n      const body = `\n        ${this.translateService.instant(\n          gettext('You are about to delete software {{ version }}.'),\n          { version: baseVersion.c8y_Software.version }\n        )}\n        ${this.translateService.instant(gettext('This operation is irreversible.'))}\n        ${this.translateService.instant(gettext('Do you want to proceed?'))}\n      `;\n      const labels = {\n        ok: gettext('Delete')\n      };\n      await this.modalService.confirm(title, body, Status.DANGER, labels);\n      await this.repositoryService.delete(baseVersion);\n      this.alertService.success(gettext('Software deleted.'));\n      this.baseVersionsUpdated$.next();\n    } catch (ex) {\n      // only if not cancel from modal\n      if (ex) {\n        this.alertService.addServerFailure(ex);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next(true);\n    this.destroy$.unsubscribe();\n  }\n}\n","import { Component, ViewChild } from '@angular/core';\nimport { IManagedObject } from '@c8y/client';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { uniqBy, isUndefined } from 'lodash-es';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { pipe } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ModalModel, RepositoryType } from '../repository.model';\nimport { RepositoryService } from '../repository.service';\nimport { PickedFiles } from '@c8y/ngx-components';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'c8y-configuration-detail',\n  templateUrl: './configuration-detail.component.html'\n})\nexport class ConfigurationDetailComponent implements ModalModel {\n  @ViewChild('configurationForm', { static: true }) configurationForm: NgForm;\n  selected: { id: string; name: string };\n  version: string;\n  description: string;\n  binary: { file?: File; url?: string } = {\n    file: undefined,\n    url: undefined\n  };\n  deviceType: string;\n\n  pattern: string = '';\n  filterPipe;\n  configs;\n  mo: Partial<IManagedObject> = {};\n  saving = false;\n  uploadChoice: 'uploadBinary' | 'uploadUrl' = 'uploadBinary';\n  existingBinary: File;\n  submitButtonTitle: string;\n\n  result: Promise<void> = new Promise((resolve, reject) => {\n    this._save = resolve;\n    this._cancel = reject;\n  });\n\n  private _save;\n  private _cancel;\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private bsModalRef: BsModalRef,\n    private alert: AlertService\n  ) {}\n\n  async ngOnInit() {\n    this.configs = await this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION);\n    if (this.selected) {\n      this.uploadChoice = this.binary.file ? 'uploadBinary' : 'uploadUrl';\n      this.existingBinary = this.binary.file;\n    }\n    this.setPipe('');\n    this.submitButtonTitle = this.mo.id\n      ? gettext('Update configuration')\n      : gettext('Add configuration');\n  }\n\n  cancel() {\n    this.bsModalRef.hide();\n    this._cancel();\n  }\n\n  setPipe(filterStr: string) {\n    this.pattern = filterStr;\n    this.filterPipe = pipe(\n      map((data: []) => uniqBy(data, 'configurationType')),\n      map((data: []) => {\n        return data.filter(\n          (mo: any) =>\n            mo.configurationType &&\n            mo.configurationType.toLowerCase().indexOf(filterStr.toLowerCase()) > -1\n        );\n      })\n    );\n  }\n\n  onFile(dropped: PickedFiles) {\n    this.configurationForm.form.markAsDirty();\n    if (!isUndefined(dropped.url)) {\n      this.binary = {\n        url: dropped.url\n      };\n      return;\n    } else if (!isUndefined(dropped.droppedFiles)) {\n      this.binary = {\n        file: dropped.droppedFiles[0].file\n      };\n      return;\n    } else {\n      this.binary = {\n        file: undefined,\n        url: undefined\n      };\n    }\n  }\n\n  async save() {\n    try {\n      this.saving = true;\n      const { selected, version, description, binary, deviceType } = this;\n      if (this.existingBinary === this.binary.file) {\n        binary.file = undefined;\n      }\n      await this.repositoryService.save(\n        { selected, version, description, binary, deviceType },\n        RepositoryType.CONFIGURATION,\n        this.mo\n      );\n      this.alert.success(\n        this.mo.id ? gettext('Configuration updated.') : gettext('Configuration created.')\n      );\n      this.bsModalRef.hide();\n      this._save();\n    } catch (ex) {\n      this.alert.addServerFailure(ex);\n      this._cancel();\n    } finally {\n      this.saving = false;\n    }\n  }\n}\n","import { Component, OnInit, Pipe, ViewChild } from '@angular/core';\nimport {IManagedObject, InventoryBinaryService, InventoryService, IResultList} from '@c8y/client';\nimport {\n  AlertService,\n  FilterInputComponent,\n  gettext, memoize,\n  ModalService,\n  Status\n} from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Observable, of, pipe } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ModalModel, RepositoryType } from '../repository.model';\nimport { RepositoryService } from '../repository.service';\nimport { ConfigurationDetailComponent } from './configuration-detail.component';\nimport { property } from 'lodash-es';\nimport { saveAs } from 'file-saver';\n\n@Component({\n  selector: 'c8y-configuration-list',\n  templateUrl: './configuration-list.component.html'\n})\nexport class ConfigurationListComponent implements OnInit {\n  @ViewChild(FilterInputComponent, { static: false }) filter: FilterInputComponent;\n  configurations$: Observable<IResultList<IManagedObject>>;\n  filterPipe: Pipe;\n  filterTerm = '';\n  reloading: boolean = false;\n  private readonly DELETED_SUCCESS_MSG = gettext('Configuration deleted.');\n\n  constructor(\n    private alert: AlertService,\n    private repositoryService: RepositoryService,\n    private bsModalService: BsModalService,\n    private modalService: ModalService,\n    private translateService: TranslateService,\n    private inventoryBinaryService: InventoryBinaryService,\n    private inventoryService: InventoryService\n  ) {}\n\n  ngOnInit() {\n    this.loadConfigurations();\n  }\n\n  async loadConfigurations() {\n    this.reloading = true;\n    this.configurations$ = of(\n      await this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION)\n    );\n    this.reloading = false;\n    this.reset();\n  }\n\n  async add() {\n    try {\n      await (this.bsModalService.show(ConfigurationDetailComponent, {\n        class: 'modal-sm',\n        ignoreBackdropClick: true\n      }).content as ConfigurationDetailComponent).result;\n      await this.loadConfigurations();\n    } catch (ex) {\n      // intended empty\n    }\n  }\n\n  async edit(configuration: IManagedObject) {\n    const fileBinary: File = await this.repositoryService.getBinaryFile(configuration.url, {\n      allowExternal: false\n    });\n    try {\n      const modal = this.bsModalService.show(ConfigurationDetailComponent, {\n        class: 'modal-sm',\n        ignoreBackdropClick: true,\n        initialState: {\n          selected: { id: configuration.id, configurationType: configuration.configurationType },\n          version: configuration.name,\n          deviceType: configuration.deviceType,\n          description: configuration.description,\n          binary: { file: fileBinary, url: configuration.url }\n        } as ModalModel\n      }).content as ConfigurationDetailComponent;\n      modal.mo = configuration;\n      await modal.result;\n      await this.loadConfigurations();\n    } catch (ex) {\n      // intended empty\n    }\n  }\n\n  isBinaryFile(configuration: IManagedObject) {\n    const id: string = this.inventoryBinaryService.getIdFromUrl(configuration.url);\n    return id ? true : false;\n  }\n\n  @memoize(property('id'))\n  getBinaryName(configuration: IManagedObject) {\n    return this.repositoryService.getBinaryName$(configuration.url);\n  }\n\n  async download(configuration: IManagedObject) {\n    const fileBinary: File = await this.repositoryService.getBinaryFile(configuration.url, {\n      allowExternal: false\n    });\n    saveAs(fileBinary);\n  }\n\n  async delete(configuration: IManagedObject) {\n    try {\n      const title = gettext('Delete configuration snapshot');\n      const confirmationText = gettext(\n        'You are about to delete the configuration snapshot {{ name }}.'\n      );\n      const hint = gettext('This operation is irreversible.');\n      const proceed = gettext('Do you want to proceed?');\n      const body = [\n        this.translateService.instant(confirmationText, {\n          name: configuration.name\n        }),\n        this.translateService.instant(hint),\n        this.translateService.instant(proceed)\n      ].join(' ');\n      const labels = {\n        ok: gettext('Delete')\n      };\n      await this.modalService.confirm(title, body, Status.DANGER, labels);\n      await this.repositoryService.delete(configuration);\n      this.alert.success(this.DELETED_SUCCESS_MSG);\n      await this.loadConfigurations();\n    } catch (ex) {\n      if (ex) {\n        this.alert.addServerFailure(ex);\n      }\n    }\n  }\n\n  setPipe(filterTerm: string) {\n    this.filterTerm = filterTerm;\n    this.filterPipe = pipe(\n      map((data: []) =>\n        filterTerm.trim().length === 0\n          ? data\n          : data.filter(\n              (mo: IManagedObject) =>\n                this.filterContainString(mo.name, filterTerm) ||\n                this.filterContainString(mo.configurationType, filterTerm) ||\n                this.filterContainString(mo.deviceType, filterTerm)\n            )\n      )\n    );\n  }\n\n  reset() {\n    this.filter.filterTerm = '';\n    this.setPipe('');\n  }\n\n  private filterContainString(name: string, filterTerm: string) {\n    const term = filterTerm.toLowerCase().trim();\n    return name && name.toLowerCase().indexOf(term) > -1;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { gettext, NavigatorNode, NavigatorNodeFactory } from '@c8y/ngx-components';\n\n@Injectable()\nexport class RepositoryNavigationFactory implements NavigatorNodeFactory {\n  navs: NavigatorNode[] = [];\n\n  async get() {\n    if (this.navs.length === 0) {\n      this.navs.push(\n        new NavigatorNode({\n          label: gettext('Firmware repository'),\n          path: 'firmware',\n          icon: 'c8y-firmware',\n          parent: gettext('Management'),\n          priority: 1000\n        })\n      );\n      this.navs.push(\n        new NavigatorNode({\n          label: gettext('Software repository'),\n          path: 'software',\n          icon: 'c8y-tools',\n          parent: gettext('Management'),\n          priority: 900\n        })\n      );\n      this.navs.push(\n        new NavigatorNode({\n          label: gettext('Configuration repository'),\n          path: 'configuration',\n          icon: 'gears',\n          parent: gettext('Management'),\n          priority: 800\n        })\n      );\n    }\n    return this.navs;\n  }\n}\n","import { Component, EventEmitter } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  gettext,\n  ISelectModalObject,\n  ISelectModalOption,\n  ModalLabels,\n  ModalSelectionMode\n} from '@c8y/ngx-components';\nimport { get } from 'lodash-es';\nimport { IManagedObject, QueriesUtil } from '@c8y/client';\nimport { Subject, Observable, from, BehaviorSubject } from 'rxjs';\nimport { switchMap, map, mergeMap, shareReplay, tap } from 'rxjs/operators';\nimport { RepositoryService } from '../repository.service';\nimport {\n  RepositoryType,\n  RepositoryCategory,\n  RepositoryBinary,\n  SelectedRepositoryBinary\n} from '../repository.model';\n\n// MODAL STRUCTURE\n// - selectModalObject (repository entry (repositoryCategory) -> type c8y_Firmware/c8y_Software)\n//   -- ISelectModalOption (repository binary entry (repositoryBinary) => type c8y_FirmwareBinary/c8y_SoftwareBinary)\n//   -- ISelectModalOption...\n// - selectModalObject...\n\n/**\n * RepositorySelectModalComponent displays repository entries options and allows to select them.\n *\n * @example\n * ```\n * import { take } from 'rxjs/operators';\n * import { RepositorySelectModalComponent, ModalSelectionMode, RepositoryType } from '@c8y/ngx-components/repository';\n *\n * const initialState = {\n *   repositoryType: RepositoryType.FIRMWARE,\n *   title: gettext('Install firmware'),\n *   subTitle: gettext('Available firmwares matching the device type'),\n *   icon: 'c8y-firmware',\n *   mode: ModalSelectionMode.SINGLE,\n *   labels: { ok: gettext('Install') },\n *   disableSelected: false\n * };\n *\n * const modal = this.bsModal.show(RepositorySelectModalComponent, {\n *   ignoreBackdropClick: true,\n *   initialState\n * });\n *\n * modal.content.load.next();\n * modal.content.resultEmitter.pipe(take(1)).subscribe((firmware) => {\n *   ...\n * })\n * ```\n */\n\n@Component({\n  selector: 'c8y-repository-select-modal',\n  templateUrl: './repository-select-modal.component.html'\n})\nexport class RepositorySelectModalComponent {\n  /**\n   * Optional\n   * Allows to provide custom data.\n   * @example\n   * ```\n   * import { from } from 'rxjs';\n   *\n   * const repositoryEntry = { name: 'ExampleEntry', type: 'c8y_Firmware' };\n   * const versions = [{ c8y_Firmware: { version: '1.0.0', url: 'http://example.com' } }];\n   *\n   * const initialState = {repositoryEntriesWithVersions$: from({ ...repositoryEntry, versions })};\n   * ```\n   */\n  repositoryEntriesWithVersions$: Observable<IManagedObject[]> = undefined;\n  /**\n   * Repository entry type.\n   */\n  repositoryType: RepositoryType.FIRMWARE | RepositoryType.SOFTWARE;\n  /**\n   * Optional\n   * Allows to use custom badges templates.\n   * @example\n   * ```\n   * import { gettext } from '@c8y/ngx-components';\n   *\n   * const badgeTemplates = { '=1': gettext('{{count}} version'), other: gettext('{{count}} versions') };\n   * const initialState = { badgeTemplates };\n   * ```\n   */\n  badgeTemplates = { '=1': gettext('{{count}} version'), other: gettext('{{count}} versions') };\n  /**\n   * Optional\n   * Allows to provide custom modal title.\n   */\n  title: string = gettext('Select repository entry');\n  /**\n   * Optional\n   * Allows to provide custom modal subtitle.\n   */\n  subTitle: string;\n  /**\n   * Loads the content of the modal.\n   * Must be invoked by the modal's caller.\n   */\n  load: Subject<void> = new Subject();\n  /**\n   * Optional\n   * Emits a search string currently entered in the filter input.\n   * Use it to filter the items if you use custom repositoryEntriesWithVersions$.\n   */\n  searchTerm: BehaviorSubject<string> = new BehaviorSubject('');\n  /**\n   * Optional\n   * Allows to provide device type query to restrict search criteria.\n   * Only takes effect when repositoryEntriesWithVersions$ is not provided,\n   * otherwise modal's caller have to provide already filtered data in the repositoryEntriesWithVersions$.\n   */\n  deviceTypeQuery: any = {};\n  /**\n   * Optional\n   * Allows to provide query to restrict search criteria.\n   * Only takes effect when repositoryEntriesWithVersions$ is not provided,\n   * otherwise modal's caller have to provide already filtered data in the repositoryEntriesWithVersions$.\n   */\n  searchQuery: any = {};\n  /**\n   * Optional\n   * Allows to provide custom labels for the buttons responsible for confirm/dismiss modal actions.\n   */\n  labels: ModalLabels = { ok: gettext('Save') };\n  /**\n   * Optional\n   * Allows to hide the filter input field.\n   * By default, the filter input field is displayed.\n   */\n  showFilter: boolean = true;\n  /**\n   * Optional\n   * Allows to show a warning that the search criteria should be narrowed down.\n   * By default, this warning is hidden.\n   */\n  areMoreEntries: boolean = false;\n  /**\n   * Optional\n   * Allows to pass the array of items. Each item from this array will be marked as selected in the modal.\n   */\n  selected: SelectedRepositoryBinary[];\n  /**\n   * Emits the list of selected options.\n   */\n  resultEmitter: EventEmitter<SelectedRepositoryBinary[]> = new EventEmitter<\n    SelectedRepositoryBinary[]\n  >();\n  /**\n   * Optional\n   * Allows to change selection mode.\n   * Supported options:\n   *   * single: only single option can be selected.\n   *   * multiple: multiple options can be selected.\n   */\n  mode: ModalSelectionMode = ModalSelectionMode.SINGLE;\n  /**\n   * Optional\n   * Allows to use custom icon in the modal header.\n   */\n  icon: string;\n  /**\n   * Allows to block selection of the other versions from the same repository entry.\n   */\n  disableSelected: boolean = true;\n  modalEntries: Observable<ISelectModalObject[]> = this.load.pipe(\n    switchMap(() => this.repositoryEntriesWithVersions$),\n    mergeMap(mos => this.aggregate(mos)),\n    tap(items => {\n      this.areMoreEntries = items.length >= this.PAGE_SIZE ? true : false;\n    })\n  );\n  private PAGE_SIZE = 100;\n  private queriesUtil: QueriesUtil;\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private translateService: TranslateService\n  ) {\n    this.queriesUtil = new QueriesUtil();\n  }\n\n  ngOnInit() {\n    if (!this.repositoryType) {\n      throw new Error('Repository type must be defined');\n    }\n\n    if (!this.repositoryEntriesWithVersions$) {\n      this.repositoryEntriesWithVersions$ = from(\n        this.repositoryService.listRepositoryEntries(this.repositoryType, {\n          query: this.queriesUtil.addOrFilter(this.deviceTypeQuery, this.searchQuery),\n          params: { pageSize: this.PAGE_SIZE }\n        })\n      ).pipe(\n        map(({ data }) => data),\n        map(mos => this.getAndAssignRepositoryBinaries(mos)),\n        shareReplay(1)\n      );\n    }\n  }\n\n  getAndAssignRepositoryBinaries(mos: IManagedObject[]) {\n    mos.forEach(mo => {\n      mo.versions = this.repositoryService.listAllVersions(mo);\n    });\n    return mos;\n  }\n\n  search(searchTerm: string) {\n    this.searchTerm.next(searchTerm);\n    if (!searchTerm) {\n      this.searchQuery = {};\n    } else {\n      this.searchQuery = { name: `*${searchTerm}*` };\n    }\n    this.load.next();\n  }\n\n  result(selectedItems: SelectedRepositoryBinary[]) {\n    this.resultEmitter.emit(selectedItems);\n  }\n\n  async aggregate(mos: IManagedObject[]): Promise<ISelectModalObject[]> {\n    const repositoryType = this.repositoryType;\n    const selectedItems: SelectedRepositoryBinary[] = this.selected;\n\n    return Promise.all(\n      mos.map(async repositoryEntry => {\n        const options: ISelectModalOption[] = this.getSelectModalOptions(\n          await this.repositoryService.fetchAllItemsFromList(repositoryEntry.versions),\n          selectedItems,\n          repositoryEntry as RepositoryCategory,\n          repositoryType\n        );\n        const selectModalObject = this.getSelectModalObject(\n          repositoryEntry as RepositoryCategory,\n          options\n        );\n\n        return selectModalObject;\n      })\n    );\n  }\n\n  getSelectModalOptions(\n    versions: RepositoryBinary[],\n    selectedItems: SelectedRepositoryBinary[],\n    repositoryEntry: RepositoryCategory,\n    repositoryType: RepositoryType\n  ): ISelectModalOption[] {\n    const selectModalOptions: ISelectModalOption[] = [];\n    versions.forEach(repositoryBinary => {\n      const isSelected: boolean = this.isBinaryRepositorySelected(\n        selectedItems,\n        repositoryEntry,\n        repositoryBinary,\n        repositoryType\n      );\n\n      const { version } = repositoryBinary[`${repositoryType}`];\n      const bodyValue =\n        version || `(${this.translateService.instant(gettext('not specified`version`'))})`;\n      const bodyClass = version ? '' : 'text-muted';\n      selectModalOptions.push({\n        body: [\n          {\n            value: bodyValue,\n            class: bodyClass\n          }\n        ],\n        obj: {\n          id: repositoryBinary.id,\n          name: repositoryEntry.name,\n          version,\n          ...(get(repositoryBinary, 'c8y_Patch.dependency') && {\n            dependency: get(repositoryBinary, 'c8y_Patch.dependency')\n          }),\n          ...(get(repositoryBinary, 'c8y_Patch') && { c8y_Patch: true }),\n          url: repositoryBinary[`${repositoryType}`].url\n        },\n        selected: isSelected\n      });\n    });\n    return selectModalOptions;\n  }\n\n  isBinaryRepositorySelected(\n    selectedItems: SelectedRepositoryBinary[],\n    repositoryEntry: RepositoryCategory,\n    repositoryBinary: RepositoryBinary,\n    repositoryType: RepositoryType\n  ): boolean {\n    const isSelected = selectedItems\n      ? selectedItems.filter(\n          repositoryFragment =>\n            repositoryFragment.name === repositoryEntry.name &&\n            repositoryFragment.version === repositoryBinary[`${repositoryType}`].version\n        ).length > 0\n      : false;\n\n    return isSelected;\n  }\n\n  getSelectModalObject(\n    repositoryEntry: RepositoryCategory,\n    options: ISelectModalOption[]\n  ): ISelectModalObject {\n    const label =\n      options.length === 1\n        ? this.translateService.instant(this.badgeTemplates['=1'], { count: options.length })\n        : this.translateService.instant(this.badgeTemplates.other, { count: options.length });\n\n    const selectModalObject: ISelectModalObject = {\n      groupId: repositoryEntry.id,\n      body: [\n        { value: repositoryEntry.name, class: 'text-truncate' },\n        { value: repositoryEntry.description, class: 'text-truncate text-muted' }\n      ],\n      additionalInformation: { value: label, class: 'label label-info' },\n      options\n    };\n\n    return selectModalObject;\n  }\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { assign, isEmpty } from 'lodash-es';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BehaviorSubject, Observable, combineLatest, from, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, shareReplay, switchMap, take } from 'rxjs/operators';\n\nimport { ModalSelectionMode, gettext } from '@c8y/ngx-components';\nimport { IManagedObject, IOperation, InventoryService, OperationStatus } from '@c8y/client';\n\nimport { RepositoryService } from '../repository.service';\nimport { DeviceFirmware, FirmwareBinary, RepositoryType } from '../repository.model';\nimport { RepositorySelectModalComponent } from '../select-modal/repository-select-modal.component';\n\n@Component({\n  selector: 'c8y-firmware-device-tab',\n  templateUrl: 'firmware-device-tab.component.html'\n})\nexport class FirmwareDeviceTabComponent {\n  device$: BehaviorSubject<IManagedObject> = new BehaviorSubject(\n    this.route.parent.snapshot.data.contextData\n  );\n  reloading: boolean = false;\n  deviceFirmwareFragment$: Observable<DeviceFirmware> = this.device$.pipe(\n    map(device => device.c8y_Firmware)\n  );\n  firmwareBinary$: Observable<IManagedObject> = this.deviceFirmwareFragment$.pipe(\n    filter(deviceFirmwareFragment => !isEmpty(deviceFirmwareFragment)),\n    switchMap(deviceFirmwareFragment =>\n      from(\n        this.repository.getRepositoryBinaryMoByVersion(\n          deviceFirmwareFragment,\n          RepositoryType.FIRMWARE\n        )\n      )\n    ),\n    shareReplay(1)\n  );\n  repositoryEntry$: Observable<IManagedObject> = this.firmwareBinary$.pipe(\n    switchMap(mo => this.repository.getRepositoryEntryMO$(mo)),\n    shareReplay(1)\n  );\n  patches$: Observable<IManagedObject[]> = combineLatest(\n    this.firmwareBinary$,\n    this.repositoryEntry$\n  ).pipe(\n    switchMap(([firmwareBinary, repositoryEntry]) => {\n      if (repositoryEntry && firmwareBinary) {\n        const version: string = this.repository.getBaseVersionFromMO(\n          firmwareBinary as FirmwareBinary\n        );\n\n        return from(this.repository.listPatchVersions(repositoryEntry, version)).pipe(\n          map(({ data }) => data)\n        );\n      } else {\n        return of([]);\n      }\n    }),\n    shareReplay(1)\n  );\n  changesOperation$ = new BehaviorSubject<IOperation>(null);\n  changesInProgress$: Observable<boolean> = this.changesOperation$.pipe(\n    map(operation => this.isInProgress(operation))\n  );\n\n  constructor(\n    private route: ActivatedRoute,\n    private repository: RepositoryService,\n    private inventory: InventoryService,\n    private bsModal: BsModalService\n  ) {}\n\n  async ngOnInit() {\n    // TODO check route snapshot, why is not refreshing device.\n    // Scanario: missing deviceFirmwareFragment => install new version => switch tabs.\n    // Expected: device should be set.\n    await this.loadDevice();\n    await this.loadOperation();\n  }\n\n  installFirmware() {\n    const initialState = {\n      repositoryEntriesWithVersions$: of([]),\n      repositoryEntriesWithVersionsFn$: modal =>\n        this.getRepositoryEntriesWithVersions$(modal.content.searchTerm),\n      repositoryType: RepositoryType.FIRMWARE,\n      title: gettext('Install firmware'),\n      subTitle: gettext('Available firmwares matching the device type'),\n      icon: 'c8y-firmware',\n      mode: ModalSelectionMode.SINGLE,\n      labels: { ok: gettext('Install') },\n      disableSelected: false\n    };\n\n    this.deviceFirmwareFragment$\n      .pipe(\n        take(1),\n        switchMap(deviceFirmwareFragment => {\n          if (deviceFirmwareFragment) {\n            const { name, version } = deviceFirmwareFragment;\n            const selected = [{ name, version }];\n            assign(initialState, { selected });\n          }\n\n          const modal = this.bsModal.show(RepositorySelectModalComponent, {\n            ignoreBackdropClick: true,\n            initialState\n          });\n\n          if (initialState.repositoryEntriesWithVersionsFn$) {\n            modal.content.repositoryEntriesWithVersions$ = initialState.repositoryEntriesWithVersionsFn$(\n              modal\n            );\n          }\n\n          modal.content.load.next();\n\n          return modal.content.resultEmitter;\n        })\n      )\n      .subscribe(selectedOption => {\n        this.handleOperation(selectedOption);\n      });\n  }\n\n  getRepositoryEntriesWithVersions$(searchTerm$: BehaviorSubject<string>) {\n    return searchTerm$.pipe(\n      distinctUntilChanged(),\n      switchMap(searchTerm =>\n        this.repository.listRepositoryEntries(RepositoryType.FIRMWARE, {\n          query: this.repository.getDeviceTypeQuery(RepositoryType.FIRMWARE, this.device$.value),\n          partialName: searchTerm,\n          params: { pageSize: 100 }\n        })\n      ),\n      map(({ data }) => data),\n      map(mos => this.getAndAssignRepositoryBinaries(mos)),\n      shareReplay(1)\n    );\n  }\n\n  getAndAssignRepositoryBinaries(mos: IManagedObject[]) {\n    mos.forEach(mo => {\n      mo.versions = this.repository.listBaseVersions(mo);\n    });\n    return mos;\n  }\n\n  addPatch() {\n    const initialState = {\n      repositoryType: RepositoryType.FIRMWARE,\n      repositoryEntriesWithVersions$: this.getRepositoryEntryWithPatches$(),\n      title: gettext('Install firmware'),\n      subTitle: gettext('Available firmwares matching the device type'),\n      icon: 'c8y-firmware',\n      mode: ModalSelectionMode.SINGLE,\n      labels: { ok: gettext('Install') },\n      disableSelected: false\n    };\n\n    this.deviceFirmwareFragment$\n      .pipe(\n        take(1),\n        switchMap(deviceFirmwareFragment => {\n          if (deviceFirmwareFragment) {\n            const { name, version } = deviceFirmwareFragment;\n            const selected = [{ name, version }];\n            assign(initialState, { selected });\n          }\n\n          const modal = this.bsModal.show(RepositorySelectModalComponent, {\n            ignoreBackdropClick: true,\n            initialState\n          });\n          modal.content.load.next();\n\n          return modal.content.resultEmitter;\n        })\n      )\n      .subscribe(selectedOption => {\n        this.handleOperation(selectedOption);\n      });\n  }\n\n  getRepositoryEntryWithPatches$() {\n    return combineLatest(this.repositoryEntry$, this.patches$).pipe(\n      map(([repositoryEntry, patches]) => {\n        return [{ ...repositoryEntry, versions: patches }];\n      })\n    );\n  }\n\n  async loadDevice() {\n    this.reloading = true;\n    const deviceId = this.device$.value.id;\n    const device = (await this.inventory.detail(deviceId, { withChildren: false })).data;\n    this.device$.next(device);\n    this.reloading = false;\n  }\n\n  private async handleOperation(selectedOption) {\n    const operation = await this.repository.createFirmwareUpdateOperation(\n      this.device$.value,\n      selectedOption\n    );\n    this.trackOperation(operation);\n  }\n\n  private async loadOperation() {\n    const deviceId = this.device$.value.id;\n    const operation = await this.repository.getLastFirmwareUpdateOperation(deviceId);\n    this.trackOperation(operation);\n  }\n\n  private trackOperation(operation: IOperation) {\n    this.changesOperation$.next(operation);\n\n    if (this.isInProgress(operation)) {\n      this.repository.observeOperation(operation).subscribe(\n        operationUpdate => {\n          this.changesOperation$.next(operationUpdate);\n          if (operationUpdate.status === OperationStatus.SUCCESSFUL) {\n            this.loadDevice();\n          }\n        },\n        operationUpdate => {\n          this.changesOperation$.next(operationUpdate);\n        }\n      );\n    }\n  }\n\n  private isInProgress(operation: IOperation) {\n    return (\n      operation && [OperationStatus.PENDING, OperationStatus.EXECUTING].includes(operation.status)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { get, indexOf } from 'lodash-es';\n\nconst FIRMWARE_FRAGMENT = 'c8y_Firmware';\nconst SUPPORTED_OPERATIONS_FRAGMENT = 'c8y_SupportedOperations';\n\n@Injectable()\nexport class FirmwareDeviceTabGuard implements CanActivate {\n  canActivate(route) {\n    const contextData = get(route, 'data.contextData') || get(route, 'parent.data.contextData');\n    const supportedOperations = get(contextData, SUPPORTED_OPERATIONS_FRAGMENT);\n    return !!supportedOperations\n      ? indexOf(supportedOperations, FIRMWARE_FRAGMENT) >= 0\n      : false;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { IManagedObject, InventoryService, OperationStatus, IOperation } from '@c8y/client';\nimport { DeviceSoftware, DeviceSoftwareChange, RepositoryType } from '../repository.model';\nimport { RepositoryService } from '../repository.service';\n\n@Component({\n  selector: 'c8y-software-device-tab',\n  templateUrl: 'software-device-tab.component.html'\n})\nexport class SoftwareDeviceTabComponent implements OnInit {\n  deviceId: string | number = this.route.snapshot.parent.data.contextData.id;\n  device$ = new BehaviorSubject<IManagedObject>(this.route.snapshot.parent.data.contextData);\n  deviceTypeQuery$: Observable<object> = this.device$.pipe(\n    map(device => this.repository.getDeviceTypeQuery(RepositoryType.SOFTWARE, device))\n  );\n  list$: Observable<DeviceSoftware[]> = this.device$.pipe(\n    map(device => this.repository.getDeviceSoftwareList(device))\n  );\n  changes$ = new BehaviorSubject<DeviceSoftwareChange[]>([]);\n  changesOperation$ = new BehaviorSubject<IOperation>(null);\n  changesInProgress$: Observable<boolean> = this.changesOperation$.pipe(\n    map(operation => this.isInProgress(operation))\n  );\n  reloading: boolean = false;\n\n  constructor(\n    private route: ActivatedRoute,\n    private repository: RepositoryService,\n    private inventory: InventoryService\n  ) {}\n\n  async ngOnInit() {\n    await this.loadDevice();\n    await this.loadOperation();\n  }\n\n  addChanges(changes: DeviceSoftwareChange[]) {\n    this.changes$.next([...this.changes$.value, ...changes]);\n  }\n\n  clearChanges() {\n    this.changes$.next([]);\n  }\n\n  async applyChanges() {\n    const operation = await this.repository.createSoftwareUpdateOperation(\n      this.device$.value,\n      this.changes$.value\n    );\n    this.trackOperation(operation);\n  }\n\n  async loadDevice() {\n    this.reloading = true;\n    const device = (await this.inventory.detail(this.deviceId, { withChildren: false })).data;\n    this.device$.next(device);\n    this.reloading = false;\n  }\n\n  private async loadOperation() {\n    const operation = await this.repository.getLastSoftwareUpdateOperation(this.deviceId);\n    this.trackOperation(operation);\n  }\n\n  private trackOperation(operation: IOperation) {\n    this.changesOperation$.next(operation);\n\n    if (this.isInProgress(operation)) {\n      this.displayChangesFromOperation(operation);\n      this.repository.observeOperation(operation).subscribe(\n        operationUpdate => {\n          this.changesOperation$.next(operationUpdate);\n          if (operationUpdate.status === OperationStatus.SUCCESSFUL) {\n            this.clearChanges();\n            this.loadDevice();\n          }\n        },\n        operationUpdate => {\n          this.changesOperation$.next(operationUpdate);\n        }\n      );\n    }\n  }\n\n  private displayChangesFromOperation(operation: IOperation) {\n    const changes = this.repository.getDeviceSoftwareChangesFromOperation(\n      operation,\n      this.device$.value\n    );\n    this.changes$.next(changes);\n  }\n\n  private isInProgress(operation: IOperation) {\n    return (\n      operation && [OperationStatus.PENDING, OperationStatus.EXECUTING].includes(operation.status)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot } from '@angular/router';\n\n@Injectable()\nexport class SoftwareDeviceTabGuard implements CanActivate {\n  private readonly operations = ['c8y_SoftwareUpdate', 'c8y_SoftwareList', 'c8y_Software'];\n\n  canActivate(route: ActivatedRouteSnapshot) {\n    return this.isAnyOperationSupported(route);\n  }\n\n  private isAnyOperationSupported(route: ActivatedRouteSnapshot) {\n    const device = route.data.contextData || route.parent.data.contextData;\n    const supportedOperations = (device && device.c8y_SupportedOperations) || [];\n    return this.operations.some(operation => supportedOperations.indexOf(operation) >= 0);\n  }\n}\n","import { Component, Output, Input, EventEmitter } from '@angular/core';\nimport { from, of, BehaviorSubject } from 'rxjs';\nimport { shareReplay, map, switchMap, distinctUntilChanged } from 'rxjs/operators';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { IManagedObject, InventoryService, IOperation } from '@c8y/client';\nimport { gettext, ModalSelectionMode } from '@c8y/ngx-components';\nimport { RepositoryService } from '../repository.service';\nimport { DeviceSoftware, DeviceSoftwareChange, RepositoryType } from './../repository.model';\nimport { RepositorySelectModalComponent } from '../select-modal/repository-select-modal.component';\n\n@Component({\n  selector: 'c8y-installed-software',\n  templateUrl: 'installed-software.component.html'\n})\nexport class InstalledSoftwareComponent {\n  @Input() softwareList: DeviceSoftware[];\n  @Input() deviceSoftwareChanges: DeviceSoftwareChange[];\n  @Input() deviceSoftwareChangesOperation: IOperation;\n  @Input() deviceSoftwareChangesInProgress: boolean;\n  @Input() deviceTypeQuery: object;\n  @Output() changes = new EventEmitter<DeviceSoftwareChange[]>();\n\n  constructor(\n    private repository: RepositoryService,\n    private inventory: InventoryService,\n    private bsModal: BsModalService\n  ) {}\n\n  installSoftware() {\n    this.displaySoftwareSelectModal({\n      title: gettext('Install software'),\n      labels: { ok: gettext('Install') },\n      repositoryEntriesWithVersions$: of([]),\n      repositoryEntriesWithVersionsFn$: modal =>\n        this.getAllSoftwaresWithVersions$(modal.content.searchTerm)\n    }).subscribe(softwareToInstall => {\n      this.emitSoftwareInstall(softwareToInstall);\n    });\n  }\n\n  updateSoftware(softwareToRemove) {\n    this.displaySoftwareSelectModal({\n      title: gettext('Update software'),\n      labels: { ok: gettext('Update') },\n      showFilter: false,\n      repositoryEntriesWithVersions$: this.getSingleSoftwareWithVersions$(softwareToRemove)\n    }).subscribe(softwareToInstall => {\n      this.emitSoftwareUpdate(softwareToRemove, softwareToInstall);\n    });\n  }\n\n  removeSoftware(softwareToRemove) {\n    this.emitSoftwareRemoval(softwareToRemove);\n  }\n\n  getAllSoftwaresWithVersions$(searchTerm$: BehaviorSubject<string>) {\n    return searchTerm$.pipe(\n      distinctUntilChanged(),\n      switchMap(searchTerm =>\n        this.repository.listRepositoryEntries(RepositoryType.SOFTWARE, {\n          query: this.deviceTypeQuery,\n          partialName: searchTerm,\n          params: { pageSize: 100 }\n        })\n      ),\n      map(({ data }) => data),\n      map(softwares => this.attachVersions(softwares)),\n      shareReplay(1)\n    );\n  }\n\n  getSingleSoftwareWithVersions$(software: DeviceSoftware) {\n    return from(\n      this.repository.listRepositoryEntries(RepositoryType.SOFTWARE, {\n        query: { name: software.name }\n      })\n    ).pipe(\n      map(({ data }) => data),\n      map(softwares => this.attachVersions(softwares)),\n      shareReplay(1)\n    );\n  }\n\n  attachVersions(softwares: IManagedObject[]) {\n    softwares.forEach(software => {\n      software.versions = this.repository.listBaseVersions(software);\n    });\n    return softwares;\n  }\n\n  displaySoftwareSelectModal(initialStateOverrides) {\n    const initialState = {\n      repositoryType: RepositoryType.SOFTWARE,\n      subTitle: gettext('Available softwares matching the device type'),\n      mode: ModalSelectionMode.SINGLE,\n      icon: 'c8y-tools',\n      disableSelected: false,\n      selected: this.softwareList,\n      ...initialStateOverrides\n    };\n    const modal = this.bsModal.show(RepositorySelectModalComponent, {\n      ignoreBackdropClick: true,\n      class: 'modal-sm',\n      initialState\n    });\n\n    if (initialStateOverrides.repositoryEntriesWithVersionsFn$) {\n      modal.content.repositoryEntriesWithVersions$ = initialStateOverrides.repositoryEntriesWithVersionsFn$(\n        modal\n      );\n    }\n\n    modal.content.load.next();\n    return modal.content.resultEmitter;\n  }\n\n  emitSoftwareInstall({ name, version, url }) {\n    this.changes.emit([{ name, version, url, action: 'install' }]);\n  }\n\n  emitSoftwareUpdate(softwareToRemove, softwareToInstall) {\n    this.emitSoftwareRemoval(softwareToRemove);\n    this.emitSoftwareInstall(softwareToInstall);\n  }\n\n  emitSoftwareRemoval({ name, version, url }) {\n    this.changes.emit([{ name, version, url, action: 'delete' }]);\n  }\n}\n","import { Component, Output, Input, EventEmitter } from '@angular/core';\nimport { filter } from 'lodash-es';\nimport { OperationStatus } from '@c8y/client';\nimport { DeviceSoftware, DeviceSoftwareChange } from '../repository.model';\n\n@Component({\n  selector: 'c8y-device-software-list',\n  templateUrl: 'device-software-list.component.html'\n})\nexport class DeviceSoftwareListComponent {\n  @Input() softwareList: DeviceSoftware[];\n  @Input() deviceSoftwareChanges: DeviceSoftwareChange[];\n  @Output() update = new EventEmitter<DeviceSoftware>();\n  @Output() remove = new EventEmitter<DeviceSoftware>();\n  showUpdate: boolean;\n  showRemove: boolean;\n\n  ngAfterContentInit() {\n    this.showUpdate = this.update.observers.length > 0;\n    this.showRemove = this.remove.observers.length > 0;\n  }\n\n  isSoftwareGoingToBeChanged(software: DeviceSoftware): boolean {\n    const relevantChanges = filter(this.deviceSoftwareChanges, software);\n    return relevantChanges.length > 0;\n  }\n}\n","import { Component, Output, Input, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { filter } from 'lodash-es';\nimport { OperationStatus } from '@c8y/client';\nimport { DeviceSoftwareChange } from '../repository.model';\n\n@Component({\n  selector: 'c8y-device-software-changes',\n  templateUrl: 'device-software-changes.component.html'\n})\nexport class DeviceSoftwareChangesComponent implements OnChanges {\n  @Input() changes: DeviceSoftwareChange[];\n  @Input() changesInProgress: boolean;\n  @Output() clear: EventEmitter<void> = new EventEmitter();\n  @Output() apply: EventEmitter<void> = new EventEmitter();\n\n  changes$ = new BehaviorSubject<DeviceSoftwareChange[]>([]);\n  installations$ = this.changes$.pipe(\n    map(changes => {\n      return filter(changes, change => {\n        const { name, action } = change;\n        const relatedChanges = filter(changes, { name });\n        return action === 'install' && relatedChanges.length === 1;\n      });\n    })\n  );\n  updates$ = this.changes$.pipe(\n    map(changes => {\n      return filter(changes, change => {\n        const { name, action } = change;\n        const relatedChanges = filter(changes, { name });\n        return action === 'install' && relatedChanges.length === 2;\n      });\n    })\n  );\n  removals$ = this.changes$.pipe(\n    map(changes => {\n      return filter(changes, change => {\n        const { name, action } = change;\n        const relatedChanges = filter(changes, { name });\n        return action === 'delete' && relatedChanges.length === 1;\n      });\n    })\n  );\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.changes) {\n      this.changes$.next(changes.changes.currentValue);\n    }\n  }\n}\n","import { EventEmitter, Injectable } from '@angular/core';\nimport { DeviceConfigurationOperation } from '../repository.model';\nimport { IManagedObject } from '@c8y/client';\n\n@Injectable()\nexport class DeviceConfigurationService {\n  configurationsUpdated = new EventEmitter<any>();\n\n  updateConfigurations(repositorySnapsOnly?: boolean) {\n    this.configurationsUpdated.emit(repositorySnapsOnly);\n  }\n\n  hasAnySupportedOperation(\n    mo: IManagedObject,\n    operation: DeviceConfigurationOperation | DeviceConfigurationOperation[]\n  ) {\n    const supported = mo.c8y_SupportedOperations as [];\n    if (!supported) {\n      return false;\n    }\n    if (!Array.isArray(operation)) {\n      operation = [operation];\n    }\n    return supported.some(supportedOperation => operation.includes(supportedOperation));\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { IManagedObject, Realtime } from '@c8y/client';\nimport { DeviceConfigurationService } from './device-configuration.service';\nimport {\n  DeviceConfigurationListEmptyState,\n  ConfigurationSnapshot,\n  SupportedConfigurationItem,\n  RepositoryType,\n  DeviceConfigurationOperation\n} from '../repository.model';\nimport { gettext } from '@c8y/ngx-components';\nimport { RepositoryService } from '../repository.service';\n\n@Component({\n  selector: 'c8y-device-configuration',\n  templateUrl: './device-configuration.component.html'\n})\nexport class DeviceConfigurationComponent implements OnInit {\n  supportedConfigurations: SupportedConfigurationItem[] = [];\n  configurationType: string;\n  configSnapshot: Partial<ConfigurationSnapshot> = {};\n  repositorySnapshots: IManagedObject[];\n  repositorySnapshot: ConfigurationSnapshot;\n  repositorySnapshotsEmptyState: DeviceConfigurationListEmptyState;\n  device: IManagedObject;\n  isLegacy: boolean;\n  reloading: boolean = false;\n\n  constructor(\n    private route: ActivatedRoute,\n    private deviceConfigurationService: DeviceConfigurationService,\n    private realtime: Realtime,\n    private repositoryService: RepositoryService\n  ) {\n    this.deviceConfigurationService.configurationsUpdated.subscribe(repositorySnapsOnly => {\n      this.updateSnapshots(repositorySnapsOnly);\n    });\n  }\n\n  ngOnInit() {\n    this.device = this.route.snapshot.parent.data.contextData;\n    if (this.device.c8y_SupportedConfigurations) {\n      this.supportedConfigurations = this.device.c8y_SupportedConfigurations.map(item => ({\n        name: item\n      }));\n    }\n\n    if (\n      this.deviceConfigurationService.hasAnySupportedOperation(this.device, [\n        DeviceConfigurationOperation.DOWNLOAD_CONFIG,\n        DeviceConfigurationOperation.UPLOAD_CONFIG\n      ])\n    ) {\n      this.supportedConfigurations.push({\n        name: gettext('Legacy configuration snapshot'),\n        isLegacy: true\n      });\n    }\n\n    this.repositorySnapshotsEmptyState = {\n      icon: 'gears',\n      title: gettext('No configurations available.'),\n      text: gettext('Add configuration to configuration repository')\n    };\n  }\n\n  async onConfigTypeSelected(config) {\n    this.configurationType = config.name;\n    this.isLegacy = config.isLegacy;\n    this.updateSnapshots();\n  }\n\n  async onRepositoryConfigSelected(config) {\n    this.repositorySnapshot = {\n      id: config.id,\n      time: config.creationTime,\n      name: config.name,\n      binaryUrl: config.url,\n      deviceType: config.deviceType,\n      configurationType: config.configurationType\n    };\n    if (config.url) {\n      try {\n        const binary = await this.repositoryService.getBinaryFile(config.url, {\n          allowExternal: false\n        });\n        if (binary) {\n          this.repositorySnapshot.binary = await (binary as any).text();\n        }\n      } catch (ex) {\n        // do nothing\n      }\n    }\n  }\n\n  async updateSnapshots(repositorySnapsOnly?: boolean) {\n    this.reloading = true;\n    this.repositorySnapshot = undefined;\n    this.repositorySnapshots = await this.getSnapshotsFromRepository(\n      this.device,\n      this.configurationType\n    );\n    if (!repositorySnapsOnly) {\n      this.configSnapshot = this.isLegacy\n        ? await this.repositoryService.getLegacyConfigSnapshot(this.device)\n        : await this.repositoryService.getConfigSnapshot(this.device, this.configurationType);\n    }\n    this.reloading = false;\n  }\n\n  private async getSnapshotsFromRepository(device, configurationType) {\n    const searchQuery = this.repositoryService.getConfigurationTypeQuery(device, configurationType);\n    const res = await this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION, {\n      query: searchQuery,\n      params: { pageSize: 100 }\n    });\n    return res.data;\n  }\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'c8y-source-code-preview',\n  templateUrl: './source-code-preview.component.html'\n})\nexport class SourceCodePreviewComponent {\n  @Input() isDisabled: boolean;\n  @Input() text: string;\n}\n","import { Component } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ConfigurationSnapshot, RepositoryType } from '../repository.model';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { RepositoryService } from '../repository.service';\n\n@Component({\n  selector: 'c8y-save-config-to-configuration-repository',\n  templateUrl: 'save-to-repository.component.html'\n})\nexport class SaveToRepositoryComponent {\n  configSnapshot: ConfigurationSnapshot;\n  result: Promise<any> = new Promise((resolve, reject) => {\n    this._save = resolve;\n    this._cancel = reject;\n  });\n  private _save;\n  private _cancel;\n\n  constructor(\n    private modal: BsModalRef,\n    private alertService: AlertService,\n    private repositoryService: RepositoryService\n  ) {}\n\n  async save() {\n    {\n      try {\n        const configSnapshotData = {\n          selected: {\n            configurationType: this.configSnapshot.configurationType\n          },\n          version: this.configSnapshot.name,\n          deviceType: this.configSnapshot.deviceType,\n          description: this.configSnapshot.description,\n          binary: {\n            file: new File([this.configSnapshot.binary], this.configSnapshot.name)\n          }\n        };\n        await this.repositoryService.save(configSnapshotData, RepositoryType.CONFIGURATION);\n        this.alertService.success(gettext('Configuration saved.'));\n        this._save();\n      } catch (ex) {\n        this.alertService.addServerFailure(ex);\n      }\n    }\n  }\n\n  close() {\n    this._cancel();\n    this.modal.hide();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { ConfigurationSnapshot, DeviceConfigurationOperation } from '../repository.model';\nimport {\n  IManagedObject,\n  IOperation,\n  OperationService,\n  OperationStatus,\n  Realtime,\n  UserService\n} from '@c8y/client';\nimport { DeviceConfigurationService } from './device-configuration.service';\nimport { Subscription } from 'rxjs';\nimport { saveAs } from 'file-saver/FileSaver';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { SaveToRepositoryComponent } from './save-to-repository.component';\nimport { cloneDeep } from 'lodash-es';\nimport { AlertService, AppStateService } from '@c8y/ngx-components';\nimport { RepositoryService } from '../repository.service';\n\n@Component({\n  selector: 'c8y-device-configuration-preview',\n  templateUrl: './configuration-preview.component.html'\n})\nexport class ConfigurationPreviewComponent implements OnInit, OnDestroy {\n  @Input() device: IManagedObject;\n  @Input() set configurationType(type: string) {\n    this._configurationType = type;\n    this.setOperation(type);\n  }\n  get configurationType(): string {\n    return this._configurationType;\n  }\n  @Input() configSnapshot: ConfigurationSnapshot;\n  @Input() canSaveSnapshot: boolean;\n  @Input() actionButtonText: string;\n  @Input() actionButtonIcon: string;\n  @Input() isLegacy: boolean = false;\n  @Input() operationToTrigger:\n    | DeviceConfigurationOperation.UPLOAD_CONFIG\n    | DeviceConfigurationOperation.DOWNLOAD_CONFIG;\n\n  operation: IOperation;\n  canCallAction = true;\n  deviceConfigurationOperation = DeviceConfigurationOperation;\n  private _configurationType: string;\n  private operationsSubscription: Subscription;\n\n  constructor(\n    private deviceConfigurationService: DeviceConfigurationService,\n    private realtime: Realtime,\n    private bsModal: BsModalService,\n    private user: UserService,\n    private appState: AppStateService,\n    private repositoryService: RepositoryService,\n    private operationService: OperationService,\n    private alertService: AlertService\n  ) {}\n\n  async ngOnInit() {\n    this.setOperation(this._configurationType);\n    const operationsChannel = `/operations/${this.device.id}`;\n    this.operationsSubscription = this.realtime\n      .observable(operationsChannel)\n      .subscribe(({ data }) => {\n        this.updatePreview(data);\n      });\n    if (this.isLegacy) {\n      this.canCallAction = this.deviceConfigurationService.hasAnySupportedOperation(\n        this.device,\n        this.operationToTrigger\n      );\n    }\n  }\n\n  async setOperation(configType): Promise<void> {\n    const operationList = await this.repositoryService.getConfigFileOperationList(\n      this.device.id,\n      this.operationToTrigger\n    );\n\n    const operation = this.isLegacy\n      ? operationList.find(op => op[this.operationToTrigger] && !op[this.operationToTrigger].type)\n      : operationList.find(op => op[this.operationToTrigger].type === configType);\n\n    this.operation =\n      operation && operation.status !== OperationStatus.SUCCESSFUL ? operation : undefined;\n  }\n\n  async createDeviceOperation() {\n    let operationCfg;\n    if (this.operationToTrigger === DeviceConfigurationOperation.DOWNLOAD_CONFIG) {\n      operationCfg = this.repositoryService.getDownloadConfigurationFileOperation(\n        this.device,\n        this._configurationType,\n        this.configSnapshot,\n        this.isLegacy\n      );\n    }\n    if (this.operationToTrigger === DeviceConfigurationOperation.UPLOAD_CONFIG) {\n      operationCfg = this.repositoryService.getUploadConfigurationFileOperation(\n        this.device,\n        this._configurationType,\n        this.isLegacy\n      );\n    }\n    try {\n      this.operation = (await this.operationService.create(operationCfg)).data;\n    } catch (ex) {\n      this.alertService.addServerFailure(ex);\n    }\n  }\n\n  showOperation(): boolean {\n    if (this.operationToTrigger === DeviceConfigurationOperation.DOWNLOAD_CONFIG) {\n      return !!this.operation;\n    }\n    return (\n      this.operation &&\n      [OperationStatus.PENDING, OperationStatus.EXECUTING, OperationStatus.FAILED].includes(\n        this.operation.status\n      )\n    );\n  }\n\n  showBinary(): boolean {\n    if (this.operationToTrigger === DeviceConfigurationOperation.DOWNLOAD_CONFIG) {\n      return true;\n    }\n    return !this.showOperation();\n  }\n\n  isCreateOperationDisabled(): boolean {\n    return (\n      this.operation &&\n      [OperationStatus.PENDING, OperationStatus.EXECUTING].includes(this.operation.status)\n    );\n  }\n\n  updatePreview(operation: IOperation) {\n    if (\n      operation &&\n      operation[this.operationToTrigger] &&\n      (this.isLegacy ||\n        (operation[this.operationToTrigger].type &&\n          operation[this.operationToTrigger].type === this.configurationType))\n    ) {\n      this.operation = operation;\n      this.updateSnapshotsOnConfigUpload(operation);\n    }\n  }\n\n  download() {\n    const blob = new Blob([this.configSnapshot.binary], { type: this.configSnapshot.binaryType });\n    let fileName = this.configSnapshot.name;\n    switch (this.configSnapshot.binaryType) {\n      case 'text/csv':\n      case 'application/csv':\n        fileName = fileName.concat('.csv');\n        break;\n      case 'text/yaml':\n      case 'application/x-yaml':\n        fileName = fileName.concat('.yaml');\n        break;\n      case 'application/json':\n        fileName = fileName.concat('.json');\n        break;\n    }\n    saveAs(blob, fileName);\n  }\n\n  async saveToRepository() {\n    const initialState = {\n      configSnapshot: cloneDeep(this.configSnapshot)\n    };\n    const modal = this.bsModal.show(SaveToRepositoryComponent, {\n      class: 'modal-sm',\n      initialState,\n      ignoreBackdropClick: true\n    }).content as SaveToRepositoryComponent;\n    try {\n      await modal.result;\n      this.deviceConfigurationService.updateConfigurations(true);\n      modal.close();\n    } catch (ex) {\n      // do nothing\n    }\n  }\n\n  hasPermission(): boolean {\n    return this.user.hasAnyRole(this.appState.currentUser.value, [\n      'ROLE_INVENTORY_ADMIN',\n      'ROLE_INVENTORY_CREATE'\n    ]);\n  }\n\n  ngOnDestroy() {\n    this.operationsSubscription.unsubscribe();\n  }\n\n  private async updateSnapshotsOnConfigUpload(operation) {\n    if (\n      operation[DeviceConfigurationOperation.UPLOAD_CONFIG] &&\n      operation.status === OperationStatus.SUCCESSFUL\n    ) {\n      this.deviceConfigurationService.updateConfigurations();\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SupportedConfigurationItem } from '../repository.model';\n\n@Pipe({\n  name: 'configurationFilterPipe'\n})\nexport class ConfigurationFilterPipe implements PipeTransform {\n  transform(items: any[], filterTerm: string): any {\n    return filterTerm.trim().length === 0\n      ? items\n      : items.filter(\n          (item: SupportedConfigurationItem) =>\n            this.filterContainString(item.name, filterTerm) ||\n            this.filterContainString(item.deviceType, filterTerm)\n        );\n  }\n\n  private filterContainString(name: string, filterTerm: string) {\n    const term = filterTerm.toLowerCase().trim();\n    return name && name.toLowerCase().indexOf(term) > -1;\n  }\n}\n","import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { DeviceConfigurationService } from './device-configuration.service';\nimport { DeviceConfigurationOperation } from '../repository.model';\n\n@Injectable()\nexport class DeviceConfigurationGuard implements CanActivate {\n  constructor(private deviceConfigurationService: DeviceConfigurationService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const contextData = route.data.contextData || route.parent.data.contextData;\n    if (!contextData) {\n      return false;\n    }\n    return (\n      (contextData.c8y_SupportedConfigurations &&\n        contextData.c8y_SupportedConfigurations.length > 0) ||\n      this.deviceConfigurationService.hasAnySupportedOperation(contextData, [\n        DeviceConfigurationOperation.DOWNLOAD_CONFIG,\n        DeviceConfigurationOperation.UPLOAD_CONFIG\n      ])\n    );\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DeviceConfigurationListEmptyState, SupportedConfigurationItem } from '../repository.model';\n\n@Component({\n  selector: 'c8y-device-configuration-list',\n  templateUrl: './device-configuration-list.component.html'\n})\nexport class DeviceConfigurationListComponent {\n  @Input() items: SupportedConfigurationItem[];\n  @Input() itemIcon: string;\n  @Input() emptyState: DeviceConfigurationListEmptyState;\n  @Input() isFilterEnabled: boolean;\n  @Output() configSelected = new EventEmitter<string>();\n  selectedConfig;\n  filterTerm: string = '';\n\n  showConfigurationTypePreview(config): void {\n    this.selectedConfig = config;\n    this.configSelected.emit(config);\n  }\n\n  updatePipe(filterTerm: string) {\n    this.filterTerm = filterTerm;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  CoreModule,\n  FormsModule,\n  HOOK_NAVIGATOR_NODES,\n  HOOK_ONCE_ROUTE,\n  Route,\n  ViewContext,\n  gettext\n} from '@c8y/ngx-components';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { RepositoryService } from './repository.service';\nimport { FirmwareListComponent } from './firmware/firmware-list.component';\nimport { FirmwareDetailsComponent } from './firmware/firmware-details.component';\nimport { AddFirmwareModalComponent } from './firmware/add-firmware-modal.component';\nimport { AddFirmwarePatchModalComponent } from './firmware/add-firmware-patch-modal.component';\nimport { SoftwareListComponent } from './software/software-list.component';\nimport { SoftwareDetailsComponent } from './software/software-details.component';\nimport { AddSoftwareModalComponent } from './software/add-software-modal.component';\nimport { ConfigurationListComponent } from './configuration/configuration-list.component';\nimport { ConfigurationDetailComponent } from './configuration/configuration-detail.component';\nimport { RepositoryNavigationFactory } from './repository-navigation-factory';\nimport { FirmwareDeviceTabComponent } from './firmware-device-tab/firmware-device-tab.component';\nimport { FirmwareDeviceTabGuard } from './firmware-device-tab/firmware-device-tab.guard';\nimport { SoftwareDeviceTabComponent } from './software-device-tab/software-device-tab.component';\nimport { SoftwareDeviceTabGuard } from './software-device-tab/software-device-tab.guard';\nimport { InstalledSoftwareComponent } from './software-device-tab/installed-software.component';\nimport { RepositorySelectModalComponent } from './select-modal/repository-select-modal.component';\nimport { DeviceSoftwareListComponent } from './software-device-tab/device-software-list.component';\nimport { DeviceSoftwareChangesComponent } from './software-device-tab/device-software-changes.component';\nimport { DeviceConfigurationComponent } from './configuration-device-tab/device-configuration.component';\nimport { SourceCodePreviewComponent } from './configuration-device-tab/source-code-preview.component';\nimport { ConfigurationPreviewComponent } from './configuration-device-tab/configuration-preview.component';\nimport { ConfigurationFilterPipe } from './configuration-device-tab/configuration-filter.pipe';\nimport { SaveToRepositoryComponent } from './configuration-device-tab/save-to-repository.component';\nimport { DeviceConfigurationService } from './configuration-device-tab/device-configuration.service';\nimport { DeviceConfigurationGuard } from './configuration-device-tab/device-configuration.guard';\nimport { DeviceConfigurationListComponent } from './configuration-device-tab/device-configuration-list.component';\n\n@NgModule({\n  imports: [CoreModule, FormsModule, BsDropdownModule.forRoot(), TooltipModule, PopoverModule],\n  exports: [],\n  declarations: [\n    FirmwareListComponent,\n    FirmwareDetailsComponent,\n    AddFirmwareModalComponent,\n    AddFirmwarePatchModalComponent,\n    SoftwareListComponent,\n    SoftwareDetailsComponent,\n    AddSoftwareModalComponent,\n    FirmwareDeviceTabComponent,\n    SoftwareDeviceTabComponent,\n    InstalledSoftwareComponent,\n    RepositorySelectModalComponent,\n    DeviceSoftwareListComponent,\n    DeviceSoftwareChangesComponent,\n    ConfigurationListComponent,\n    ConfigurationDetailComponent,\n    DeviceConfigurationComponent,\n    DeviceConfigurationListComponent,\n    SourceCodePreviewComponent,\n    ConfigurationPreviewComponent,\n    ConfigurationFilterPipe,\n    SaveToRepositoryComponent\n  ],\n  entryComponents: [\n    FirmwareListComponent,\n    FirmwareDetailsComponent,\n    AddFirmwareModalComponent,\n    AddFirmwarePatchModalComponent,\n    SoftwareListComponent,\n    SoftwareDetailsComponent,\n    AddSoftwareModalComponent,\n    FirmwareDeviceTabComponent,\n    SoftwareDeviceTabComponent,\n    DeviceSoftwareListComponent,\n    RepositorySelectModalComponent,\n    DeviceSoftwareChangesComponent,\n    ConfigurationListComponent,\n    ConfigurationDetailComponent,\n    DeviceConfigurationComponent,\n    SaveToRepositoryComponent\n  ],\n  providers: [\n    RepositoryService,\n    DeviceConfigurationService,\n    FirmwareDeviceTabGuard,\n    SoftwareDeviceTabGuard,\n    DeviceConfigurationGuard,\n    {\n      provide: HOOK_NAVIGATOR_NODES,\n      useClass: RepositoryNavigationFactory,\n      multi: true\n    },\n    {\n      provide: HOOK_ONCE_ROUTE,\n      useValue: [\n        {\n          path: 'firmware',\n          component: FirmwareListComponent\n        },\n        {\n          path: 'firmware/:id',\n          component: FirmwareDetailsComponent\n        },\n        {\n          context: ViewContext.Device,\n          path: 'firmware',\n          component: FirmwareDeviceTabComponent,\n          label: gettext('Firmware'),\n          icon: 'c8y-firmware',\n          priority: 500,\n          canActivate: [FirmwareDeviceTabGuard]\n        },\n        {\n          path: 'software',\n          component: SoftwareListComponent\n        },\n        {\n          path: 'software/:id',\n          component: SoftwareDetailsComponent\n        },\n        {\n          context: ViewContext.Device,\n          path: 'software',\n          component: SoftwareDeviceTabComponent,\n          label: gettext('Software'),\n          icon: 'c8y-tools',\n          priority: 499,\n          canActivate: [SoftwareDeviceTabGuard]\n        },\n        {\n          path: 'configuration',\n          component: ConfigurationListComponent\n        },\n        {\n          context: ViewContext.Device,\n          path: 'device-configuration',\n          component: DeviceConfigurationComponent,\n          label: gettext('Configuration'),\n          icon: 'gears',\n          priority: 600,\n          canActivate: [DeviceConfigurationGuard]\n        }\n      ] as Route[],\n      multi: true\n    }\n  ]\n})\nexport class RepositoryModule {}\n"]}