{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@c8y/ngx-components/operations/bulk/bulk-operation.model.ts","ng://@c8y/ngx-components/operations/bulk/modal/bulk-operations-modal.component.ts","ng://@c8y/ngx-components/operations/bulk/bulk-operations.service.ts","ng://@c8y/ngx-components/operations/bulk/creation/bulk-operations-stepper-container.component.ts","ng://@c8y/ngx-components/operations/bulk/list/bulk-operation-details.component.ts","ng://@c8y/ngx-components/operations/bulk/list/bulk-operation-wrapper.component.ts","ng://@c8y/ngx-components/operations/bulk/list/bulk-operation-details.service.ts","ng://@c8y/ngx-components/operations/bulk/modal/bulk-operations-reschedule-modal.component.ts","ng://@c8y/ngx-components/operations/bulk/list/bulk-operation-list-item.model.ts","ng://@c8y/ngx-components/operations/bulk/list/bulk-operation-list-item.component.ts","ng://@c8y/ngx-components/operations/bulk/list/bulk-operations-list.component.ts","ng://@c8y/ngx-components/operations/bulk/list/type-list/bulk-operation-type-list.component.ts","ng://@c8y/ngx-components/operations/details/operation-details.component.ts","ng://@c8y/ngx-components/operations/bulk/custom-step.directive.ts","ng://@c8y/ngx-components/operations/bulk/creation/bulk-operation-stepper.component.ts","ng://@c8y/ngx-components/operations/bulk/base-stepper.component.ts","ng://@c8y/ngx-components/operations/bulk/create-from-single/bulk-operation-from-single.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/device-profile-update-stepper/confirm-device-profile-selection-step.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/device-profile-update-stepper/select-device-profile-step.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/firmware-update-stepper/select-firmware.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/firmware-update-stepper/version-or-patch.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/software-update-stepper/confirm-software-selection-step.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/software-update-stepper/select-software-step.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/stepper-bulk-type-configuration.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/stepper-bulk-type-device-profile.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/stepper-bulk-type-firmware.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/stepper-bulk-type-software.component.ts","ng://@c8y/ngx-components/operations/bulk/list/bulk-operation-details-tabs.component.ts","ng://@c8y/ngx-components/operations/bulk/list/single-operation-item.model.ts","ng://@c8y/ngx-components/operations/bulk/list/single-operation-item.component.ts","ng://@c8y/ngx-components/operations/status-filter/status-filter.component.ts","ng://@c8y/ngx-components/operations/bulk/list/single-operations-list.component.ts","ng://@c8y/ngx-components/operations/device-selector/device-selector.component.ts","ng://@c8y/ngx-components/operations/factories/tabs.factory.ts","ng://@c8y/ngx-components/operations/scheduler/operation-scheduler.component.ts","ng://@c8y/ngx-components/operations/summary/operation-summary.component.ts","ng://@c8y/ngx-components/operations/operations.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","BulkOperationType","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__read","o","m","ar","error","BulkOperationsModalComponent","bsModalRef","resolver","showComponent","cancel","hide","createComponent","item","component","factory","resolveComponentFactory","container","BsModalRef","ComponentFactoryResolver","tslib_1.__decorate","ViewChild","static","read","ViewContainerRef","Component","selector","template","baseUrl","HOOK_LIST_BULK_TYPE","InjectionToken","C8Y_BULK_TYPES","type","CONFIGURATION","c8yIcon","name","gettext","path","undefined","fragments","selected","FIRMWARE","SOFTWARE","DEVICE_PROFILE","flattened","current","concat","C8Y_BULK_TYPE_FRAGMENTS","reduce","Éµ0","BulkOperationsService","operationBulkService","operationService","inventoryService","bsModalService","location","bulkTypes","DD_LOW_COUNT","firmwareId","Subject","map","isUndefined","paramIndex","decorator","getBulkOperations","customFilter","filter","withTotalPages","withDeleted","pageSize","list","getBulkOperationById","bulkOperationId","detail","createBulkOperation","bulkOperation","deleteBulkOperation","delete","updateBulkOperation","update","getOperation","id","showNewBulkOperationModal","show","backdrop","class","hideNewBulkOperationModal","returnToBulkOperationOverview","back","setBulkTypes","getBulkTypes","setFirmwareId","createGroup","deviceQueryDataString","dynamicGroup","c8y_IsDynamicGroup","invisible","c8y_DeviceQueryString","scheduleBulkOperation","deviceQueryString","details","_a","groupId","data","operationPrototype","creationRamp","schedule","delayInSeconds","startDate","scheduledDate","toISOString","note","getSingleOperationsByStatus","status","toUpperCase","createSingleOperation","operation","updateSingleOperation","partialUpdateObject","getManagedObject","deviceId","retrieveBulkOperationType","some","fragment","has","OperationBulkService","OperationService","InventoryService","BsModalService","Location","Inject","args","Injectable","tslib_1.__param","BulkOperationsStepperContainerComponent","activatedRoute","bulkOpsService","changeDetector","ngOnInit","_this","params","subscribe","bulkOperationType","find","element","includes","detectChanges","ActivatedRoute","ChangeDetectorRef","BulkOperationDetailsComponent","allFilterIsSelected","readOnly","showFailedOperation","EventEmitter","scrollToRetriedFromOperation","failedOperationId","emit","Input","Output","BulkOperationWrapperComponent","bulkOperationDetailsService","modalRef","BulkOperationDetailsService","bulkOperationsService","modalService","openDetails","initialState","BulkOperationsRescheduleModalComponent","alert","closeSubject","modalTitle","getTitle","onDateAndDelaySelect","$event","dateAndDelay","isRetryOperation","onCancel","onSave","newBulkOperation","success","addServerFailure","er_1","er_2","AlertService","BULK_OPERATION_STATUS_LABELS","SCHEDULED","EXECUTING","CANCELED","FAILED","SUCCESSFUL","BULK_OPERATION_STATUS_OPTIONS","generalStatus","OperationBulkGeneralStatus","iconClass","EXECUTING_WITH_ERROR","BulkOperationListItemComponent","modal","detailsCollapsed","reload","refreshLoading","bulkOperationGeneralStatus","bulkOperationStatusOptions","finishDatePopoverText","progressBarClass","progressBarStatus","getIconClass","finishDate","calculateFinishDateMs","setProgressBar","ngOnChanges","changes","firstChange","statusOption","Date","getTime","progress","all","progressBarProgressFn","successful","failed","staticContentOfClass","progressBarState","progressBarColor","editSchedule","modalOptions","cloneDeep","cancelBulkOperation","confirm","Status","DANGER","retryFailedOperation","clonedBulk","failedParentId","content","setToSuccessful","openFailedOperation","isStatusScheduled","isStatusExecutingOrExecutingWithError","isStatusCanceled","isStatusFailed","ModalService","BulkOperationsListComponent","realtime","selectedTypeFilters","getTypeFilters","statusFilter$","BehaviorSubject","typeFilter$","timeFilter$","reload$","bulkOperations$","combineLatest","pipe","tap","switchMap","_b","statusFilters","timeFilters","withLatestFrom","typeFilter","filterPipe","filterByType","shareReplay","allFilterFragments","flattenFilterFragments","bulkOperations","flattenedFragments","every","keys","resetFilter","datePicker","clearFilter","statusFilter","statusOptions","option","isFilterApplied","getValue","timeFilter","flatten","time","dateFrom","dateTo","addBulkOperation","listItems","forEach","listItem","collapsed","nativeElement","scrollIntoView","behavior","block","compareOperations","operationA","operationB","filters","OperationBulkRealtimeService","ViewChildren","DatePickerComponent","providers","BulkOperationTypeListComponent","router","onCustomType","bulkList","handleClick","navigateByUrl","Router","OperationDetailsComponent","formBuilder","titlePlaceholder","descriptionPlaceholder","placeholders","title","description","get","config","Validators","required","fgOperationDescription","group","FormBuilder","CustomStep","templateRef","buttonsDisabled","onNext","stepper","completed","TemplateRef","Directive","BulkOperationStepper","bulkOperationService","selectionChange","steps","showStepper","showButtons","stepperButtonsLabels","custom","deviceTypesSubject$","endSubscriptions","deviceTypes$","asObservable","ngAfterViewInit","setTimeout","customSteps","toArray","takeUntil","event","operationDetailsForm","operationDetailsComponent","changeDeviceTypes","deviceTypes","isArray","confirmDeviceSelection","WARNING","ok","_e","retrieveOperationDetails","operationDetails","_c","_d","patchValue","close","pendingStatus","ex_2","ngOnDestroy","complete","reset","ContentChildren","C8yStepper","BaseStepperComponent","stepData","operationStepper","retrieveOperationPrototype","bind","onSelectionChange","selectedIndex","previouslySelectedIndex","getStepDataKeyByIndex","index","BulkOperationFromSingleComponent","_super","tslib_1.__extends","snapshot","operationId","ConfirmDeviceProfileSelectionStepComponent","translate","DEVICE_TYPE_NOT_DEFINED","selectedDeviceProfile","getDeviceTypeTitle","deviceProfile","instant","TranslateService","SelectDeviceProfileStepComponent","deviceProfileService","textFilter$","deviceType$","selectedDeviceType","deviceProfile$","deviceType","getDeviceProfiles","loadDeviceTypes","deviceTypeSubscription","debounceTime","distinctUntilChanged","searchStr","query","c8y_Filter.type","from","uniqWith","val","c8y_Filter","isEqual","unsubscribe","selectDeviceProfile","DeviceProfileService","SelectFirmwareComponent","repositoryService","firmware","elementCount","firmwares$","text","getFirmwares","resp","isLegacy","isLegacyEntry","DEVICE_TYPE_NOT_AVAILABLE","DESCRIPTION_NOT_AVAILABLE","selectFirmware","fw","getBaseVersionsCount$","getDescriptionTitle","partialName","listRepositoryEntries","RepositoryType","RepositoryService","memoize","property","VersionOrPatchComponent","versionOrPatch","firmware$","detail$","catchError","of","baseVersions$","distinctUntilKeyChanged","listBaseVersions","isLegacy$","expanded","getBinaryName$","binaryUrl","getBaseVersionAndPatches$","baseVersion","listBaseVersionAndPatches","getPatchVersionsCount$","selectVersionOrPatch","ConfirmSoftwareSelectionStepComponent","selectedItems","join","software","action","uniq","SelectSoftwareStepComponent","software$","getSoftware","NO_DEVICE_TYPE_AVAILABLE","getVersions","listAllVersions","resetSelection","radioButtons","radio","selectSoftware","selectedId","emitSoftware","emitData","version","__or","__not","__has","ListItemRadioComponent","StepperBulkTypeConfiguration","configType$","configTypes","selectedConfigType","configurations$","configType","getConfiguration","loadConfigurationTypes","configTypeSubscription","configurationType","selectConfiguration","configuration","selectedConfiguration","goToSecondStep","getConfigBinary","url","getBinaryText","allowExternal","binary","c8y_DownloadConfigFile","StepperBulkTypeDeviceProfile","goToConfirmSelection","onDeviceProfileSelected","selectedItem","profileId","profileName","c8y_DeviceProfile","StepperFirmware","descriptionTemplate","goToVersionOrPatchStep","selectedFirmware","onVersionOrPatchSelected","onFirmwareSelected","subscription","selectedVersionOrPatch","c8y_Firmware","c8y_Patch","isPatch","dependency","StepperBulkTypeSoftware","descriptionTemplateSingle","descriptionTemplateOneOther","descriptionTemplateMultiple","selectedSoftware","onSoftwareSelected","confirmSoftwareSelection","getUniqueDeviceTypes","softwareList","c8y_Software","interpolationParams","count","c8y_SoftwareUpdate","BulkOperationDetailsTabsComponent","onRetryFailedOperations","tabs","detailsTemplate","icon","auditTemplate","SINGLE_OP_STATUS_NAMES","PENDING","ALL","SINGLE_OP_STATUS_PROPERTIES","SingleOperationItemComponent","alertService","device","showIfTextTruncated","singleOperationStatusNames","singleOperationsStatusProperties","getDeviceMO","isTextTruncated","retrySingleOperation","singleOperation","operationToCreate","omit","operationProperties","inventoryMO","failureReason","el","failureReasonRef","offsetWidth","scrollWidth","StatusFilterComponent","onFilterChanged","isAllButtonSelected","options","multiple","coerceBooleanProperty","small","changeFilter","emitNeeded","emitSelectedOptions","removeFilter","preset","firstSelected","include","activeFilters","HostBinding","host","SingleOperationsListComponent","singleOperationStatusProperties","filterOperationsByType","getFilterTypeOfSingleOperations","pending","executing","getOperationsByStatus","singleOperations","retryBulkOperation","DeviceSelectorComponent","typeColumn","TypeDeviceGridColumn","onDeviceQueryStringChange","columns","StatusDeviceGridColumn","NameDeviceGridColumn","ModelDeviceGridColumn","GroupDeviceGridColumn","RegistrationDateDeviceGridColumn","AlarmsDeviceGridColumn","unsubscribe$","types","deviceGrid","updateFiltering","FilteringActionType","ApplyFilter","ResetFilter","payload","filteringModifier","externalFilterQuery","DeviceGridComponent","TabsFactory","match","priority","orientation","OperationSchedulerComponent","placeholder","delayErrors","pickerErrors","DELAY_SECONDS_DEFAULT","DELAY_MILLISECONDS_DEFAULT","MINUTES_AHEAD_DEFAULT","delaySeconds","delayMilliseconds","minutesAhead","currentUnit","minutes","seconds","milliseconds","minDate","initialDate","setMinutes","getMinutes","minDelay","fgOperationScheduler","picker","dateValidation","timeValidation","delay","min","unit","valueChanges$","valueChanges","throttleTime","controls","errors","convertDelayHandler","closed","writeValue","registerOnChange","fn","onChange","registerOnTouched","onTouched","setDisabledState","isDisabled","disable","enable","validate","invalid","registerOnValidatorChange","onValidatorChanged","markAsTouched","convertDelay","setValidators","updateValueAndValidity","combineDateAndTime","date","getFullYear","getMonth","getDate","getHours","fControl","parent","setValue","setErrors","isEmpty","OperationSchedulerComponent_1","provide","NG_VALUE_ACCESSOR","multi","useExisting","forwardRef","NG_VALIDATORS","OperationSummaryComponent","deviceCount","displayDeviceCount","q","currentPage","paging","totalPages","routes","redirectTo","pathMatch","OperationsModule","NgModule","declarations","imports","CoreModule","FormsModule","ReactiveFormsModule","RouterModule","forRoot","useHash","TooltipModule","PopoverModule","CollapseModule","BsDropdownModule","BsDatepickerModule","TimepickerModule","RepositoryModule","DeviceProfileModule","DeviceGridModule","exports","HOOK_TABS","useClass","useValue","Éµ0$1","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum BulkOperationType {\n  SOFTWARE = 'software',\n  FIRMWARE = 'firmware',\n  CONFIGURATION = 'configuration',\n  DEVICE_PROFILE = 'device-profile'\n}\n","import { Component, ViewContainerRef, ViewChild, ComponentFactoryResolver } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap';\nimport { OperationType } from '../list/type-list/operation-type.model';\n\n@Component({\n  selector: 'c8y-bulk-operations-modal',\n  templateUrl: 'bulk-operations-modal.component.html'\n})\nexport class BulkOperationsModalComponent {\n  @ViewChild('container', { static: false, read: ViewContainerRef }) container;\n  showComponent: boolean = false;\n  constructor(private bsModalRef: BsModalRef, private resolver: ComponentFactoryResolver) {}\n\n  cancel() {\n    this.bsModalRef.hide();\n  }\n\n  createComponent(item: OperationType) {\n    if (item && item.component) {\n      this.showComponent = true;\n      const factory = this.resolver.resolveComponentFactory(item.component);\n      this.container.createComponent(factory);\n    }\n  }\n}\n","import { Location } from '@angular/common';\nimport { Inject, Injectable, InjectionToken } from '@angular/core';\nimport {\n  IdReference,\n  IManagedObject,\n  InventoryService,\n  IOperation,\n  IOperationBulk,\n  IResult,\n  OperationBulkService,\n  OperationService\n} from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\nimport { has, isUndefined } from 'lodash-es';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { BulkOperationType } from './bulk-operation.model';\nimport { IStatusOption } from '../status-filter/status-option.model';\nimport { OperationType } from './list/type-list/operation-type.model';\nimport { BulkOperationsModalComponent } from './modal/bulk-operations-modal.component';\nimport { OperationDetails } from './operation-details.model';\n\nexport const baseUrl = 'devicecontrol/bulk/creation/';\nexport const HOOK_LIST_BULK_TYPE = new InjectionToken<OperationType[]>('LIST_BULK_TYPE');\nexport const C8Y_BULK_TYPES: OperationType[] = [\n  {\n    type: BulkOperationType.CONFIGURATION,\n    c8yIcon: 'cogs',\n    name: gettext('Configuration update'),\n    path: `${baseUrl}configuration`,\n    component: undefined,\n    fragments: ['c8y_DownloadConfigFile', 'c8y_Configuration'],\n    selected: false\n  },\n  {\n    type: BulkOperationType.FIRMWARE,\n    c8yIcon: 'c8y-firmware',\n    name: gettext('Firmware update'),\n    path: `${baseUrl}firmware`,\n    component: undefined,\n    fragments: ['c8y_Firmware'],\n    selected: false\n  },\n  {\n    type: BulkOperationType.SOFTWARE,\n    c8yIcon: 'c8y-tools',\n    name: gettext('Software update'),\n    path: `${baseUrl}software`,\n    component: undefined,\n    fragments: ['c8y_SoftwareList', 'c8y_SoftwareUpdate'],\n    selected: false\n  },\n  {\n    type: BulkOperationType.DEVICE_PROFILE,\n    c8yIcon: 'c8y-device-profile',\n    name: gettext('Apply device profile'),\n    path: `${baseUrl}device-profile`,\n    component: undefined,\n    fragments: ['c8y_DeviceProfile'],\n    selected: false\n  }\n];\nexport const C8Y_BULK_TYPE_FRAGMENTS: string[] = C8Y_BULK_TYPES.reduce(\n  (flattened, current) => flattened.concat(current.fragments),\n  []\n);\n\n@Injectable()\nexport class BulkOperationsService {\n  readonly DD_LOW_COUNT: number = 10;\n  firmwareId: Subject<IdReference> = new Subject<IdReference>();\n\n  private bsModalRef: BsModalRef;\n  constructor(\n    private operationBulkService: OperationBulkService,\n    private operationService: OperationService,\n    private inventoryService: InventoryService,\n    private bsModalService: BsModalService,\n    private location: Location,\n\n    @Inject(HOOK_LIST_BULK_TYPE) private bulkTypes: OperationType[]\n  ) {\n    if (bulkTypes && bulkTypes.length > 0) {\n      this.bulkTypes = bulkTypes.map(type => {\n        if (isUndefined(type.selected)) {\n          type.selected = false;\n        }\n        return type;\n      });\n    }\n  }\n\n  getBulkOperations(customFilter = {}) {\n    const filter = {\n      withTotalPages: true,\n      withDeleted: true,\n      pageSize: 50,\n      ...customFilter\n    };\n\n    return this.operationBulkService.list(filter);\n  }\n\n  getBulkOperationById(bulkOperationId: string | number) {\n    return this.operationBulkService.detail(bulkOperationId);\n  }\n\n  createBulkOperation(bulkOperation: Partial<IOperationBulk>) {\n    return this.operationBulkService.create(bulkOperation);\n  }\n\n  deleteBulkOperation(bulkOperationId) {\n    return this.operationBulkService.delete(bulkOperationId);\n  }\n\n  updateBulkOperation(bulkOperation: Partial<IOperationBulk>) {\n    return this.operationBulkService.update(bulkOperation);\n  }\n\n  getOperation(id: string): Promise<IResult<IOperation>> {\n    return this.operationService.detail(id);\n  }\n\n  showNewBulkOperationModal() {\n    this.bsModalRef = this.bsModalService.show(BulkOperationsModalComponent, {\n      backdrop: 'static',\n      class: 'modal-sm'\n    });\n  }\n\n  hideNewBulkOperationModal() {\n    if (this.bsModalRef) {\n      this.bsModalRef.hide();\n    }\n  }\n\n  returnToBulkOperationOverview() {\n    this.location.back();\n  }\n\n  setBulkTypes(list: OperationType[]) {\n    this.bulkTypes = list;\n  }\n\n  getBulkTypes(): OperationType[] {\n    return this.bulkTypes;\n  }\n\n  setFirmwareId(id: IdReference) {\n    this.firmwareId.next(id);\n  }\n\n  createGroup(deviceQueryDataString: string) {\n    const dynamicGroup: Partial<IManagedObject> = {\n      name: 'Bulk operations group',\n      type: 'c8y_DynamicGroup',\n      c8y_IsDynamicGroup: { invisible: {} },\n      c8y_DeviceQueryString: deviceQueryDataString\n    };\n\n    return this.inventoryService.create(dynamicGroup);\n  }\n\n  async scheduleBulkOperation(deviceQueryString: string, details: OperationDetails) {\n    const dynamicGroup = await this.createGroup(deviceQueryString);\n\n    const bulkOperation: IOperationBulk = {\n      groupId: dynamicGroup.data.id,\n      operationPrototype: details.prototype,\n      creationRamp: details.schedule.delayInSeconds,\n      startDate: details.schedule.scheduledDate.toISOString(),\n      note: details.note\n    };\n\n    await this.createBulkOperation(bulkOperation);\n  }\n\n  getSingleOperationsByStatus(status, bulkOperationId) {\n    const filter = {\n      withTotalPages: true,\n      bulkOperationId,\n      status: (status && status.toUpperCase()) || ''\n    };\n\n    return this.operationService.list(filter);\n  }\n\n  createSingleOperation(operation: IOperation) {\n    return this.operationService.create(operation);\n  }\n\n  updateSingleOperation(partialUpdateObject: Partial<IOperation>) {\n    return this.operationService.update(partialUpdateObject);\n  }\n\n  getManagedObject(deviceId: IdReference) {\n    return this.inventoryService.detail(deviceId);\n  }\n\n  retrieveBulkOperationType(operation: IOperation): BulkOperationType {\n    let type: BulkOperationType;\n\n    C8Y_BULK_TYPES.some(t => {\n      if (t.fragments.some(fragment => has(operation, fragment))) {\n        type = t.type;\n        return true;\n      }\n    });\n\n    return type;\n  }\n}\n","import {\n  Component,\n  OnInit,\n  ViewContainerRef,\n  ViewChild,\n  ComponentFactoryResolver,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BulkOperationsService } from '../bulk-operations.service';\n\n@Component({\n  selector: 'bulk-operations-stepper-container',\n  templateUrl: 'bulk-operations-stepper-container.component.html'\n})\nexport class BulkOperationsStepperContainerComponent implements OnInit {\n  @ViewChild('container', { static: false, read: ViewContainerRef }) container;\n  bulkOperationType: string;\n\n  private component: any;\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private bulkOpsService: BulkOperationsService,\n    private resolver: ComponentFactoryResolver,\n    private changeDetector: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.activatedRoute.params.subscribe(params => {\n      if (params && params.type) {\n        this.bulkOperationType = params.type;\n\n        this.component = this.bulkOpsService\n          .getBulkTypes()\n          .find(element => element.path.includes(this.bulkOperationType)).component;\n\n        this.changeDetector.detectChanges();\n        this.createComponent(this.component);\n      }\n    });\n  }\n\n  private createComponent(component) {\n    if (component) {\n      const factory = this.resolver.resolveComponentFactory(component);\n      this.container.createComponent(factory);\n    }\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { IManagedObject, IOperationBulk } from '@c8y/client';\n\n@Component({\n  selector: 'c8y-bulk-operation-details',\n  templateUrl: './bulk-operation-details.component.html'\n})\nexport class BulkOperationDetailsComponent {\n  allFilterIsSelected: boolean = false;\n  collapsed: boolean;\n  device: IManagedObject;\n\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  readOnly: boolean = false;\n  @Output() showFailedOperation: EventEmitter<number> = new EventEmitter();\n\n  scrollToRetriedFromOperation(failedOperationId) {\n    this.showFailedOperation.emit(failedOperationId);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BulkOperationDetailsService } from './bulk-operation-details.service';\n\n@Component({\n  selector: 'c8y-bulk-operations-wrapper',\n  templateUrl: './bulk-operation-wrapper.component.html'\n})\nexport class BulkOperationWrapperComponent {\n  @Input() bulkOperation: Partial<IOperationBulk>;\n\n  constructor(\n    public bulkOperationDetailsService: BulkOperationDetailsService,\n    public modalRef: BsModalRef\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BulkOperationsService } from '../bulk-operations.service';\nimport { BulkOperationWrapperComponent } from './bulk-operation-wrapper.component';\n\n@Injectable()\nexport class BulkOperationDetailsService {\n  constructor(\n    private bulkOperationsService: BulkOperationsService,\n    private modalService: BsModalService\n  ) {}\n\n  async openDetails(bulkOperationId) {\n    const bulkOperation: IOperationBulk = (await this.bulkOperationsService.getBulkOperationById(\n      bulkOperationId\n    )).data;\n    const initialState = { bulkOperation };\n    this.modalService.show(BulkOperationWrapperComponent, {\n      initialState,\n      class: 'modal-lg'\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { BsModalRef } from 'ngx-bootstrap';\nimport { Subject } from 'rxjs';\nimport { OperationSchedule } from '../../scheduler/operation-schedule.interface';\nimport { BulkOperationsService } from '../bulk-operations.service';\n@Component({\n  selector: 'c8y-bulk-operations-reschedule-modal',\n  templateUrl: 'bulk-operations-reschedule-modal.component.html'\n})\nexport class BulkOperationsRescheduleModalComponent implements OnInit {\n  closeSubject: Subject<IOperationBulk> = new Subject();\n  dateAndDelay: OperationSchedule;\n  bulkOperation: Partial<IOperationBulk>;\n  isRetryOperation: boolean;\n  modalTitle: string;\n\n  constructor(\n    public bsModalRef: BsModalRef,\n    private bulkOperationsService: BulkOperationsService,\n    private alert: AlertService\n  ) {}\n\n  ngOnInit() {\n    this.modalTitle = this.getTitle();\n  }\n\n  onDateAndDelaySelect($event) {\n    this.dateAndDelay = $event;\n  }\n\n  getTitle() {\n    return this.isRetryOperation ? gettext('Retry operation') : gettext('Edit schedule');\n  }\n\n  onCancel() {\n    this.bsModalRef.hide();\n  }\n\n  async onSave() {\n    let newBulkOperation;\n    this.bulkOperation.startDate = this.dateAndDelay.scheduledDate.toISOString();\n    this.bulkOperation.creationRamp = this.dateAndDelay.delayInSeconds;\n\n    if (this.isRetryOperation) {\n      try {\n        newBulkOperation = await this.bulkOperationsService.createBulkOperation(this.bulkOperation);\n        this.alert.success(gettext('Successfully rescheduled for a retry.'));\n      } catch (er) {\n        this.alert.addServerFailure(er);\n      }\n    } else {\n      try {\n        newBulkOperation = await this.bulkOperationsService.updateBulkOperation(this.bulkOperation);\n        this.alert.success(gettext('Successfully rescheduled.'));\n      } catch (er) {\n        this.alert.addServerFailure(er);\n      }\n    }\n\n    // send back to component from which modal was called\n    this.closeSubject.next(newBulkOperation.data);\n    this.bsModalRef.hide();\n  }\n}\n","import { OperationBulkGeneralStatus } from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\nimport { IStatusOption } from '../../status-filter/status-option.model';\n\nexport const BULK_OPERATION_STATUS_LABELS = {\n  SCHEDULED: gettext('Scheduled'),\n  EXECUTING: gettext('Executing'),\n  CANCELED: gettext('Canceled'),\n  FAILED: gettext('Completed with failures'),\n  SUCCESSFUL: gettext('Completed successfully')\n};\n\nexport const BULK_OPERATION_STATUS_OPTIONS: IStatusOption[] = [\n  {\n    label: BULK_OPERATION_STATUS_LABELS.SCHEDULED,\n    generalStatus: [OperationBulkGeneralStatus.SCHEDULED],\n    iconClass: 'fa fa-calendar text-info'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.EXECUTING,\n    generalStatus: [\n      OperationBulkGeneralStatus.EXECUTING,\n      OperationBulkGeneralStatus.EXECUTING_WITH_ERROR\n    ],\n    iconClass: 'fa fa-refresh text-primary'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.CANCELED,\n    generalStatus: [OperationBulkGeneralStatus.CANCELED],\n    iconClass: 'fa fa-ban text-muted'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.FAILED,\n    generalStatus: [OperationBulkGeneralStatus.FAILED],\n    iconClass: 'fa fa-exclamation-triangle text-danger'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.SUCCESSFUL,\n    generalStatus: [OperationBulkGeneralStatus.SUCCESSFUL],\n    iconClass: 'fa fa-check text-success'\n  }\n];\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { IOperationBulk, OperationBulkGeneralStatus } from '@c8y/client';\nimport {\n  AlertService,\n  gettext,\n  ListItemComponent,\n  ModalService,\n  Status\n} from '@c8y/ngx-components';\nimport { assign, cloneDeep } from 'lodash-es';\nimport { BsModalRef, BsModalService, ModalOptions } from 'ngx-bootstrap/modal';\nimport { BulkOperationsService } from '../bulk-operations.service';\nimport { BulkOperationsRescheduleModalComponent } from '../modal/bulk-operations-reschedule-modal.component';\nimport { BULK_OPERATION_STATUS_OPTIONS } from './bulk-operation-list-item.model';\n\n@Component({\n  selector: 'c8y-bulk-operation-list-item',\n  templateUrl: './bulk-operation-list-item.component.html'\n})\nexport class BulkOperationListItemComponent implements OnInit, OnChanges {\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  detailsCollapsed: boolean = true;\n  @Input()\n  readOnly: boolean = false;\n  @Output() showFailedOperation = new EventEmitter();\n  @Output() reload: EventEmitter<any> = new EventEmitter();\n  @ViewChild('listItem', { static: true }) listItem: ListItemComponent;\n  iconClass: string;\n  finishDate: number;\n  refreshLoading = false;\n  bulkOperationGeneralStatus = OperationBulkGeneralStatus;\n  bulkOperationStatusOptions = BULK_OPERATION_STATUS_OPTIONS;\n  bsModalRef: BsModalRef;\n  finishDatePopoverText: string = gettext(\n    'Approximate date, estimated based on the bulk operation settings.'\n  );\n  progressBarClass: string = 'progress';\n  progressBarColor: string;\n  progressBarStatus: number = 0;\n\n  constructor(\n    private bulkOperationsService: BulkOperationsService,\n    private modal: ModalService,\n    private alert: AlertService,\n    private bsModalService: BsModalService\n  ) {}\n\n  ngOnInit() {\n    this.iconClass = this.getIconClass();\n    this.finishDate = this.calculateFinishDateMs();\n    this.setProgressBar();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.bulkOperation && !changes.bulkOperation.firstChange) {\n      this.iconClass = this.getIconClass();\n      this.setProgressBar();\n    }\n  }\n\n  getIconClass() {\n    return this.bulkOperationStatusOptions.find(statusOption =>\n      statusOption.generalStatus.includes(this.bulkOperation.generalStatus)\n    ).iconClass;\n  }\n\n  calculateFinishDateMs(): number {\n    const startDateMs: number = new Date(this.bulkOperation.startDate).getTime();\n    const creationRampMs: number = this.bulkOperation.creationRamp * 1000;\n\n    return startDateMs + creationRampMs * this.bulkOperation.progress.all;\n  }\n\n  progressBarProgressFn() {\n    return (\n      ((this.bulkOperation.progress.successful + this.bulkOperation.progress.failed) /\n        this.bulkOperation.progress.all) *\n      100\n    );\n  }\n\n  setProgressBar() {\n    const staticContentOfClass = 'progress-bar progress-striped active progress-bar';\n\n    const progressBarState = {\n      EXECUTING: {\n        progressBarClass: 'progress progress-striped active',\n        progressBarColor: `${staticContentOfClass}-primary`,\n        progressBarStatus: this.progressBarProgressFn()\n      },\n      EXECUTING_WITH_ERROR: {\n        progressBarClass: 'progress progress-striped active',\n        progressBarColor: `${staticContentOfClass}-danger`,\n        progressBarStatus: this.progressBarProgressFn()\n      },\n      FAILED: {\n        progressBarClass: 'progress',\n        progressBarColor: `${staticContentOfClass}-danger`,\n        progressBarStatus: 100\n      },\n      SUCCESSFUL: {\n        progressBarClass: 'progress',\n        progressBarColor: `${staticContentOfClass}-success`,\n        progressBarStatus: 100\n      }\n    };\n\n    assign(this, progressBarState[this.bulkOperation.generalStatus]);\n  }\n\n  editSchedule() {\n    const rescheduledOperation = cloneDeep(this.bulkOperation);\n    const initialState = {\n      bulkOperation: rescheduledOperation\n    };\n    const modalOptions = { initialState, class: 'modal-sm', backdrop: 'static' } as ModalOptions;\n    this.bsModalRef = this.bsModalService.show(\n      BulkOperationsRescheduleModalComponent,\n      modalOptions\n    );\n  }\n\n  async cancelBulkOperation() {\n    try {\n      await this.modal.confirm(\n        gettext('Cancel bulk operation'),\n        gettext('You are about to cancel the bulk operation. Do you want to proceed?'),\n        Status.DANGER\n      );\n      await this.bulkOperationsService.deleteBulkOperation(this.bulkOperation.id);\n      this.reload.emit();\n      this.alert.success(gettext('Operation canceled.'));\n    } catch (er) {\n      this.alert.addServerFailure(er);\n    }\n  }\n\n  retryFailedOperation() {\n    const clonedBulk = cloneDeep(this.bulkOperation);\n\n    // change the id to failedparentId similar to the logic in deviceBulkControl.service.js\n    delete clonedBulk.groupId;\n    clonedBulk.failedParentId = this.bulkOperation.id;\n\n    // show reschdedule modal:\n    const initialState = {\n      bulkOperation: clonedBulk,\n      isRetryOperation: true\n    };\n    const modalOptions = { initialState, class: 'modal-sm', backdrop: 'static' } as ModalOptions;\n    this.bsModalRef = this.bsModalService.show(\n      BulkOperationsRescheduleModalComponent,\n      modalOptions\n    );\n    this.bsModalRef.content.closeSubject.subscribe(() => {\n      this.reload.emit();\n    });\n  }\n\n  async setToSuccessful() {\n    try {\n      await this.modal.confirm(\n        gettext('Set manually bulk operation to successful'),\n        gettext(\n          'You are about to change the bulk operation status to successful. Do you want to proceed?'\n        ),\n        Status.DANGER\n      );\n\n      await this.bulkOperationsService.updateBulkOperation({\n        id: this.bulkOperation.id,\n        generalStatus: OperationBulkGeneralStatus.SUCCESSFUL\n      });\n      this.reload.emit();\n      this.alert.success(gettext('Operation status changed to successful.'));\n    } catch (er) {\n      this.alert.addServerFailure(er);\n    }\n  }\n\n  openFailedOperation(failedParentId) {\n    this.showFailedOperation.emit(failedParentId);\n  }\n\n  isStatusScheduled() {\n    return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.SCHEDULED;\n  }\n\n  isStatusExecutingOrExecutingWithError() {\n    return (\n      this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING ||\n      this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING_WITH_ERROR\n    );\n  }\n\n  isStatusCanceled() {\n    return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.CANCELED;\n  }\n\n  isStatusFailed() {\n    return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.FAILED;\n  }\n}\n","import { Component, QueryList, ViewChild, ViewChildren } from '@angular/core';\nimport { IOperationBulk, IResultList } from '@c8y/client';\nimport { OperationBulkRealtimeService, DatePickerComponent } from '@c8y/ngx-components';\nimport { flatten } from 'lodash-es';\nimport { BehaviorSubject, Observable, combineLatest, pipe } from 'rxjs';\nimport { map, tap, switchMap, withLatestFrom, shareReplay } from 'rxjs/operators';\nimport { StatusFilterComponent } from '../../status-filter/status-filter.component';\nimport { IStatusOption } from '../../status-filter/status-option.model';\nimport { BulkOperationsService } from '../bulk-operations.service';\nimport { BulkOperationListItemComponent } from './bulk-operation-list-item.component';\nimport { BULK_OPERATION_STATUS_OPTIONS } from './bulk-operation-list-item.model';\nimport { OperationType } from './type-list/operation-type.model';\n\n@Component({\n  selector: 'c8y-bulk-operations',\n  templateUrl: './bulk-operations-list.component.html',\n  providers: [OperationBulkRealtimeService]\n})\nexport class BulkOperationsListComponent {\n  selectedTypeFilters = this.getTypeFilters();\n  bulkOperationStatusOptions: IStatusOption[] = BULK_OPERATION_STATUS_OPTIONS;\n\n  filterPipe;\n  refreshLoading: boolean = false;\n  statusFilter$: BehaviorSubject<IStatusOption[]> = new BehaviorSubject(null);\n  typeFilter$: BehaviorSubject<OperationType[]> = new BehaviorSubject(null);\n  timeFilter$: BehaviorSubject<any> = new BehaviorSubject(null);\n  reload$: BehaviorSubject<void> = new BehaviorSubject(null);\n  @ViewChildren(BulkOperationListItemComponent) listItems: QueryList<\n    BulkOperationListItemComponent\n  >;\n  @ViewChild('statusFilter', { static: true }) statusFilter: StatusFilterComponent;\n  @ViewChild(DatePickerComponent, { static: true }) datePicker: DatePickerComponent;\n\n  bulkOperations$: Observable<IResultList<IOperationBulk>> = combineLatest(\n    this.statusFilter$,\n    this.timeFilter$,\n    this.typeFilter$,\n    this.reload$\n  ).pipe(\n    tap(() => {\n      this.refreshLoading = true;\n    }),\n    switchMap(([statusFilters, timeFilters]) => this.filter(statusFilters, timeFilters)),\n    withLatestFrom(this.typeFilter$),\n    map(([result, typeFilter]: [IResultList<IOperationBulk>, OperationType[]]) => {\n      this.filterPipe = pipe(map((data: []) => this.filterByType(data, typeFilter)));\n      return { ...result, data: this.filterByType(result.data, typeFilter) };\n    }),\n    tap(() => {\n      this.refreshLoading = false;\n    }),\n    shareReplay(1)\n  );\n\n  private allFilterFragments: string[];\n\n  constructor(\n    public realtime: OperationBulkRealtimeService,\n    private bulkOperationsService: BulkOperationsService\n  ) {\n    this.allFilterFragments = this.flattenFilterFragments(this.getTypeFilters());\n  }\n\n  filterByType(bulkOperations: IOperationBulk[], typeFilter) {\n    const flattenedFragments: string[] = this.flattenFilterFragments(typeFilter);\n    if (\n      // return data unfiltered if no filters selected...\n      !flattenedFragments.length ||\n      // ...or when all filters are selected\n      this.allFilterFragments.every(fragment => flattenedFragments.includes(fragment))\n    ) {\n      return bulkOperations;\n    }\n\n    const filteredData = bulkOperations.filter(item => {\n      return Object.keys(item.operationPrototype).some(key => flattenedFragments.includes(key));\n    });\n\n    return filteredData;\n  }\n\n  resetFilter() {\n    this.statusFilter$.next(null);\n    this.timeFilter$.next(null);\n    this.typeFilter$.next(null);\n\n    this.datePicker.clearFilter();\n    this.selectedTypeFilters = this.getTypeFilters();\n    this.statusFilter.statusOptions.map(option => {\n      option.selected = false;\n      return option;\n    });\n  }\n\n  isFilterApplied() {\n    return (\n      this.statusFilter$.getValue() || this.typeFilter$.getValue() || this.timeFilter$.getValue()\n    );\n  }\n\n  filter(statusFilters, timeFilter) {\n    const status =\n      statusFilters && statusFilters.length > 0\n        ? {\n            generalStatus: flatten(statusFilters.map(statusFilter => statusFilter.generalStatus))\n          }\n        : {};\n\n    const time = timeFilter\n      ? {\n          ...(timeFilter.dateFrom && {\n            dateFrom: timeFilter.dateFrom.toISOString()\n          }),\n          ...(timeFilter.dateTo && {\n            dateTo: timeFilter.dateTo.toISOString()\n          })\n        }\n      : {};\n    return this.getBulkOperations({ ...status, ...time });\n  }\n\n  getBulkOperations(filter?) {\n    return this.bulkOperationsService.getBulkOperations(filter);\n  }\n\n  getTypeFilters() {\n    return this.bulkOperationsService.getBulkTypes();\n  }\n\n  addBulkOperation() {\n    this.bulkOperationsService.showNewBulkOperationModal();\n  }\n\n  openFailedOperation(failedParentId) {\n    this.listItems.forEach(item => {\n      if (item.bulkOperation.id === failedParentId) {\n        item.listItem.collapsed = false;\n        item.listItem.element.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      }\n    });\n  }\n\n  compareOperations(operationA: IOperationBulk, operationB: IOperationBulk): number {\n    return new Date(operationA.startDate).getTime() - new Date(operationB.startDate).getTime();\n  }\n\n  private flattenFilterFragments(filters: OperationType[]): string[] {\n    return (filters || []).reduce((flattened, current) => flattened.concat(current.fragments), []);\n  }\n}\n","import { Component, EventEmitter, Output, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BulkOperationsService } from '../../bulk-operations.service';\nimport { OperationType } from './operation-type.model';\n\n@Component({\n  selector: 'c8y-bulk-operation-type-list',\n  templateUrl: './bulk-operation-type-list.component.html'\n})\nexport class BulkOperationTypeListComponent implements OnInit {\n  @Output() onCustomType: EventEmitter<OperationType> = new EventEmitter();\n  bulkList: OperationType[] = [];\n\n  constructor(private router: Router, private bulkOpsService: BulkOperationsService) {}\n\n  ngOnInit() {\n    this.bulkList = this.bulkOpsService.getBulkTypes();\n  }\n\n  handleClick(item: OperationType) {\n    if (item.path) {\n      this.bulkOpsService.hideNewBulkOperationModal();\n      this.router.navigateByUrl(item.path);\n    } else if (item.component) {\n      this.onCustomType.emit(item);\n    }\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormGroupConfig, gettext } from '@c8y/ngx-components';\nimport { get } from 'lodash-es';\nimport { BulkOperationType } from '../bulk/bulk-operation.model';\nimport { OperationDetails } from '../bulk/operation-details.model';\n\n@Component({\n  selector: 'c8y-operation-details',\n  templateUrl: 'operation-details.component.html'\n})\nexport class OperationDetailsComponent implements OnInit {\n  @Input()\n  set bulkOperationType(bulkOperationType: BulkOperationType) {\n    this.titlePlaceholder = get(this.placeholders[bulkOperationType], 'title');\n    this.descriptionPlaceholder = get(this.placeholders[bulkOperationType], 'description');\n  }\n\n  titlePlaceholder: string = gettext('e.g. Reset factory settings');\n  descriptionPlaceholder: string = gettext(\n    'e.g. Reset factory settings of all devices of model XYZ'\n  );\n  fgOperationDescription: FormGroup;\n\n  private placeholders: { [key in BulkOperationType]: { title: string; description: string } } = {\n    [BulkOperationType.SOFTWARE]: {\n      title: gettext('e.g. Cloud connectivity software'),\n      description: gettext(\n        'e.g. Cloud connectivity software applied to devices with type c8y_Linux`KEEP_ORIGINAL`'\n      )\n    },\n    [BulkOperationType.FIRMWARE]: {\n      title: gettext('e.g. Firmware for hardware revision b'),\n      description: gettext(\n        'e.g. Firmware for hardware revision b applied to devices with type c8y_Linux`KEEP_ORIGINAL`'\n      )\n    },\n    [BulkOperationType.CONFIGURATION]: {\n      title: gettext('e.g. Host configuration c8y_Linux`KEEP_ORIGINAL`'),\n      description: gettext(\n        'e.g. Host configuration applied to devices with type c8y_Linux`KEEP_ORIGINAL`'\n      )\n    },\n    [BulkOperationType.DEVICE_PROFILE]: {\n      title: gettext('e.g. Device profile for c8y_Linux`KEEP_ORIGINAL` devices'),\n      description: gettext(\n        'e.g. Device profile applied to devices with type c8y_Linux`KEEP_ORIGINAL`'\n      )\n    }\n  };\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    const config: FormGroupConfig<OperationDetails> = {\n      description: ['', Validators.required],\n      note: [''],\n      schedule: []\n    };\n\n    this.fgOperationDescription = this.formBuilder.group(config);\n  }\n}\n","import { CdkStep } from '@angular/cdk/stepper';\nimport { Directive, Input, TemplateRef } from '@angular/core';\nimport { C8yStepper } from '@c8y/ngx-components';\n\n@Directive({ selector: '[customStep]' })\nexport class CustomStep {\n  @Input('customStep') label: string;\n  @Input('customStepCompleted') completed: string;\n  @Input('customStepButtonsDisabled') buttonsDisabled: boolean = false;\n  constructor(public templateRef: TemplateRef<any>) {}\n  @Input('customStepOnNext') onNext: (event: { stepper: C8yStepper; step: CdkStep }) => void = ({\n    stepper,\n    step\n  }) => {\n    // steps without own `onNext` handler, e.g. preview steps need to mark themselves as `completed`,\n    // otherwise stepper will not allow to move forth from them as soon as the user navigates back\n    // and the `c8y-stepper-buttons` component marks the step as incomplete.\n    step.completed = true;\n    stepper.next();\n  };\n}\n","import { CdkStep, StepperSelectionEvent } from '@angular/cdk/stepper';\nimport {\n  Component,\n  ContentChildren,\n  EventEmitter,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { AlertService, C8yStepper, gettext, ModalService, Status } from '@c8y/ngx-components';\nimport { get } from 'lodash-es';\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { OperationDetailsComponent } from '../../details/operation-details.component';\nimport { OperationSchedule } from '../../scheduler/operation-schedule.interface';\nimport { BulkOperationType } from '../bulk-operation.model';\nimport { BulkOperationsService } from '../bulk-operations.service';\nimport { CustomStep } from '../custom-step.directive';\nimport { OperationDetails } from '../operation-details.model';\n\n@Component({\n  selector: 'c8y-bulk-operation-stepper',\n  templateUrl: 'bulk-operation-stepper.component.html'\n})\nexport class BulkOperationStepper implements OnDestroy {\n  @Output() selectionChange: EventEmitter<StepperSelectionEvent> = new EventEmitter();\n  @ContentChildren(CustomStep) customSteps: QueryList<CustomStep>;\n  @ViewChild(C8yStepper, { static: false })\n  stepper: C8yStepper;\n  @ViewChild(OperationDetailsComponent, { static: false })\n  operationDetailsComponent: OperationDetailsComponent;\n\n  steps: CustomStep[] = [];\n  showStepper: boolean = false;\n  showButtons: boolean = false;\n  pendingStatus: boolean;\n  stepperButtonsLabels = { custom: gettext('Schedule bulk operation') };\n  deviceTypes$: Observable<string[]>;\n  deviceQueryString: string;\n  bulkOperationType: BulkOperationType;\n  scheduleData: OperationSchedule;\n  operationDetailsForm: FormGroup;\n  operationDetails: OperationDetails;\n  retrieveOperationDetails: () => OperationDetails | Promise<OperationDetails>;\n\n  private deviceTypesSubject$: Subject<string[]> = new Subject();\n  private endSubscriptions: Subject<void> = new Subject();\n\n  constructor(\n    private bulkOperationService: BulkOperationsService,\n    private modal: ModalService,\n    private alert: AlertService\n  ) {\n    this.deviceTypes$ = this.deviceTypesSubject$.asObservable();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      // wait for the next event loop turn as `steps` has already been checked in this CD cycle\n      this.steps = this.customSteps.toArray();\n      this.showStepper = true;\n      setTimeout(() => {\n        // postpone rendering of buttons for custom steps to the point where custom steps have already been rendered\n        this.showButtons = true;\n        if (this.stepper) {\n          this.stepper.selectionChange.pipe(takeUntil(this.endSubscriptions)).subscribe(event => {\n            this.selectionChange.next(event);\n          });\n          this.operationDetailsForm = this.operationDetailsComponent.fgOperationDescription;\n        }\n      });\n    });\n  }\n\n  changeDeviceTypes(deviceTypes: string | string[]) {\n    if (deviceTypes) {\n      this.deviceTypesSubject$.next(Array.isArray(deviceTypes) ? deviceTypes : [deviceTypes]);\n    } else {\n      this.deviceTypesSubject$.next([]);\n    }\n  }\n\n  async confirmDeviceSelection($event: { stepper: C8yStepper; step: CdkStep }) {\n    if (!this.deviceQueryString) {\n      try {\n        await this.modal.confirm(\n          gettext('All devices selected'),\n          gettext(\n            'You are about to schedule the bulk operation to be executed for all devices. Do you want to proceed?'\n          ),\n          Status.WARNING,\n          { ok: gettext('Schedule for all devices'), cancel: gettext('Cancel and select devices') }\n        );\n        $event.step.completed = true;\n        $event.stepper.next();\n        this.operationDetails = this.retrieveOperationDetails\n          ? await this.retrieveOperationDetails()\n          : undefined;\n      } catch (ex) {\n        // Intentionally empty\n      }\n    } else {\n      $event.step.completed = true;\n      $event.stepper.next();\n      this.operationDetails = this.retrieveOperationDetails\n        ? await this.retrieveOperationDetails()\n        : undefined;\n    }\n\n    this.bulkOperationType = this.bulkOperationService.retrieveBulkOperationType(\n      get(this.operationDetails, 'prototype')\n    );\n    if (\n      this.operationDetailsForm &&\n      get(this.operationDetailsForm, 'controls.description.pristine') &&\n      this.operationDetails\n    ) {\n      this.operationDetailsForm.patchValue({\n        description: get(this.operationDetails, 'prototype.description')\n      });\n    }\n  }\n\n  cancel() {\n    this.close();\n  }\n\n  async scheduleBulkOperation() {\n    this.pendingStatus = true;\n\n    try {\n      this.operationDetails.prototype.description = get(\n        this.operationDetailsForm,\n        'controls.description.value'\n      );\n      this.operationDetails.note = get(this.operationDetailsForm, 'controls.note.value');\n      this.operationDetails.schedule = get(this.operationDetailsForm, 'controls.schedule.value');\n\n      await this.bulkOperationService.scheduleBulkOperation(\n        this.deviceQueryString,\n        this.operationDetails\n      );\n      this.alert.success(gettext('New bulk operation scheduled.'));\n      this.close();\n    } catch (ex) {\n      this.alert.addServerFailure(ex);\n    }\n\n    this.pendingStatus = false;\n  }\n\n  ngOnDestroy(): void {\n    this.endSubscriptions.next();\n    this.endSubscriptions.complete();\n  }\n\n  private close() {\n    this.stepper.reset();\n    this.bulkOperationService.returnToBulkOperationOverview();\n  }\n}\n","import { StepperSelectionEvent } from '@angular/cdk/stepper';\nimport { OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { IManagedObject } from '@c8y/client';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { BulkOperationStepper } from './creation/bulk-operation-stepper.component';\nimport { OperationDetails } from './operation-details.model';\n\nexport abstract class BaseStepperComponent implements OnInit, OnDestroy {\n  @ViewChild(BulkOperationStepper, { static: true }) operationStepper: BulkOperationStepper;\n\n  set deviceTypes(deviceTypes: string | string[]) {\n    if (this.operationStepper) {\n      this.operationStepper.changeDeviceTypes(deviceTypes);\n    }\n  }\n\n  /**\n   * A map holding step data. The order of properties need to match the order of\n   * the steps they hold data for as the index of the property is used to clear\n   * step data when navigating forth after changing data at an earlier step.\n   */\n  stepData: { [key: string]: IManagedObject } = {};\n\n  private endSubscriptions: Subject<void> = new Subject();\n\n  ngOnInit(): void {\n    this.operationStepper.retrieveOperationDetails = this.retrieveOperationPrototype.bind(this);\n\n    this.operationStepper.selectionChange\n      .pipe(takeUntil(this.endSubscriptions))\n      .subscribe(this.onSelectionChange.bind(this));\n  }\n\n  ngOnDestroy(): void {\n    this.endSubscriptions.next();\n    this.endSubscriptions.complete();\n  }\n\n  protected abstract retrieveOperationPrototype(): OperationDetails | Promise<OperationDetails>;\n\n  protected onSelectionChange(event: StepperSelectionEvent) {\n    const { selectedIndex, previouslySelectedIndex } = event;\n    if (\n      selectedIndex > previouslySelectedIndex &&\n      selectedIndex < Object.keys(this.stepData).length\n    ) {\n      // TODO clear step data only if previous step is \"dirty\"\n      this.stepData[this.getStepDataKeyByIndex(selectedIndex)] = undefined;\n    }\n  }\n\n  private getStepDataKeyByIndex(index: number): string {\n    return Object.keys(this.stepData)[index];\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { IOperation } from '@c8y/client';\nimport { get } from 'lodash-es';\nimport { BaseStepperComponent } from '../base-stepper.component';\nimport { BulkOperationsService } from '../bulk-operations.service';\nimport { OperationDetails } from '../operation-details.model';\n\n@Component({\n  selector: 'bulk-operation-from-single',\n  templateUrl: 'bulk-operation-from-single.component.html'\n})\nexport class BulkOperationFromSingleComponent extends BaseStepperComponent implements OnInit {\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private bulkOperationService: BulkOperationsService\n  ) {\n    super();\n  }\n\n  protected async retrieveOperationPrototype(): Promise<OperationDetails> {\n    const prototype: IOperation = (await this.bulkOperationService.getOperation(\n      this.activatedRoute.snapshot.params.operationId\n    )).data;\n\n    return {\n      description: get(prototype, 'description'),\n      prototype\n    };\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { get } from 'lodash-es';\nimport { IManagedObject } from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'c8y-confirm-device-profile-selection-step',\n  templateUrl: 'confirm-device-profile-selection-step.component.html'\n})\nexport class ConfirmDeviceProfileSelectionStepComponent {\n  @Input() selectedDeviceProfile: IManagedObject;\n  readonly DEVICE_TYPE_NOT_DEFINED = gettext('Device type not defined');\n  constructor(\n    private translate: TranslateService\n  ) {}\n\n  get softwares() {\n    return get(this.selectedDeviceProfile, ['c8y_DeviceProfile', 'software'], []);\n  }\n\n  get configurations() {\n    return get(this.selectedDeviceProfile, ['c8y_DeviceProfile', 'configuration'], []);\n  }\n\n  getDeviceTypeTitle(deviceProfile: IManagedObject): string {\n    return get(\n      deviceProfile,\n      'c8y_Filter.type',\n      this.translate.instant(this.DEVICE_TYPE_NOT_DEFINED));\n  }\n}\n","import { Component, Output, EventEmitter } from '@angular/core';\nimport { Observable, BehaviorSubject, combineLatest, Subscription, from } from 'rxjs';\nimport { switchMap, shareReplay, debounceTime, distinctUntilChanged, tap } from 'rxjs/operators';\nimport { IResultList, IManagedObject } from '@c8y/client';\nimport { property, isEqual, uniqWith, get } from 'lodash-es';\nimport { gettext } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { DeviceProfileService } from '@c8y/ngx-components/device-profile';\n\n@Component({\n  selector: 'c8y-select-device-profile-step',\n  templateUrl: 'select-device-profile-step.component.html'\n})\nexport class SelectDeviceProfileStepComponent {\n  @Output() deviceProfile: EventEmitter<IManagedObject> = new EventEmitter<IManagedObject>();\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n  deviceType$: BehaviorSubject<string> = new BehaviorSubject('');\n  readonly DEVICE_TYPE_NOT_DEFINED = gettext('Device type not defined');\n  deviceTypes = [];\n  selectedDeviceType = { name: '' };\n  deviceProfile$: Observable<IResultList<IManagedObject>> = combineLatest(\n    this.textFilter$,\n    this.deviceType$\n  ).pipe(\n    switchMap(([name, deviceType]) => this.getDeviceProfiles(name, deviceType)),\n    shareReplay(1)\n  );\n  private deviceTypeSubscription: Subscription;\n\n  constructor(\n    private deviceProfileService: DeviceProfileService,\n    private translate: TranslateService\n  ) {\n    this.loadDeviceTypes();\n  }\n\n  loadDeviceTypes() {\n    this.deviceTypeSubscription = this.deviceType$\n      .pipe(\n        debounceTime(300),\n        distinctUntilChanged(),\n        switchMap(searchStr => {\n          const query = { 'c8y_Filter.type': `*${searchStr}*` };\n          return from(this.deviceProfileService.getDeviceProfiles(query));\n        })\n      )\n      .subscribe( ({ data }) => {\n        this.deviceTypes = uniqWith(\n          data.map(val => ({ name: val.c8y_Filter.type })).filter(val => val.name),\n          isEqual\n        );\n      });\n  }\n\n  ngOnDestroy() {\n    this.deviceTypeSubscription.unsubscribe();\n  }\n\n  selectDeviceProfile(deviceProfile: IManagedObject) {\n    this.deviceProfile.emit(deviceProfile);\n  }\n\n  getDeviceTypeTitle(deviceProfile: IManagedObject): string {\n    return get(\n      deviceProfile,\n      'c8y_Filter.type',\n      this.translate.instant(this.DEVICE_TYPE_NOT_DEFINED));\n  }\n\n  private getDeviceProfiles(name?: string, deviceType?: string) {\n    const query: any = deviceType ? { 'c8y_Filter.type': deviceType } : {};\n    if (name) {\n      query.name = `*${name}*`;\n    }\n    return this.deviceProfileService.getDeviceProfiles(query);\n  }\n\n}\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, tap, switchMap, shareReplay } from 'rxjs/operators';\nimport { memoize } from '@c8y/ngx-components';\nimport { RepositoryService, RepositoryType } from '@c8y/ngx-components/repository';\nimport { gettext } from '@c8y/ngx-components';\nimport { IResultList, IManagedObject } from '@c8y/client';\nimport { TranslateService } from '@ngx-translate/core';\nimport { property, get } from 'lodash-es';\nimport { BulkOperationsService } from '../../bulk-operations.service';\n\n@Component({\n  selector: 'c8y-select-firmware-step',\n  templateUrl: 'select-firmware.component.html'\n})\nexport class SelectFirmwareComponent {\n  @Input() selected: IManagedObject;\n  @Output() firmware: EventEmitter<IManagedObject> = new EventEmitter<IManagedObject>();\n  elementCount: number = 0;\n  DD_LOW_COUNT: number = 10;\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n\n  firmwares$: Observable<IResultList<IManagedObject>> = this.textFilter$\n    .pipe(\n      debounceTime(400),\n      distinctUntilChanged()\n    )\n    .pipe(\n      switchMap(text => this.getFirmwares(text)),\n      tap(resp => {\n        this.elementCount = resp.data ? resp.data.length : 0;\n      }),\n      shareReplay(1)\n    );\n  isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);\n  readonly DEVICE_TYPE_NOT_AVAILABLE: string = gettext('No device type available');\n  readonly DESCRIPTION_NOT_AVAILABLE: string = gettext('No description available');\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private bulkOpsService: BulkOperationsService,\n    private translate: TranslateService\n  ) {}\n\n  ngOnInit() {\n    this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;\n  }\n\n  selectFirmware(selected: boolean, fw: IManagedObject) {\n    if (selected) {\n      this.firmware.emit(fw);\n    }\n  }\n\n  @memoize(property('id'))\n  getBaseVersionsCount$(firmware: IManagedObject): Observable<number | string> {\n    return this.firmwares$.pipe(\n      switchMap(() => this.repositoryService.getBaseVersionsCount$(firmware)),\n      shareReplay(1)\n    );\n  }\n\n  getDescriptionTitle(firmware: IManagedObject): string {\n    return get(\n      firmware,\n      'description',\n      this.translate.instant(this.DESCRIPTION_NOT_AVAILABLE));\n  }\n\n  getDeviceTypeTitle(firmware: IManagedObject): string {\n    return get(\n      firmware,\n      'c8y_Filter.type',\n      this.translate.instant(this.DEVICE_TYPE_NOT_AVAILABLE));\n  }\n\n  private getFirmwares(partialName?: string) {\n    return this.repositoryService.listRepositoryEntries(RepositoryType.FIRMWARE, { partialName });\n  }\n\n}\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  shareReplay,\n  map,\n  switchMap,\n  distinctUntilKeyChanged,\n  distinctUntilChanged,\n  catchError,\n  tap\n} from 'rxjs/operators';\nimport { IManagedObject, IResultList, InventoryService } from '@c8y/client';\nimport { memoize } from '@c8y/ngx-components';\nimport { RepositoryService, FirmwareBinary } from '@c8y/ngx-components/repository';\nimport { BulkOperationsService } from '../../bulk-operations.service';\nimport { property } from 'lodash-es';\n\n@Component({\n  selector: 'c8y-version-or-patch-step',\n  templateUrl: 'version-or-patch.component.html'\n})\nexport class VersionOrPatchComponent {\n  @Input() selected: IManagedObject;\n  @Output() versionOrPatch: EventEmitter<IManagedObject> = new EventEmitter<IManagedObject>();\n\n  elementCount: number = 0;\n  DD_LOW_COUNT: number = 10;\n\n  firmware$: Observable<IManagedObject> = this.bulkOpsService.firmwareId.pipe(\n    distinctUntilChanged(),\n    switchMap( id => this.inventoryService.detail$(id).pipe( catchError(error => of(error)) ) ),\n    shareReplay(1)\n  );\n\n  baseVersions$: Observable<IResultList<IManagedObject>> = this.firmware$.pipe(\n    distinctUntilKeyChanged('id'),\n    switchMap(firmware => this.repositoryService.listBaseVersions(firmware)),\n    tap(resp => {\n      this.elementCount = resp.data ? resp.data.length : 0;\n    }),\n    shareReplay(1)\n  );\n\n  isLegacy$: Observable<boolean> = this.firmware$.pipe(\n    map(firmware => this.repositoryService.isLegacyEntry(firmware)),\n    shareReplay(1)\n  );\n\n  expanded: { [id: string]: boolean } = {};\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private inventoryService: InventoryService,\n    private bulkOpsService: BulkOperationsService\n  ) {\n    this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;\n  }\n\n  @memoize()\n  getBinaryName$(binaryUrl) {\n    return this.repositoryService.getBinaryName$(binaryUrl);\n  }\n\n  @memoize(property('id'))\n  getBaseVersionAndPatches$(baseVersion) {\n    return this.firmware$.pipe(\n      distinctUntilKeyChanged('id'),\n      switchMap(firmware =>\n        this.repositoryService.listBaseVersionAndPatches(firmware, baseVersion)\n      ),\n      shareReplay(1)\n    );\n  }\n\n  @memoize(property('id'))\n  getPatchVersionsCount$(baseVersion: FirmwareBinary) {\n    return this.firmware$.pipe(\n      distinctUntilKeyChanged('id'),\n      switchMap(() => this.firmware$),\n      switchMap(firmware => this.repositoryService.getPatchVersionsCount$(firmware, baseVersion)),\n      shareReplay(1)\n    );\n  }\n\n  selectVersionOrPatch(selected: boolean, versionOrPatch: IManagedObject) {\n    if (selected) {\n      this.versionOrPatch.emit(versionOrPatch);\n    }\n  }\n}\n","import { Component, Input, SimpleChanges, OnChanges } from '@angular/core';\nimport { gettext } from '@c8y/ngx-components';\nimport { has, uniq } from 'lodash-es';\nimport { ISelectedSoftware } from './select-software.model';\n\n@Component({\n  selector: 'c8y-confirm-software-selection-step',\n  templateUrl: 'confirm-software-selection-step.component.html'\n})\nexport class ConfirmSoftwareSelectionStepComponent implements OnChanges {\n  @Input() selectedItems: ISelectedSoftware[];\n  title: string;\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.selectedItems) {\n      const deviceTypes: string[] = this.deviceTypes;\n      this.title = deviceTypes && deviceTypes.length ? deviceTypes.join(', ') : gettext('Undefined`device type`');\n    }\n  }\n\n  get selectedToInstall() {\n    return this.selectedItems.filter(software => software.action === 'install');\n  }\n\n  get selectedToDelete() {\n    return this.selectedItems.filter(software => software.action === 'delete');\n  }\n\n  get deviceTypes() {\n    return uniq(\n      this.selectedItems\n        .filter(val => has(val, ['software', 'c8y_Filter', 'type']))\n        .map(val => val.software.c8y_Filter.type)\n    );\n  }\n}\n","import { Component, EventEmitter, Output, ViewChildren, QueryList } from '@angular/core';\nimport { IManagedObject, IResultList } from '@c8y/client';\nimport { gettext, memoize, ListItemRadioComponent } from '@c8y/ngx-components';\nimport { RepositoryService, RepositoryType } from '@c8y/ngx-components/repository';\nimport { isEqual, property, uniqWith, get } from 'lodash-es';\nimport { BehaviorSubject, combineLatest, from, Observable, Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, shareReplay, switchMap } from 'rxjs/operators';\nimport { ISelectedSoftware } from './select-software.model';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'c8y-select-software-step',\n  templateUrl: 'select-software-step.component.html'\n})\nexport class SelectSoftwareStepComponent {\n  @Output() software: EventEmitter<ISelectedSoftware> = new EventEmitter<ISelectedSoftware>();\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n  deviceType$: BehaviorSubject<string> = new BehaviorSubject('');\n  deviceTypes = [];\n  selectedDeviceType = { name: '' };\n  isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);\n  software$: Observable<IResultList<IManagedObject>> = combineLatest(\n    this.textFilter$,\n    this.deviceType$\n  ).pipe(\n    switchMap(([name, deviceType]) => this.getSoftware(name, deviceType)),\n    shareReplay(1)\n  );\n  readonly NO_DEVICE_TYPE_AVAILABLE = gettext('No device type available');\n  @ViewChildren(ListItemRadioComponent) radioButtons: QueryList<ListItemRadioComponent>;\n\n  private deviceTypeSubscription: Subscription;\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private translate: TranslateService\n  ) {\n    this.loadDeviceTypes();\n  }\n\n  @memoize(property('id'))\n  getVersions(software: IManagedObject) {\n    return this.repositoryService.listAllVersions(software);\n  }\n\n  getDeviceTypeTitle(software: IManagedObject): string {\n    return get(\n      software,\n      'c8y_Filter.type',\n      this.translate.instant(this.NO_DEVICE_TYPE_AVAILABLE));\n  }\n\n  loadDeviceTypes() {\n    this.deviceTypeSubscription = this.deviceType$\n      .pipe(\n        debounceTime(300),\n        distinctUntilChanged(),\n        switchMap(searchStr => {\n          const query = { 'c8y_Filter.type': `*${searchStr}*` };\n          return from(\n            this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, { query })\n          );\n        })\n      )\n      .subscribe(result => {\n        const { data } = result;\n        this.deviceTypes = uniqWith(data.map(val => ({ name: val.c8y_Filter.type })), isEqual);\n      });\n  }\n\n  ngOnDestroy() {\n    this.deviceTypeSubscription.unsubscribe();\n  }\n\n  resetSelection() {\n    this.radioButtons.map(radio => radio.reset());\n  }\n\n  selectSoftware({ option, software }) {\n    software.selectedId = option.id;\n    option.action = 'install';\n    this.emitSoftware({ option, software });\n  }\n\n  emitSoftware({ option, software }) {\n    const emitData = Object.assign(\n      {},\n      { software },\n      { version: option },\n      { action: option.action }\n    );\n    this.software.emit(emitData);\n  }\n\n  private getSoftware(name?: string, deviceType?: string) {\n    const query: any = name ? { name: `*${name}*` } : {};\n    if (deviceType) {\n      query.__or = [{ 'c8y_Filter.type': deviceType }, { __not: { __has: `c8y_Filter.type` } }];\n    }\n    return this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, { query });\n  }\n}\n","import { CdkStep } from '@angular/cdk/stepper';\nimport { Component } from '@angular/core';\nimport { IManagedObject, IOperation, IResultList } from '@c8y/client';\nimport { C8yStepper, gettext } from '@c8y/ngx-components';\nimport { RepositoryService, RepositoryType } from '@c8y/ngx-components/repository';\nimport { TranslateService } from '@ngx-translate/core';\nimport { get, isEqual, uniqWith } from 'lodash-es';\nimport { BehaviorSubject, combineLatest, from, Observable, Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, shareReplay, switchMap } from 'rxjs/operators';\nimport { BaseStepperComponent } from '../base-stepper.component';\nimport { BulkOperationsService } from '../bulk-operations.service';\nimport { OperationDetails } from '../operation-details.model';\n\n@Component({\n  selector: 'c8y-stepper-bulk-type-configuration',\n  templateUrl: 'stepper-bulk-type-configuration.component.html'\n})\nexport class StepperBulkTypeConfiguration extends BaseStepperComponent {\n  readonly NO_DEVICE_TYPE_AVAILABLE = gettext('Undefined`device type`');\n  selectedConfiguration: IManagedObject;\n  elementCount: number = 0;\n  DD_LOW_COUNT: number = 10;\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n  configType$: BehaviorSubject<string> = new BehaviorSubject('');\n  configTypes = [];\n  selectedConfigType = { name: '' };\n  configurations$: Observable<IResultList<IManagedObject>> = combineLatest(\n    this.textFilter$,\n    this.configType$\n  ).pipe(\n    switchMap(([name, configType]) => this.getConfiguration(name, configType)),\n    shareReplay(1)\n  );\n  private configTypeSubscription: Subscription;\n\n  constructor(\n    private bulkOperationService: BulkOperationsService,\n    private repositoryService: RepositoryService,\n    private translate: TranslateService\n  ) {\n    super();\n    this.DD_LOW_COUNT = this.bulkOperationService.DD_LOW_COUNT;\n    this.loadConfigurationTypes();\n  }\n\n  loadConfigurationTypes() {\n    this.configTypeSubscription = this.configType$\n      .pipe(\n        debounceTime(300),\n        distinctUntilChanged(),\n        switchMap(searchStr => {\n          const query = { configurationType: `*${searchStr}*` };\n          return from(\n            this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION, { query })\n          );\n        })\n      )\n      .subscribe(result => {\n        const { data } = result;\n        this.configTypes = uniqWith(data.map(val => ({ name: val.configurationType })), isEqual);\n      });\n  }\n  ngOnDestroy(): void {\n    this.configTypeSubscription.unsubscribe();\n  }\n\n  selectConfiguration(configuration: IManagedObject) {\n    this.selectedConfiguration = configuration;\n  }\n\n  goToSecondStep($event: { stepper: C8yStepper; step: CdkStep }) {\n    $event.stepper.next();\n    this.getConfigBinary();\n    this.deviceTypes = this.selectedConfiguration.deviceType;\n  }\n\n  async getConfigBinary() {\n    if (this.selectedConfiguration.url) {\n      this.selectedConfiguration.binary = await this.repositoryService.getBinaryText(\n        this.selectedConfiguration.url,\n        { allowExternal: true }\n      );\n    }\n  }\n\n  getDeviceTypeTitle(configuration: IManagedObject): string {\n    return get(configuration, 'deviceType', this.translate.instant(this.NO_DEVICE_TYPE_AVAILABLE));\n  }\n\n  protected retrieveOperationPrototype(): OperationDetails {\n    const configuration = {\n      type: this.selectedConfiguration.configurationType,\n      url: this.selectedConfiguration.url\n    };\n\n    return {\n      name: gettext('Configuration update'),\n      description: get(this.selectedConfiguration, 'name'),\n      prototype: ({\n        description: `Update configuration to: ${this.selectedConfiguration.name}.`,\n        c8y_DownloadConfigFile: configuration\n      } as unknown) as IOperation\n    };\n  }\n\n  private getConfiguration(name?: string, configurationType?: string) {\n    const query: any = name ? { name: `*${name}*` } : {};\n    if (configurationType) {\n      query.__or = [{ configurationType }, { __not: { __has: `configurationType` } }];\n    }\n    return this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION, { query });\n  }\n}\n","import { CdkStep } from '@angular/cdk/stepper';\nimport { Component } from '@angular/core';\nimport { IManagedObject, IOperation } from '@c8y/client';\nimport { C8yStepper, gettext } from '@c8y/ngx-components';\nimport { get } from 'lodash-es';\nimport { BaseStepperComponent } from '../base-stepper.component';\nimport { OperationDetails } from '../operation-details.model';\n\n@Component({\n  selector: 'c8y-stepper-bulk-type-device-profile',\n  templateUrl: 'stepper-bulk-type-device-profile.component.html'\n})\nexport class StepperBulkTypeDeviceProfile extends BaseStepperComponent {\n  selectedDeviceProfile: IManagedObject;\n\n  goToConfirmSelection($event: { stepper: C8yStepper; step: CdkStep }) {\n    this.deviceTypes = get(this.selectedDeviceProfile, 'c8y_Filter.type');\n    $event.stepper.next();\n  }\n\n  onDeviceProfileSelected(selectedItem) {\n    this.selectedDeviceProfile = selectedItem;\n  }\n\n  protected retrieveOperationPrototype(): OperationDetails {\n    return {\n      name: gettext('Apply device profile'),\n      description: get(this.selectedDeviceProfile, 'name'),\n      prototype: ({\n        description: `Apply device profile: ${this.selectedDeviceProfile.name}`,\n        profileId: this.selectedDeviceProfile.id,\n        profileName: this.selectedDeviceProfile.name,\n        c8y_DeviceProfile: this.selectedDeviceProfile.c8y_DeviceProfile\n      } as unknown) as IOperation\n    };\n  }\n}\n","import { StepperSelectionEvent } from '@angular/cdk/stepper';\nimport { Component, OnDestroy } from '@angular/core';\nimport { IManagedObject, IOperation } from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { get } from 'lodash-es';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { BaseStepperComponent } from '../base-stepper.component';\nimport { BulkOperationsService } from '../bulk-operations.service';\nimport { OperationDetails } from '../operation-details.model';\n\n@Component({\n  selector: 'c8y-stepper-firmware',\n  templateUrl: 'stepper-bulk-type-firmware.component.html'\n})\nexport class StepperFirmware extends BaseStepperComponent implements OnDestroy {\n  readonly descriptionTemplate: string = gettext('{{ name }} (version {{ version }})');\n\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n\n  stepData: { firmware: IManagedObject; versionOrPatch: IManagedObject } = {\n    firmware: undefined,\n    versionOrPatch: undefined\n  };\n\n  selectedFirmware: IManagedObject;\n  selectedVersionOrPatch: IManagedObject;\n\n  private subscription: Subscription;\n\n  constructor(\n    private bulkOperationService: BulkOperationsService,\n    private translate: TranslateService\n  ) {\n    super();\n  }\n\n  goToVersionOrPatchStep({ stepper }) {\n    const selectedFirmware = this.stepData.firmware;\n    this.bulkOperationService.setFirmwareId(selectedFirmware.id);\n    this.deviceTypes = (selectedFirmware.c8y_Filter || {}).type;\n    stepper.next();\n  }\n\n  onVersionOrPatchSelected(versionOrPatch: IManagedObject) {\n    this.stepData.versionOrPatch = versionOrPatch;\n  }\n\n  onFirmwareSelected(fw: IManagedObject) {\n    this.stepData.firmware = fw;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  protected retrieveOperationPrototype(): OperationDetails {\n    const selectedFirmware = this.stepData.firmware;\n    const selectedVersionOrPatch = this.stepData.versionOrPatch;\n\n    if (!selectedFirmware || !selectedVersionOrPatch) {\n      return;\n    }\n\n    const firmware: IManagedObject = ({\n      name: selectedFirmware.name,\n      version: selectedVersionOrPatch.c8y_Firmware.version,\n      url: selectedVersionOrPatch.c8y_Firmware.url\n    } as unknown) as IManagedObject;\n\n    if (selectedVersionOrPatch.c8y_Patch) {\n      firmware.isPatch = true;\n      firmware.dependency = selectedVersionOrPatch.c8y_Patch.dependency;\n    }\n\n    const name = selectedFirmware.name;\n    const version = selectedVersionOrPatch.c8y_Firmware.version;\n    const description: string = `Update firmware to: ${name} (version: ${version}).`;\n\n    return {\n      name: gettext('Firmware update'),\n      description: this.translate.instant(this.descriptionTemplate, {\n        name: get(this.stepData, 'firmware.name'),\n        version: get(this.stepData, 'versionOrPatch.c8y_Firmware.version')\n      }),\n      prototype: ({\n        description,\n        c8y_Firmware: firmware\n      } as unknown) as IOperation\n    };\n  }\n\n  protected onSelectionChange(event: StepperSelectionEvent) {\n    this.textFilter$.next('');\n    super.onSelectionChange(event);\n  }\n}\n","import { CdkStep } from '@angular/cdk/stepper';\nimport { Component, ViewChild } from '@angular/core';\nimport { IOperation } from '@c8y/client';\nimport { C8yStepper, gettext, ModalService, Status } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { uniq } from 'lodash-es';\nimport { BaseStepperComponent } from '../base-stepper.component';\nimport { OperationDetails } from '../operation-details.model';\nimport { SelectSoftwareStepComponent } from './software-update-stepper/select-software-step.component';\nimport {\n  ISelectedSoftware,\n  ISoftwareUpdateOperationPrototype\n} from './software-update-stepper/select-software.model';\n\n@Component({\n  selector: 'c8y-stepper-bulk-type-software',\n  templateUrl: 'stepper-bulk-type-software.component.html'\n})\nexport class StepperBulkTypeSoftware extends BaseStepperComponent {\n  readonly descriptionTemplateSingle: string = gettext(\n    'Update software to: {{ name }} (version {{ version }})'\n  );\n  readonly descriptionTemplateOneOther: string = gettext(\n    'Update software to: {{ name }} (version {{ version }}) and one other'\n  );\n  readonly descriptionTemplateMultiple: string = gettext(\n    'Update software to: {{ name }} (version {{ version }}) and {{ count }} others'\n  );\n\n  selectedSoftware: ISelectedSoftware[] = [];\n  @ViewChild(SelectSoftwareStepComponent, { static: false })\n  selectSoftware: SelectSoftwareStepComponent;\n\n  constructor(private modal: ModalService, private translate: TranslateService) {\n    super();\n  }\n\n  onSoftwareSelected(selectedItem) {\n    this.selectedSoftware = this.selectedSoftware.filter(\n      item => item.software.id !== selectedItem.software.id\n    );\n    this.selectedSoftware.push(selectedItem);\n  }\n\n  async confirmSoftwareSelection($event: { stepper: C8yStepper; step: CdkStep }) {\n    const deviceTypes: string[] = this.getUniqueDeviceTypes();\n    this.deviceTypes = deviceTypes;\n    if (deviceTypes.length > 1) {\n      try {\n        await this.modal.confirm(\n          gettext('Selected software for various device types'),\n          gettext('Operation may fail due to unsupported software. Do you want to proceed?'),\n          Status.WARNING,\n          { ok: gettext('Confirm'), cancel: gettext('Cancel') }\n        );\n        $event.stepper.next();\n      } catch (ex) {\n        this.selectedSoftware = [];\n        this.selectSoftware.resetSelection();\n      }\n    } else {\n      $event.stepper.next();\n    }\n  }\n\n  protected retrieveOperationPrototype(): OperationDetails {\n    const softwareList: ISoftwareUpdateOperationPrototype[] = this.selectedSoftware.map(item => ({\n      name: item.software.name,\n      version: item.version.c8y_Software.version,\n      url: item.version.c8y_Software.url,\n      action: item.action\n    }));\n\n    const interpolationParams: object = {\n      name: softwareList[0].name,\n      version: softwareList[0].version,\n      count: softwareList.length - 1\n    };\n    let description: string;\n    switch (softwareList.length) {\n      case 1:\n        description = this.translate.instant(this.descriptionTemplateSingle, interpolationParams);\n        break;\n      case 2:\n        description = this.translate.instant(this.descriptionTemplateOneOther, interpolationParams);\n        break;\n      default:\n        description = this.translate.instant(this.descriptionTemplateMultiple, interpolationParams);\n    }\n\n    return {\n      name: gettext('Software update'),\n      prototype: ({\n        description,\n        c8y_SoftwareUpdate: softwareList\n      } as unknown) as IOperation\n    };\n  }\n\n  private getUniqueDeviceTypes(): string[] {\n    return uniq(\n      this.selectedSoftware\n        .map(item => item.software.c8y_Filter && item.software.c8y_Filter.type)\n        .filter(type => !!type)\n    );\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { gettext, Tab } from '@c8y/ngx-components';\n\n@Component({\n  selector: 'c8y-bulk-operation-details-tabs',\n  templateUrl: './bulk-operation-details-tabs.component.html'\n})\nexport class BulkOperationDetailsTabsComponent implements OnInit {\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  readOnly: boolean = false;\n  @Output() onRetryFailedOperations: EventEmitter<Partial<IOperationBulk>> = new EventEmitter();\n  @Output() showFailedOperation: EventEmitter<number> = new EventEmitter();\n\n  @ViewChild('details', { static: true }) detailsTemplate: any;\n  @ViewChild('audit', { static: true }) auditTemplate: any;\n\n  tabs: Tab[] = [];\n  template: ViewContainerRef;\n\n  ngOnInit(): void {\n    this.template = this.detailsTemplate;\n\n    this.tabs = [\n      {\n        label: gettext('Details'),\n        path: null,\n        icon: 'asterisk',\n        template: this.detailsTemplate\n      },\n      {\n        label: gettext('History of changes'),\n        path: null,\n        icon: 'archive',\n        template: this.auditTemplate\n      }\n    ];\n  }\n}\n","import { gettext } from '@c8y/ngx-components';\n\nexport const SINGLE_OP_STATUS_NAMES = {\n  PENDING: gettext('Pending'),\n  EXECUTING: gettext('Executing'),\n  FAILED: gettext('Failed'),\n  SUCCESSFUL: gettext('Successful'),\n  ALL: gettext('All')\n};\n\nexport const SINGLE_OP_STATUS_PROPERTIES = [\n  {\n    label: SINGLE_OP_STATUS_NAMES.PENDING,\n    iconClass: 'fa fw fa-clock-o text-info',\n    selected: false\n  },\n  {\n    label: SINGLE_OP_STATUS_NAMES.EXECUTING,\n    iconClass: 'fa fw fa-refresh text-info',\n    selected: false\n  },\n  {\n    label: SINGLE_OP_STATUS_NAMES.SUCCESSFUL,\n    iconClass: 'fa fw fa-check-circle text-success',\n    selected: false\n  },\n  {\n    label: SINGLE_OP_STATUS_NAMES.FAILED,\n    iconClass: 'fa fw fa-exclamation-circle text-danger',\n    selected: false\n  }\n];\n","import { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { IOperation } from '@c8y/client';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { BulkOperationsService, C8Y_BULK_TYPE_FRAGMENTS } from '../bulk-operations.service';\nimport { omit } from 'lodash-es';\nimport { SINGLE_OP_STATUS_NAMES, SINGLE_OP_STATUS_PROPERTIES } from './single-operation-item.model';\n\n@Component({\n  selector: 'c8y-single-operation-item',\n  templateUrl: './single-operation-item.component.html'\n})\nexport class SingleOperationItemComponent {\n  device = {};\n  showIfTextTruncated = false;\n  singleOperationStatusNames = SINGLE_OP_STATUS_NAMES;\n  singleOperationsStatusProperties = SINGLE_OP_STATUS_PROPERTIES;\n  iconClass: string;\n  @Input()\n  operation: IOperation;\n  @Input()\n  readOnly: boolean = false;\n  @ViewChild('failureReason', { static: true }) failureReasonRef: ElementRef;\n\n  constructor(\n    private bulkOperationsService: BulkOperationsService,\n    private alertService: AlertService\n  ) {}\n\n  async ngOnInit() {\n    this.iconClass = this.getIconClass();\n    this.device = await this.getDeviceMO(this.operation.deviceId);\n  }\n\n  ngAfterViewInit() {\n    this.isTextTruncated();\n  }\n\n  async retrySingleOperation(singleOperation) {\n    const operationToCreate = omit(singleOperation, [\n      'id',\n      'self',\n      'status',\n      'failureReason',\n      'creationTime',\n      'delivery'\n    ]);\n\n    try {\n      await this.bulkOperationsService.createSingleOperation(operationToCreate);\n      this.alertService.success(gettext('Operation created.'));\n    } catch (er) {\n      this.alertService.addServerFailure(er);\n    }\n  }\n\n  getIconClass() {\n    return this.singleOperationsStatusProperties.find(\n      operationProperties => operationProperties.label.toUpperCase() === this.operation.status\n    ).iconClass;\n  }\n\n  private async getDeviceMO(deviceId) {\n    const inventoryMO = await this.bulkOperationsService.getManagedObject(deviceId);\n    if (inventoryMO) {\n      return inventoryMO.data;\n    }\n  }\n\n  private isTextTruncated() {\n    if (this.operation.failureReason) {\n      const el = this.failureReasonRef.nativeElement;\n      this.showIfTextTruncated = el.offsetWidth < el.scrollWidth ? true : false;\n    }\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\nimport { IStatusOption } from './status-option.model';\n\n@Component({\n  selector: 'c8y-status-filter',\n  templateUrl: './status-filter.component.html',\n  host: { class: 'btn-group' }\n})\nexport class StatusFilterComponent {\n  statusOptions: Array<{ selected: boolean; option: IStatusOption }> = [];\n\n  /** List of filter options to be displayed */\n  @Input() set options(options: IStatusOption[]) {\n    this.statusOptions = (options || []).map(option => ({ selected: false, option }));\n  }\n\n  /**\n   * Allows multiple options to be active simultaneosly.\n   */\n  @Input('multiple') set _multiple(multiple: boolean) {\n    this.multiple = coerceBooleanProperty(multiple);\n  }\n\n  /** Display the filter as a small button group */\n  @Input('small') set _small(small: boolean) {\n    this.small = coerceBooleanProperty(small);\n  }\n\n  @HostBinding('class.btn-group-sm') get displaySmall() {\n    return this.small;\n  }\n\n  @Output() onFilterChanged: EventEmitter<IStatusOption[]> = new EventEmitter();\n\n  isAllButtonSelected: boolean = true;\n\n  private multiple: boolean;\n  private small: boolean;\n\n  changeFilter(option: { selected: boolean; option: IStatusOption }) {\n    this.isAllButtonSelected = false;\n    let emitNeeded: boolean = false;\n\n    if (this.multiple) {\n      option.selected = !option.selected;\n      emitNeeded = true;\n    } else if (!option.selected) {\n      option.selected = true;\n      this.statusOptions.filter(op => op !== option).forEach(op => (op.selected = false));\n      emitNeeded = true;\n    }\n\n    if (emitNeeded) {\n      this.emitSelectedOptions();\n    }\n  }\n\n  removeFilter() {\n    this.isAllButtonSelected = true;\n    this.statusOptions.forEach(op => (op.selected = false));\n\n    this.emitSelectedOptions();\n  }\n\n  /**\n   * Allows the filter to be initalliy displayed with some preset filters.\n   *\n   * @param filters An `IStatusOption` array defining filter options to be preset.\n   * @param emit  (optional) If `true` component will emit `onFilterChanged` event.\n   */\n  preset(filters: IStatusOption[], emit: boolean = true) {\n    let firstSelected: boolean = false;\n\n    this.statusOptions.forEach(option => (option.selected = false));\n\n    this.statusOptions\n      .filter(option => (filters || []).map(o => o.label).includes(option.option.label))\n      .filter(() => {\n        // only first option passed will be set in single selection mode\n        const include: boolean = this.multiple || !firstSelected;\n        if (include) {\n          firstSelected = true;\n        }\n\n        return include;\n      })\n      .forEach(option => (option.selected = true));\n\n    this.isAllButtonSelected = !(filters && filters.length);\n\n    if (emit) {\n      this.emitSelectedOptions();\n    }\n  }\n\n  reset() {\n    this.removeFilter();\n  }\n\n  activeFilters(): IStatusOption[] {\n    return this.statusOptions.filter(option => option.selected).map(option => option.option);\n  }\n\n  isFilterApplied(): boolean {\n    return this.statusOptions.some(option => option.selected);\n  }\n\n  private emitSelectedOptions() {\n    this.onFilterChanged.emit(\n      this.statusOptions.filter(option => option.selected).map(option => option.option)\n    );\n  }\n}\n","import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { IOperation, IOperationBulk, IResultList } from '@c8y/client';\nimport { StatusFilterComponent } from '../../status-filter/status-filter.component';\nimport { IStatusOption } from '../../status-filter/status-option.model';\nimport { BulkOperationsService } from '../bulk-operations.service';\nimport { SINGLE_OP_STATUS_NAMES, SINGLE_OP_STATUS_PROPERTIES } from './single-operation-item.model';\n\n@Component({\n  selector: 'c8y-single-operations-list',\n  templateUrl: './single-operations-list.component.html'\n})\nexport class SingleOperationsListComponent implements AfterViewInit, OnChanges {\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  readOnly: boolean = false;\n  @Output() onRetryFailedOperations: EventEmitter<Partial<IOperationBulk>> = new EventEmitter();\n\n  @ViewChild(StatusFilterComponent, { static: false })\n  statusFilter: StatusFilterComponent;\n\n  singleOperationStatusProperties = SINGLE_OP_STATUS_PROPERTIES;\n  singleOperationStatusNames = SINGLE_OP_STATUS_NAMES;\n  singleOperations: IResultList<IOperation>;\n\n  constructor(private bulkOperationsService: BulkOperationsService) {}\n\n  async ngAfterViewInit() {\n    if (this.statusFilter) {\n      this.filterOperationsByType();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.bulkOperation && !changes.bulkOperation.firstChange) {\n      this.filterOperationsByType();\n    }\n  }\n\n  filterOperationsByType() {\n    if (this.statusFilter) {\n      const typeFilter = this.getFilterTypeOfSingleOperations();\n\n      this.statusFilter.preset(\n        typeFilter === this.singleOperationStatusNames.ALL\n          ? []\n          : [{ label: typeFilter } as IStatusOption]\n      );\n    } else {\n      setTimeout(this.filterOperationsByType.bind(this));\n    }\n  }\n\n  getFilterTypeOfSingleOperations() {\n    const progress = this.bulkOperation.progress;\n\n    if (progress.failed > 0) {\n      return this.singleOperationStatusNames.FAILED;\n    } else if (progress.failed === 0 && progress.successful === 0 && progress.pending === 0) {\n      return this.singleOperationStatusNames.EXECUTING;\n    } else if (progress.failed === 0 && progress.successful === 0 && progress.executing === 0) {\n      return this.singleOperationStatusNames.PENDING;\n    } else if (progress.failed === 0 && progress.pending === 0 && progress.executing === 0) {\n      return this.singleOperationStatusNames.SUCCESSFUL;\n    }\n\n    return this.singleOperationStatusNames.ALL;\n  }\n\n  async getOperationsByStatus(filter: IStatusOption[]) {\n    this.singleOperations = await this.bulkOperationsService.getSingleOperationsByStatus(\n      filter[0] && filter[0].label,\n      this.bulkOperation.id\n    );\n  }\n\n  retryBulkOperation() {\n    this.onRetryFailedOperations.emit(this.bulkOperation);\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport {\n  AlarmsDeviceGridColumn,\n  DeviceGridComponent,\n  GroupDeviceGridColumn,\n  ModelDeviceGridColumn,\n  NameDeviceGridColumn,\n  RegistrationDateDeviceGridColumn,\n  StatusDeviceGridColumn,\n  TypeDeviceGridColumn\n} from '@c8y/ngx-components/device-grid';\nimport { Column, FilteringActionType } from '@c8y/ngx-components';\nimport { Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'c8y-device-selector',\n  templateUrl: 'device-selector.component.html'\n})\nexport class DeviceSelectorComponent implements OnInit, OnDestroy {\n  @ViewChild(DeviceGridComponent, { static: true })\n  deviceGrid: DeviceGridComponent;\n\n  @Input()\n  deviceTypes: Observable<string[]>;\n\n  typeColumn: Column = new TypeDeviceGridColumn();\n\n  @Output()\n  onDeviceQueryStringChange: EventEmitter<string> = new EventEmitter<string>();\n\n  columns: Column[] = [\n    new StatusDeviceGridColumn(),\n    new NameDeviceGridColumn(),\n    this.typeColumn,\n    new ModelDeviceGridColumn(),\n    new GroupDeviceGridColumn(),\n    new RegistrationDateDeviceGridColumn(),\n    new AlarmsDeviceGridColumn()\n  ];\n\n  private unsubscribe$: Subject<boolean> = new Subject();\n\n  ngOnInit(): void {\n    if (this.deviceTypes) {\n      this.deviceTypes\n        .pipe(\n          distinctUntilChanged(),\n          takeUntil(this.unsubscribe$)\n        )\n        .subscribe((types: string[]) => {\n          this.deviceGrid.updateFiltering([this.typeColumn.name], {\n            type:\n              types && types.length\n                ? FilteringActionType.ApplyFilter\n                : FilteringActionType.ResetFilter,\n            payload: types\n              ? {\n                  filteringModifier: {\n                    externalFilterQuery: {\n                      types\n                    }\n                  }\n                }\n              : undefined\n          });\n        });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe$.next(true);\n    this.unsubscribe$.complete();\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { gettext, Tab, TabFactory } from '@c8y/ngx-components';\r\n\r\n@Injectable()\r\nexport class TabsFactory implements TabFactory {\r\n  constructor(public router: Router) {}\r\n  get() {\r\n    const tabs: Tab[] = [];\r\n    if (this.router.url.match(/devicecontrol/g)) {\r\n      tabs.push({\r\n        path: 'devicecontrol/single',\r\n        label: gettext('Single operations'),\r\n        icon: 'c8y-icon c8y-icon-device-control',\r\n        priority: 1100,\r\n        orientation: 'horizontal'\r\n      } as Tab);\r\n      tabs.push({\r\n        path: 'devicecontrol/bulk',\r\n        label: gettext('Bulk operations'),\r\n        icon: 'c8y-icon c8y-icon-energy',\r\n        priority: 1050,\r\n        orientation: 'horizontal'\r\n      } as Tab);\r\n    }\r\n\r\n    return tabs;\r\n  }\r\n}\r\n","import { Component, forwardRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators\n} from '@angular/forms';\nimport { gettext } from '@c8y/ngx-components';\nimport { isEmpty } from 'lodash-es';\nimport { Subscription } from 'rxjs';\nimport { throttleTime } from 'rxjs/operators';\nimport { OperationSchedule } from './operation-schedule.interface';\n\n@Component({\n  selector: 'c8y-operation-scheduler',\n  templateUrl: 'operation-scheduler.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: forwardRef(() => OperationSchedulerComponent)\n    },\n    {\n      provide: NG_VALIDATORS,\n      multi: true,\n      useExisting: forwardRef(() => OperationSchedulerComponent)\n    }\n  ]\n})\nexport class OperationSchedulerComponent\n  implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  @Input('minutesAhead') set _minutesAhead(minutes: number) {\n    if (minutes && minutes > this.MINUTES_AHEAD_DEFAULT) {\n      this.minutesAhead = minutes;\n    }\n  }\n  @Input('delayConfig') set _delayConfig(config: { seconds: number; milliseconds: number }) {\n    if (config) {\n      if (config.seconds > this.DELAY_SECONDS_DEFAULT) {\n        this.delaySeconds = config.seconds;\n      }\n\n      if (config.milliseconds > this.DELAY_MILLISECONDS_DEFAULT) {\n        this.delayMilliseconds = config.milliseconds;\n      }\n    }\n  }\n\n  placeholder: string = gettext('Start date');\n  fgOperationScheduler: FormGroup;\n  minDate: Date;\n  minDelay: number;\n  delayErrors: ValidationErrors = null;\n  pickerErrors: ValidationErrors = null;\n\n  private readonly DELAY_SECONDS_DEFAULT: number = 1;\n  private readonly DELAY_MILLISECONDS_DEFAULT: number = 1;\n  private readonly MINUTES_AHEAD_DEFAULT: number = 5;\n  private delaySeconds: number = this.DELAY_SECONDS_DEFAULT;\n  private delayMilliseconds: number = this.DELAY_MILLISECONDS_DEFAULT;\n  private minutesAhead: number = this.MINUTES_AHEAD_DEFAULT;\n  private currentUnit: string = 'seconds';\n  private delayInSeconds: number;\n  private initialDate: Date;\n  private subscription: Subscription;\n\n  private onChange: (name) => void;\n  private onTouched: () => void;\n  private onValidatorChanged: () => void;\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit() {\n    this.minDate = new Date();\n    this.initialDate = new Date(\n      this.minDate.setMinutes(this.minDate.getMinutes() + this.minutesAhead)\n    );\n    this.minDelay = this.delaySeconds;\n\n    this.fgOperationScheduler = this.formBuilder.group({\n      picker: ['', [Validators.required, this.dateValidation]],\n      time: ['', [Validators.required, this.timeValidation]],\n      delay: ['', [Validators.required, Validators.min(this.minDelay)]],\n      unit: ['seconds']\n    });\n\n    this.fgOperationScheduler.patchValue({\n      picker: this.initialDate,\n      time: this.initialDate,\n      delay: this.minDelay\n    });\n\n    // Due to the validation of picker and time it could be possible that value changes\n    // are emitted more than once. Therefore we throttle the emits.\n    const valueChanges$ = this.fgOperationScheduler.valueChanges.pipe(throttleTime(100));\n    this.subscription = valueChanges$.subscribe(data => {\n      this.delayErrors = this.fgOperationScheduler.controls.delay.errors;\n      this.pickerErrors = this.fgOperationScheduler.controls.picker.errors;\n      this.convertDelayHandler(data.unit);\n      this.emitData(data);\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription && !this.subscription.closed) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  writeValue(value: OperationSchedule): void {\n    if (value) {\n      this.fgOperationScheduler.patchValue({\n        picker: value.scheduledDate,\n        time: value.scheduledDate,\n        delay: value.delayInSeconds > 1 ? value.delayInSeconds : value.delayInSeconds * 1000,\n        unit: value.delayInSeconds > 1 ? 'seconds' : 'milliseconds'\n      });\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    isDisabled ? this.fgOperationScheduler.disable() : this.fgOperationScheduler.enable();\n  }\n\n  validate(): ValidationErrors {\n    if (this.fgOperationScheduler.invalid) {\n      return {\n        ...this.fgOperationScheduler.controls.picker.errors,\n        ...this.fgOperationScheduler.controls.time.errors,\n        ...this.fgOperationScheduler.controls.delay.errors\n      };\n    }\n  }\n\n  registerOnValidatorChange(fn: any) {\n    this.onValidatorChanged = fn;\n  }\n\n  markAsTouched(): void {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  convertDelayHandler(unit: string) {\n    if (this.currentUnit === unit) {\n      return;\n    }\n\n    this.currentUnit = unit;\n    this.convertDelay(this.currentUnit);\n\n    // update validator on delay control to make sure that\n    // switching from minutes to seconds or vice versa does not harm validation.\n    this.fgOperationScheduler.controls.delay.setValidators([Validators.required]);\n    this.fgOperationScheduler.controls.delay.updateValueAndValidity();\n  }\n\n  emitData(data: { delayInSeconds: number; picker: Date; time?: Date; delay?: number }) {\n    if (this.onValidatorChanged) {\n      this.onValidatorChanged();\n    }\n\n    if (data.picker && data.time) {\n      data.picker = this.combineDateAndTime(data.picker, data.time);\n    }\n\n    this.convertDelay(this.currentUnit);\n    data.delayInSeconds = this.delayInSeconds;\n\n    if (this.onChange) {\n      this.onChange({\n        delayInSeconds: data.delayInSeconds,\n        scheduledDate: data.picker\n      });\n    }\n  }\n\n  private convertDelay(unit: string) {\n    if (unit && this.fgOperationScheduler.controls.delay.value) {\n      this.delayMilliseconds = this.fgOperationScheduler.controls.delay.value;\n      if (unit === 'milliseconds') {\n        this.minDelay =\n          this.delayMilliseconds > this.DELAY_MILLISECONDS_DEFAULT\n            ? this.delayMilliseconds\n            : this.DELAY_MILLISECONDS_DEFAULT;\n        this.delayInSeconds = this.fgOperationScheduler.controls.delay.value / 1000;\n      } else {\n        this.delaySeconds = this.fgOperationScheduler.controls.delay.value;\n        this.minDelay =\n          this.delaySeconds > this.DELAY_SECONDS_DEFAULT\n            ? this.delaySeconds\n            : this.DELAY_SECONDS_DEFAULT;\n        this.delayInSeconds = this.fgOperationScheduler.controls.delay.value;\n      }\n    }\n  }\n\n  private combineDateAndTime(date: Date, time: Date) {\n    return new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n      time.getHours(),\n      time.getMinutes()\n    );\n  }\n\n  private dateValidation(fControl: FormControl) {\n    if (fControl.value) {\n      const date = fControl.value as Date;\n      fControl.parent.get('time').setValue(date);\n      return date >= new Date()\n        ? null\n        : {\n            dateValidation: true\n          };\n    }\n    return { dateValidation: true };\n  }\n\n  private timeValidation(fControl: FormControl) {\n    if (fControl.value) {\n      const date = fControl.value as Date;\n      const result =\n        date >= new Date()\n          ? null\n          : {\n              dateValidation: true\n            };\n\n      const picker = fControl.parent.get('picker');\n\n      if (result) {\n        picker.setErrors(result);\n        picker.markAsTouched();\n        return result;\n      }\n\n      if (picker && picker.errors && picker.errors.dateValidation) {\n        delete picker.errors.dateValidation;\n\n        if (isEmpty(picker.errors)) {\n          picker.setErrors(null);\n          return result;\n        }\n\n        picker.setErrors(picker.errors);\n      }\n      return result;\n    }\n    return { dateValidation: true };\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { IManagedObject, InventoryService, IResultList } from '@c8y/client';\n\n@Component({\n  selector: 'c8y-operation-summary',\n  templateUrl: 'operation-summary.component.html'\n})\nexport class OperationSummaryComponent {\n  @Input()\n  name: string;\n\n  @Input()\n  description: string;\n\n  @Input()\n  set deviceQueryString(query: string) {\n    this.displayDeviceCount = true;\n    const filters = {\n      q: query || '',\n      pageSize: 1,\n      currentPage: 1,\n      withTotalPages: true\n    };\n    this.inventoryService\n      .list(filters)\n      .then((result: IResultList<IManagedObject>) => (this.deviceCount = result.paging.totalPages));\n  }\n\n  deviceCount: number = 0;\n  displayDeviceCount: boolean = false;\n\n  constructor(private inventoryService: InventoryService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CoreModule, FormsModule, HOOK_TABS, Route } from '@c8y/ngx-components';\nimport { DeviceGridModule } from '@c8y/ngx-components/device-grid';\nimport { DeviceProfileModule } from '@c8y/ngx-components/device-profile';\nimport { RepositoryModule } from '@c8y/ngx-components/repository';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { TimepickerModule } from 'ngx-bootstrap/timepicker';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\nimport {\n  BulkOperationsService,\n  C8Y_BULK_TYPES,\n  HOOK_LIST_BULK_TYPE\n} from './bulk/bulk-operations.service';\nimport { BulkOperationFromSingleComponent } from './bulk/create-from-single/bulk-operation-from-single.component';\nimport { BulkOperationStepper } from './bulk/creation/bulk-operation-stepper.component';\nimport { BulkOperationsStepperContainerComponent } from './bulk/creation/bulk-operations-stepper-container.component';\nimport { ConfirmDeviceProfileSelectionStepComponent } from './bulk/creation/device-profile-update-stepper/confirm-device-profile-selection-step.component';\nimport { SelectDeviceProfileStepComponent } from './bulk/creation/device-profile-update-stepper/select-device-profile-step.component';\nimport { SelectFirmwareComponent } from './bulk/creation/firmware-update-stepper/select-firmware.component';\nimport { VersionOrPatchComponent } from './bulk/creation/firmware-update-stepper/version-or-patch.component';\nimport { ConfirmSoftwareSelectionStepComponent } from './bulk/creation/software-update-stepper/confirm-software-selection-step.component';\nimport { SelectSoftwareStepComponent } from './bulk/creation/software-update-stepper/select-software-step.component';\nimport { StepperBulkTypeConfiguration } from './bulk/creation/stepper-bulk-type-configuration.component';\nimport { StepperBulkTypeDeviceProfile } from './bulk/creation/stepper-bulk-type-device-profile.component';\nimport { StepperFirmware } from './bulk/creation/stepper-bulk-type-firmware.component';\nimport { StepperBulkTypeSoftware } from './bulk/creation/stepper-bulk-type-software.component';\nimport { CustomStep } from './bulk/custom-step.directive';\nimport { BulkOperationDetailsTabsComponent } from './bulk/list/bulk-operation-details-tabs.component';\nimport { BulkOperationDetailsComponent } from './bulk/list/bulk-operation-details.component';\nimport { BulkOperationDetailsService } from './bulk/list/bulk-operation-details.service';\nimport { BulkOperationListItemComponent } from './bulk/list/bulk-operation-list-item.component';\nimport { BulkOperationWrapperComponent } from './bulk/list/bulk-operation-wrapper.component';\nimport { BulkOperationsListComponent } from './bulk/list/bulk-operations-list.component';\nimport { SingleOperationItemComponent } from './bulk/list/single-operation-item.component';\nimport { SingleOperationsListComponent } from './bulk/list/single-operations-list.component';\nimport { BulkOperationTypeListComponent } from './bulk/list/type-list/bulk-operation-type-list.component';\nimport { BulkOperationsModalComponent } from './bulk/modal/bulk-operations-modal.component';\nimport { BulkOperationsRescheduleModalComponent } from './bulk/modal/bulk-operations-reschedule-modal.component';\nimport { OperationDetailsComponent } from './details/operation-details.component';\nimport { DeviceSelectorComponent } from './device-selector/device-selector.component';\nimport { TabsFactory } from './factories/tabs.factory';\nimport { OperationSchedulerComponent } from './scheduler/operation-scheduler.component';\nimport { StatusFilterComponent } from './status-filter/status-filter.component';\nimport { OperationSummaryComponent } from './summary/operation-summary.component';\n\nexport const routes: Route[] = [\n  {\n    path: 'devicecontrol',\n    redirectTo: 'devicecontrol/single',\n    pathMatch: 'full'\n  },\n  {\n    path: 'devicecontrol/bulk',\n    component: BulkOperationsListComponent\n  },\n  {\n    path: 'devicecontrol/bulk/creation/:type',\n    component: BulkOperationsStepperContainerComponent\n  },\n  {\n    path: 'devicecontrol/single/create-bulk/:operationId',\n    component: BulkOperationFromSingleComponent\n  }\n];\n\n@NgModule({\n  declarations: [\n    SingleOperationItemComponent,\n    SingleOperationsListComponent,\n    BulkOperationDetailsComponent,\n    BulkOperationDetailsTabsComponent,\n    BulkOperationListItemComponent,\n    BulkOperationsListComponent,\n    BulkOperationTypeListComponent,\n    BulkOperationsModalComponent,\n    BulkOperationStepper,\n    BulkOperationsStepperContainerComponent,\n    BulkOperationFromSingleComponent,\n    BulkOperationWrapperComponent,\n    CustomStep,\n    DeviceSelectorComponent,\n    StatusFilterComponent,\n    StepperBulkTypeSoftware,\n    StepperFirmware,\n    StepperBulkTypeConfiguration,\n    StepperBulkTypeDeviceProfile,\n    OperationDetailsComponent,\n    OperationSchedulerComponent,\n    OperationSummaryComponent,\n    VersionOrPatchComponent,\n    SelectFirmwareComponent,\n    BulkOperationsRescheduleModalComponent,\n    ConfirmSoftwareSelectionStepComponent,\n    SelectSoftwareStepComponent,\n    SelectDeviceProfileStepComponent,\n    ConfirmDeviceProfileSelectionStepComponent\n  ],\n  imports: [\n    CoreModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot(routes, { useHash: true }),\n    TooltipModule.forRoot(),\n    PopoverModule.forRoot(),\n    CollapseModule.forRoot(),\n    BsDropdownModule.forRoot(),\n    BsDatepickerModule.forRoot(),\n    TimepickerModule.forRoot(),\n    RepositoryModule,\n    DeviceProfileModule,\n    DeviceGridModule\n  ],\n  exports: [\n    BulkOperationsListComponent,\n    BulkOperationsModalComponent,\n    BulkOperationStepper,\n    CustomStep,\n    OperationSchedulerComponent\n  ],\n  providers: [\n    BulkOperationsService,\n    BulkOperationDetailsService,\n    { provide: HOOK_TABS, useClass: TabsFactory, multi: true },\n    { provide: HOOK_LIST_BULK_TYPE, useValue: C8Y_BULK_TYPES }\n  ],\n  entryComponents: [\n    SingleOperationItemComponent,\n    BulkOperationDetailsComponent,\n    BulkOperationListItemComponent,\n    BulkOperationsListComponent,\n    BulkOperationsModalComponent,\n    BulkOperationsStepperContainerComponent,\n    BulkOperationsRescheduleModalComponent,\n    BulkOperationWrapperComponent\n  ]\n})\nexport class OperationsModule {}\n"]}