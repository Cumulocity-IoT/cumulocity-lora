!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/common"),require("@angular/core"),require("@c8y/client"),require("@c8y/ngx-components"),require("lodash-es"),require("ngx-bootstrap/modal"),require("rxjs"),require("ngx-bootstrap"),require("@angular/router"),require("rxjs/operators"),require("@angular/forms"),require("@c8y/ngx-components/device-grid"),require("@c8y/ngx-components/device-profile"),require("@c8y/ngx-components/repository"),require("ngx-bootstrap/collapse"),require("ngx-bootstrap/datepicker"),require("ngx-bootstrap/dropdown"),require("ngx-bootstrap/popover"),require("ngx-bootstrap/timepicker"),require("ngx-bootstrap/tooltip"),require("@ngx-translate/core"),require("@angular/cdk/coercion")):"function"==typeof define&&define.amd?define("@c8y/ngx-components/operations",["exports","@angular/common","@angular/core","@c8y/client","@c8y/ngx-components","lodash-es","ngx-bootstrap/modal","rxjs","ngx-bootstrap","@angular/router","rxjs/operators","@angular/forms","@c8y/ngx-components/device-grid","@c8y/ngx-components/device-profile","@c8y/ngx-components/repository","ngx-bootstrap/collapse","ngx-bootstrap/datepicker","ngx-bootstrap/dropdown","ngx-bootstrap/popover","ngx-bootstrap/timepicker","ngx-bootstrap/tooltip","@ngx-translate/core","@angular/cdk/coercion"],t):t(((e=e||self).c8y=e.c8y||{},e.c8y["ngx-components"]=e.c8y["ngx-components"]||{},e.c8y["ngx-components"].operations={}),e.ng.common,e.ng.core,e.client,e.c8y["ngx-components"],e.lodashEs,e.modal,e.rxjs,e.ngxBootstrap,e.ng.router,e.rxjs.operators,e.ng.forms,e.c8y["ngx-components"]["device-grid"],e.c8y["ngx-components"]["device-profile"],e.c8y["ngx-components"].repository,e.collapse,e.datepicker,e.dropdown,e.popover,e.timepicker,e.tooltip,e.core$1,e.ng.cdk.coercion)}(this,(function(e,t,n,i,o,r,s,a,l,c,p,u,d,y,f,v,h,g,m,b,O,S,w){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */var x=function(e,t){return(x=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function k(e,t){function n(){this.constructor=e}x(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var C,D=function(){return(D=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function T(e,t,n,i){var o,r=arguments.length,s=r<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,i);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(r<3?o(s):r>3?o(t,n,s):o(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s}function I(e,t,n,i){return new(n||(n=Promise))((function(o,r){function s(e){try{l(i.next(e))}catch(e){r(e)}}function a(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((i=i.apply(e,t||[])).next())}))}function F(e,t){var n,i,o,r,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,i=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){s.label=r[1];break}if(6===r[0]&&s.label<o[1]){s.label=o[1],o=r;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(r);break}o[2]&&s.ops.pop(),s.trys.pop();continue}r=t.call(e,s)}catch(e){r=[6,e],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}}function E(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var i,o,r=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=r.next()).done;)s.push(i.value)}catch(e){o={error:e}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(o)throw o.error}}return s}(C=e.ɵa||(e.ɵa={})).SOFTWARE="software",C.FIRMWARE="firmware",C.CONFIGURATION="configuration",C.DEVICE_PROFILE="device-profile";var P=function(){function e(e,t){this.bsModalRef=e,this.resolver=t,this.showComponent=!1}return e.prototype.cancel=function(){this.bsModalRef.hide()},e.prototype.createComponent=function(e){if(e&&e.component){this.showComponent=!0;var t=this.resolver.resolveComponentFactory(e.component);this.container.createComponent(t)}},e.ctorParameters=function(){return[{type:l.BsModalRef},{type:n.ComponentFactoryResolver}]},T([n.ViewChild("container",{static:!1,read:n.ViewContainerRef})],e.prototype,"container",void 0),e=T([n.Component({selector:"c8y-bulk-operations-modal",template:'<div class="viewport-modal">\n  <div class="modal-header dialog-header">\n    <h1 class="c8y-icon c8y-icon-energy"></h1>\n    <h4 translate>New bulk operation</h4>\n  </div>\n  <div class="modal-inner-scroll">\n    <div class="modal-body text-center" [hidden]="showComponent">\n      <h4 translate>Select one of the available options</h4>\n      <p c8y-guide-docs>\n        <small translate>\n          Check the\n          <a c8y-guide-href="reference/device-control/#bulk-operation"\n            >Reference guide`KEEP_ORIGINAL`</a\n          >\n          for more details.</small\n        >\n      </p>\n    </div>\n\n    <c8y-bulk-operation-type-list\n      (onCustomType)="createComponent($event)"\n    ></c8y-bulk-operation-type-list>\n    <template #container></template>\n  </div>\n  <div class="modal-footer" [hidden]="showComponent">\n    <button\n      (click)="cancel()"\n      type="button"\n      class="btn btn-default"\n      title="{{ \'Cancel\' | translate }}"\n    >\n      <span translate>Cancel</span>\n    </button>\n  </div>\n</div>\n'})],e)}(),_="devicecontrol/bulk/creation/",B=new n.InjectionToken("LIST_BULK_TYPE"),R=[{type:e.ɵa.CONFIGURATION,c8yIcon:"cogs",name:o.gettext("Configuration update"),path:_+"configuration",component:void 0,fragments:["c8y_DownloadConfigFile","c8y_Configuration"],selected:!1},{type:e.ɵa.FIRMWARE,c8yIcon:"c8y-firmware",name:o.gettext("Firmware update"),path:_+"firmware",component:void 0,fragments:["c8y_Firmware"],selected:!1},{type:e.ɵa.SOFTWARE,c8yIcon:"c8y-tools",name:o.gettext("Software update"),path:_+"software",component:void 0,fragments:["c8y_SoftwareList","c8y_SoftwareUpdate"],selected:!1},{type:e.ɵa.DEVICE_PROFILE,c8yIcon:"c8y-device-profile",name:o.gettext("Apply device profile"),path:_+"device-profile",component:void 0,fragments:["c8y_DeviceProfile"],selected:!1}],A=function(e,t){return e.concat(t.fragments)},N=R.reduce(A,[]),L=function(){function e(e,t,n,i,o,s){this.operationBulkService=e,this.operationService=t,this.inventoryService=n,this.bsModalService=i,this.location=o,this.bulkTypes=s,this.DD_LOW_COUNT=10,this.firmwareId=new a.Subject,s&&s.length>0&&(this.bulkTypes=s.map((function(e){return r.isUndefined(e.selected)&&(e.selected=!1),e})))}var o,l;return e.prototype.getBulkOperations=function(e){void 0===e&&(e={});var t=D({withTotalPages:!0,withDeleted:!0,pageSize:50},e);return this.operationBulkService.list(t)},e.prototype.getBulkOperationById=function(e){return this.operationBulkService.detail(e)},e.prototype.createBulkOperation=function(e){return this.operationBulkService.create(e)},e.prototype.deleteBulkOperation=function(e){return this.operationBulkService.delete(e)},e.prototype.updateBulkOperation=function(e){return this.operationBulkService.update(e)},e.prototype.getOperation=function(e){return this.operationService.detail(e)},e.prototype.showNewBulkOperationModal=function(){this.bsModalRef=this.bsModalService.show(P,{backdrop:"static",class:"modal-sm"})},e.prototype.hideNewBulkOperationModal=function(){this.bsModalRef&&this.bsModalRef.hide()},e.prototype.returnToBulkOperationOverview=function(){this.location.back()},e.prototype.setBulkTypes=function(e){this.bulkTypes=e},e.prototype.getBulkTypes=function(){return this.bulkTypes},e.prototype.setFirmwareId=function(e){this.firmwareId.next(e)},e.prototype.createGroup=function(e){var t={name:"Bulk operations group",type:"c8y_DynamicGroup",c8y_IsDynamicGroup:{invisible:{}},c8y_DeviceQueryString:e};return this.inventoryService.create(t)},e.prototype.scheduleBulkOperation=function(e,t){return I(this,void 0,void 0,(function(){var n,i;return F(this,(function(o){switch(o.label){case 0:return[4,this.createGroup(e)];case 1:return n=o.sent(),i={groupId:n.data.id,operationPrototype:t.prototype,creationRamp:t.schedule.delayInSeconds,startDate:t.schedule.scheduledDate.toISOString(),note:t.note},[4,this.createBulkOperation(i)];case 2:return o.sent(),[2]}}))}))},e.prototype.getSingleOperationsByStatus=function(e,t){var n={withTotalPages:!0,bulkOperationId:t,status:e&&e.toUpperCase()||""};return this.operationService.list(n)},e.prototype.createSingleOperation=function(e){return this.operationService.create(e)},e.prototype.updateSingleOperation=function(e){return this.operationService.update(e)},e.prototype.getManagedObject=function(e){return this.inventoryService.detail(e)},e.prototype.retrieveBulkOperationType=function(e){var t;return R.some((function(n){if(n.fragments.some((function(t){return r.has(e,t)})))return t=n.type,!0})),t},e.ctorParameters=function(){return[{type:i.OperationBulkService},{type:i.OperationService},{type:i.InventoryService},{type:s.BsModalService},{type:t.Location},{type:Array,decorators:[{type:n.Inject,args:[B]}]}]},e=T([n.Injectable(),(o=5,l=n.Inject(B),function(e,t){l(e,t,o)})],e)}(),$=function(){function e(e,t,n,i){this.activatedRoute=e,this.bulkOpsService=t,this.resolver=n,this.changeDetector=i}return e.prototype.ngOnInit=function(){var e=this;this.activatedRoute.params.subscribe((function(t){t&&t.type&&(e.bulkOperationType=t.type,e.component=e.bulkOpsService.getBulkTypes().find((function(t){return t.path.includes(e.bulkOperationType)})).component,e.changeDetector.detectChanges(),e.createComponent(e.component))}))},e.prototype.createComponent=function(e){if(e){var t=this.resolver.resolveComponentFactory(e);this.container.createComponent(t)}},e.ctorParameters=function(){return[{type:c.ActivatedRoute},{type:L},{type:n.ComponentFactoryResolver},{type:n.ChangeDetectorRef}]},T([n.ViewChild("container",{static:!1,read:n.ViewContainerRef})],e.prototype,"container",void 0),e=T([n.Component({selector:"bulk-operations-stepper-container",template:'<c8y-title>{{ \'New bulk operation\' | translate }}</c8y-title>\n<div class="card card--grid--fullpage">\n  <ng-container [ngSwitch]="bulkOperationType">\n    \x3c!-- Cases: software, firmware and configuration are default c8y-types --\x3e\n    <div *ngSwitchCase="\'software\'" class="d-contents">\n      <c8y-stepper-bulk-type-software></c8y-stepper-bulk-type-software>\n    </div>\n    <div *ngSwitchCase="\'firmware\'" class="d-contents">\n      <c8y-stepper-firmware></c8y-stepper-firmware>\n    </div>\n    <div *ngSwitchCase="\'configuration\'" class="d-contents">\n      <c8y-stepper-bulk-type-configuration></c8y-stepper-bulk-type-configuration>\n    </div>\n    <div *ngSwitchCase="\'device-profile\'" class="d-contents">\n      <c8y-stepper-bulk-type-device-profile></c8y-stepper-bulk-type-device-profile>\n    </div>\n    \x3c!-- This case is for 3rd-party-dev defined types --\x3e\n    <div *ngSwitchDefault class="d-contents">\n      <template #container></template>\n    </div>\n  </ng-container>\n</div>\n'})],e)}(),V=function(){function e(){this.allFilterIsSelected=!1,this.readOnly=!1,this.showFailedOperation=new n.EventEmitter}return e.prototype.scrollToRetriedFromOperation=function(e){this.showFailedOperation.emit(e)},T([n.Input()],e.prototype,"bulkOperation",void 0),T([n.Input()],e.prototype,"readOnly",void 0),T([n.Output()],e.prototype,"showFailedOperation",void 0),e=T([n.Component({selector:"c8y-bulk-operation-details",template:'<div class="row d-flex-md v-fit m-t-16">\n  <div class="col-md-3 flex-item-top">\n    <div class="legend form-block" translate>\n      Details\n    </div>\n    <ul class="list-unstyled small">\n      <li class="p-t-4 p-b-4 flex-row separator-bottom">\n        <label class="small m-0" translate>Start date</label>\n        <span class="flex-item-right">{{ bulkOperation.startDate | c8yDate }}</span>\n      </li>\n      <li class="p-t-4 p-b-4 flex-row separator-bottom">\n        <label class="small m-0">\n          {{ \'Delay\' | translate }}\n          <a\n            class="text-primary"\n            tooltip="{{ \'Delay before sending the operation to the next device.\' | translate }}"\n            container="body"\n          >\n            <i [c8yIcon]="\'info-circle\'"></i>\n          </a>\n        </label>\n        <span [ngPlural]="bulkOperation.creationRamp" class="flex-item-right">\n          <ng-template ngPluralCase="=1">\n            {{ bulkOperation.creationRamp }} <span translate>second</span>\n          </ng-template>\n          <ng-template ngPluralCase="other">\n            {{ bulkOperation.creationRamp }} <span translate>seconds</span>\n          </ng-template>\n        </span>\n      </li>\n      <li class="p-t-4 p-b-4 flex-row separator-bottom">\n        <label class="small m-0" translate>Status</label>\n        <span class="flex-item-right text-uppercase">\n          {{ bulkOperation.generalStatus.toString() | translate }}\n        </span>\n      </li>\n      <li class="p-t-4 p-b-4 flex-row separator-bottom">\n        <label class="small flex-item-top" translate>Result</label>\n        <div class="flex-row flex-grow flex-item-right flex-end">\n          <div class="flex-col">\n            <div *ngIf="bulkOperation.progress.successful > 0" class="icon-flex flex-item-left">\n              <i class="fa fw fa-check-circle text-success m-r-4"></i>\n              <span\n                ngNonBindable\n                translate\n                [translateParams]="{\n                  bulkOperationsCountSuccessful: bulkOperation.progress.successful\n                }"\n              >\n                {{ bulkOperationsCountSuccessful }} successful\n              </span>\n            </div>\n            <div class="icon-flex flex-item-left" *ngIf="bulkOperation.progress.failed > 0">\n              <i class="fa fw fa-warning text-danger m-r-4"></i>\n              <span\n                ngNonBindable\n                translate\n                [translateParams]="{ bulkOperationsCountFailed: bulkOperation.progress.failed }"\n              >\n                {{ bulkOperationsCountFailed }} failed\n              </span>\n            </div>\n            <div class="icon-flex flex-item-left" *ngIf="bulkOperation.progress.pending > 0">\n              <i class="fa fw fa-clock-o m-r-4 text-info"></i>\n              <span\n                ngNonBindable\n                translate\n                [translateParams]="{ bulkOperationsCountPending: bulkOperation.progress.pending }"\n              >\n                {{ bulkOperationsCountPending }} pending\n              </span>\n            </div>\n          </div>\n        </div>\n      </li>\n      <li class="p-t-4 p-b-4 flex-row separator-bottom" *ngIf="bulkOperation.failedParentId">\n        <label class="small m-0" translate>Retried from</label>\n        <span class="flex-item-right">\n          <button\n            class="btn btn-default btn-xs"\n            (click)="scrollToRetriedFromOperation(bulkOperation.failedParentId)"\n          >\n            {{ bulkOperation.failedParentId }}\n          </button>\n        </span>\n      </li>\n      <li class="p-t-4 p-b-4 flex-row separator-bottom" *ngIf="bulkOperation.note">\n        <label class="small flex-item-top" translate>Description</label>\n        <div class="flex-item-right text-right m-l-8">\n          {{ bulkOperation.note }}\n        </div>\n      </li>\n    </ul>\n  </div>\n  <div class="col-md-9 v-fit d-flex d-col">\n    <div class="legend form-block" translate>\n      Operation\n    </div>\n    <pre class="inner-scroll p-16">{{ bulkOperation.operationPrototype | json }}</pre>\n  </div>\n</div>\n'})],e)}(),M=function(){function e(e,t){this.bulkOperationDetailsService=e,this.modalRef=t}return e.ctorParameters=function(){return[{type:U},{type:s.BsModalRef}]},T([n.Input()],e.prototype,"bulkOperation",void 0),e=T([n.Component({selector:"c8y-bulk-operations-wrapper",template:'<div class="viewport-modal">\n  <div class="modal-header">\n    <h3>{{ \'Bulk operation details\' | translate }}</h3>\n  </div>\n\n  <div class="modal-inner-scroll">\n    <c8y-bulk-operation-list-item\n      [bulkOperation]="bulkOperation"\n      [detailsCollapsed]="false"\n      [readOnly]="true"\n      (showFailedOperation)="bulkOperationDetailsService.openDetails($event)"\n    ></c8y-bulk-operation-list-item>\n  </div>\n\n  <div class="modal-footer">\n    <button title="{{ \'Close\' | translate }}" class="btn btn-default" (click)="modalRef.hide()">\n      {{ \'Close\' | translate }}\n    </button>\n  </div>\n</div>\n'})],e)}(),U=function(){function e(e,t){this.bulkOperationsService=e,this.modalService=t}return e.prototype.openDetails=function(e){return I(this,void 0,void 0,(function(){var t,n;return F(this,(function(i){switch(i.label){case 0:return[4,this.bulkOperationsService.getBulkOperationById(e)];case 1:return t=i.sent().data,n={bulkOperation:t},this.modalService.show(M,{initialState:n,class:"modal-lg"}),[2]}}))}))},e.ctorParameters=function(){return[{type:L},{type:s.BsModalService}]},e=T([n.Injectable()],e)}(),j=function(){function e(e,t,n){this.bsModalRef=e,this.bulkOperationsService=t,this.alert=n,this.closeSubject=new a.Subject}return e.prototype.ngOnInit=function(){this.modalTitle=this.getTitle()},e.prototype.onDateAndDelaySelect=function(e){this.dateAndDelay=e},e.prototype.getTitle=function(){return this.isRetryOperation?o.gettext("Retry operation"):o.gettext("Edit schedule")},e.prototype.onCancel=function(){this.bsModalRef.hide()},e.prototype.onSave=function(){return I(this,void 0,void 0,(function(){var e,t,n;return F(this,(function(i){switch(i.label){case 0:if(this.bulkOperation.startDate=this.dateAndDelay.scheduledDate.toISOString(),this.bulkOperation.creationRamp=this.dateAndDelay.delayInSeconds,!this.isRetryOperation)return[3,5];i.label=1;case 1:return i.trys.push([1,3,,4]),[4,this.bulkOperationsService.createBulkOperation(this.bulkOperation)];case 2:return e=i.sent(),this.alert.success(o.gettext("Successfully rescheduled for a retry.")),[3,4];case 3:return t=i.sent(),this.alert.addServerFailure(t),[3,4];case 4:return[3,8];case 5:return i.trys.push([5,7,,8]),[4,this.bulkOperationsService.updateBulkOperation(this.bulkOperation)];case 6:return e=i.sent(),this.alert.success(o.gettext("Successfully rescheduled.")),[3,8];case 7:return n=i.sent(),this.alert.addServerFailure(n),[3,8];case 8:return this.closeSubject.next(e.data),this.bsModalRef.hide(),[2]}}))}))},e.ctorParameters=function(){return[{type:l.BsModalRef},{type:L},{type:o.AlertService}]},e=T([n.Component({selector:"c8y-bulk-operations-reschedule-modal",template:'<div class="viewport-modal">\n  <div class="modal-header dialog-header">\n    <h1 class="c8y-icon c8y-icon-energy"></h1>\n    <h4>{{ modalTitle | translate }}</h4>\n  </div>\n  <div class="modal-inner-scroll">\n    <div class="modal-body">\n      <div class="text-center">\n        <c8y-operation-summary\n          [description]="bulkOperation.operationPrototype.description"\n        ></c8y-operation-summary>\n      </div>\n      <div class="p-t-16 center-block" style="max-width: 300px;">\n        <c8y-operation-scheduler\n          [(ngModel)]="dateAndDelay"\n          #scheduler="ngModel"\n        ></c8y-operation-scheduler>\n      </div>\n    </div>\n  </div>\n  <div class="modal-footer">\n    <button\n      (click)="onCancel()"\n      type="button"\n      class="btn btn-default"\n      title="{{ \'Cancel\' | translate }}"\n    >\n      <span translate>Cancel</span>\n    </button>\n    <button\n      id="save-btn"\n      (click)="onSave()"\n      type="button"\n      class="btn btn-primary"\n      title="{{ \'Save\' | translate }}"\n      [disabled]="scheduler?.control?.errors"\n    >\n      <span translate>Save</span>\n    </button>\n  </div>\n</div>\n'})],e)}(),G={SCHEDULED:o.gettext("Scheduled"),EXECUTING:o.gettext("Executing"),CANCELED:o.gettext("Canceled"),FAILED:o.gettext("Completed with failures"),SUCCESSFUL:o.gettext("Completed successfully")},q=[{label:G.SCHEDULED,generalStatus:[i.OperationBulkGeneralStatus.SCHEDULED],iconClass:"fa fa-calendar text-info"},{label:G.EXECUTING,generalStatus:[i.OperationBulkGeneralStatus.EXECUTING,i.OperationBulkGeneralStatus.EXECUTING_WITH_ERROR],iconClass:"fa fa-refresh text-primary"},{label:G.CANCELED,generalStatus:[i.OperationBulkGeneralStatus.CANCELED],iconClass:"fa fa-ban text-muted"},{label:G.FAILED,generalStatus:[i.OperationBulkGeneralStatus.FAILED],iconClass:"fa fa-exclamation-triangle text-danger"},{label:G.SUCCESSFUL,generalStatus:[i.OperationBulkGeneralStatus.SUCCESSFUL],iconClass:"fa fa-check text-success"}],W=function(){function e(e,t,r,s){this.bulkOperationsService=e,this.modal=t,this.alert=r,this.bsModalService=s,this.detailsCollapsed=!0,this.readOnly=!1,this.showFailedOperation=new n.EventEmitter,this.reload=new n.EventEmitter,this.refreshLoading=!1,this.bulkOperationGeneralStatus=i.OperationBulkGeneralStatus,this.bulkOperationStatusOptions=q,this.finishDatePopoverText=o.gettext("Approximate date, estimated based on the bulk operation settings."),this.progressBarClass="progress",this.progressBarStatus=0}return e.prototype.ngOnInit=function(){this.iconClass=this.getIconClass(),this.finishDate=this.calculateFinishDateMs(),this.setProgressBar()},e.prototype.ngOnChanges=function(e){e.bulkOperation&&!e.bulkOperation.firstChange&&(this.iconClass=this.getIconClass(),this.setProgressBar())},e.prototype.getIconClass=function(){var e=this;return this.bulkOperationStatusOptions.find((function(t){return t.generalStatus.includes(e.bulkOperation.generalStatus)})).iconClass},e.prototype.calculateFinishDateMs=function(){return new Date(this.bulkOperation.startDate).getTime()+1e3*this.bulkOperation.creationRamp*this.bulkOperation.progress.all},e.prototype.progressBarProgressFn=function(){return(this.bulkOperation.progress.successful+this.bulkOperation.progress.failed)/this.bulkOperation.progress.all*100},e.prototype.setProgressBar=function(){var e="progress-bar progress-striped active progress-bar",t={EXECUTING:{progressBarClass:"progress progress-striped active",progressBarColor:e+"-primary",progressBarStatus:this.progressBarProgressFn()},EXECUTING_WITH_ERROR:{progressBarClass:"progress progress-striped active",progressBarColor:e+"-danger",progressBarStatus:this.progressBarProgressFn()},FAILED:{progressBarClass:"progress",progressBarColor:e+"-danger",progressBarStatus:100},SUCCESSFUL:{progressBarClass:"progress",progressBarColor:e+"-success",progressBarStatus:100}};r.assign(this,t[this.bulkOperation.generalStatus])},e.prototype.editSchedule=function(){var e={initialState:{bulkOperation:r.cloneDeep(this.bulkOperation)},class:"modal-sm",backdrop:"static"};this.bsModalRef=this.bsModalService.show(j,e)},e.prototype.cancelBulkOperation=function(){return I(this,void 0,void 0,(function(){var e;return F(this,(function(t){switch(t.label){case 0:return t.trys.push([0,3,,4]),[4,this.modal.confirm(o.gettext("Cancel bulk operation"),o.gettext("You are about to cancel the bulk operation. Do you want to proceed?"),o.Status.DANGER)];case 1:return t.sent(),[4,this.bulkOperationsService.deleteBulkOperation(this.bulkOperation.id)];case 2:return t.sent(),this.reload.emit(),this.alert.success(o.gettext("Operation canceled.")),[3,4];case 3:return e=t.sent(),this.alert.addServerFailure(e),[3,4];case 4:return[2]}}))}))},e.prototype.retryFailedOperation=function(){var e=this,t=r.cloneDeep(this.bulkOperation);delete t.groupId,t.failedParentId=this.bulkOperation.id;var n={initialState:{bulkOperation:t,isRetryOperation:!0},class:"modal-sm",backdrop:"static"};this.bsModalRef=this.bsModalService.show(j,n),this.bsModalRef.content.closeSubject.subscribe((function(){e.reload.emit()}))},e.prototype.setToSuccessful=function(){return I(this,void 0,void 0,(function(){var e;return F(this,(function(t){switch(t.label){case 0:return t.trys.push([0,3,,4]),[4,this.modal.confirm(o.gettext("Set manually bulk operation to successful"),o.gettext("You are about to change the bulk operation status to successful. Do you want to proceed?"),o.Status.DANGER)];case 1:return t.sent(),[4,this.bulkOperationsService.updateBulkOperation({id:this.bulkOperation.id,generalStatus:i.OperationBulkGeneralStatus.SUCCESSFUL})];case 2:return t.sent(),this.reload.emit(),this.alert.success(o.gettext("Operation status changed to successful.")),[3,4];case 3:return e=t.sent(),this.alert.addServerFailure(e),[3,4];case 4:return[2]}}))}))},e.prototype.openFailedOperation=function(e){this.showFailedOperation.emit(e)},e.prototype.isStatusScheduled=function(){return this.bulkOperation.generalStatus===this.bulkOperationGeneralStatus.SCHEDULED},e.prototype.isStatusExecutingOrExecutingWithError=function(){return this.bulkOperation.generalStatus===this.bulkOperationGeneralStatus.EXECUTING||this.bulkOperation.generalStatus===this.bulkOperationGeneralStatus.EXECUTING_WITH_ERROR},e.prototype.isStatusCanceled=function(){return this.bulkOperation.generalStatus===this.bulkOperationGeneralStatus.CANCELED},e.prototype.isStatusFailed=function(){return this.bulkOperation.generalStatus===this.bulkOperationGeneralStatus.FAILED},e.ctorParameters=function(){return[{type:L},{type:o.ModalService},{type:o.AlertService},{type:s.BsModalService}]},T([n.Input()],e.prototype,"bulkOperation",void 0),T([n.Input()],e.prototype,"detailsCollapsed",void 0),T([n.Input()],e.prototype,"readOnly",void 0),T([n.Output()],e.prototype,"showFailedOperation",void 0),T([n.Output()],e.prototype,"reload",void 0),T([n.ViewChild("listItem",{static:!0})],e.prototype,"listItem",void 0),e=T([n.Component({selector:"c8y-bulk-operation-list-item",template:'<c8y-li\n  class="c8y-list__item--double-actions"\n  [ngClass]="{ \'c8y-list__item--no-expand\': !detailsCollapsed }"\n  [collapsed]="detailsCollapsed"\n  #listItem\n  id="{{ bulkOperation.id }}"\n>\n  <c8y-li-icon>\n    <i [class]="iconClass"></i>\n  </c8y-li-icon>\n  <div [ngClass]="{ \'content-flex-80\': !readOnly, \'content-flex-50\': readOnly }">\n    <div class="col-5">\n      <span\n        class="text-truncate"\n        title="{{ bulkOperation.id }} - {{\n          bulkOperation.operationPrototype.description | translate\n        }}"\n      >\n        <strong class="text-muted m-r-4">{{ bulkOperation.id }}</strong>\n        {{ bulkOperation.operationPrototype.description | translate }}\n      </span>\n    </div>\n    <div class="flex-grow">\n      <div class="m-t-8 visible-xs"></div>\n      <hr *ngIf="isStatusCanceled(); else statusNotCanceled" class="m-t-16 m-b-0" />\n      <ng-template #statusNotCanceled>\n        <div [class]="progressBarClass" title="{{ progressBarStatus | number: \'1.0-0\' }}%">\n          <div\n            [class]="progressBarColor"\n            role="progressbar"\n            aria-valuenow="0"\n            aria-valuemin="0"\n            aria-valuemax="100"\n            [style.width.%]="progressBarStatus"\n          >\n            <span *ngIf="progressBarStatus !== 0">{{ progressBarStatus | number: \'1.0-0\' }}%</span>\n          </div>\n        </div>\n      </ng-template>\n    </div>\n    <div class="col-4">\n      <small *ngIf="bulkOperation.progress.successful > 0" class="m-r-8 icon-flex">\n        <i class="fa fw fa-check-circle text-success m-r-4"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]="{ bulkOperationsCountSuccessful: bulkOperation.progress.successful }"\n        >\n          {{ bulkOperationsCountSuccessful }} successful\n        </span>\n      </small>\n      <small *ngIf="bulkOperation.progress.failed > 0" class="m-r-8 icon-flex">\n        <i class="fa fw fa-warning text-danger m-r-4"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]="{ bulkOperationsCountFailed: bulkOperation.progress.failed }"\n        >\n          {{ bulkOperationsCountFailed }} failed\n        </span>\n      </small>\n      <small *ngIf="bulkOperation.progress.pending > 0" class="m-r-8 icon-flex">\n        <i class="fa fw fa-clock-o text-primary m-r-4"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]="{ bulkOperationsCountPending: bulkOperation.progress.pending }"\n        >\n          {{ bulkOperationsCountPending }} pending\n        </span>\n      </small>\n    </div>\n  </div>\n  <div class="c8y-list__item__footer">\n    <div class="m-r-16">\n      <span class="text-label-small m-r-4" translate>Start</span>\n      <small class="icon-flex">\n        <i c8yIcon="calendar" class="m-r-4"></i>\n        <span>\n          {{ bulkOperation.startDate | c8yDate }}\n        </span>\n      </small>\n    </div>\n    <div class="m-r-16" *ngIf="bulkOperationGeneralStatus.CANCELED !== bulkOperation.generalStatus">\n      <span class="text-label-small m-r-4" translate>Finish</span>\n\n      <small class="icon-flex">\n        <i c8yIcon="calendar" class="m-r-4"></i>\n        <span>{{ finishDate | c8yDate }}</span>\n      </small>\n      <a\n        container="body"\n        *ngIf="isStatusScheduled() || isStatusExecutingOrExecutingWithError()"\n        class="btn-clean m-l-4"\n        popover="{{ finishDatePopoverText | translate }}"\n        placement="right"\n        outsideClick="true"\n      >\n        <i c8yIcon="question-circle-o text-primary"></i>\n      </a>\n    </div>\n  </div>\n  <ng-container *ngIf="!readOnly">\n    <c8y-li-action\n      *ngIf="isStatusScheduled()"\n      label="{{ \'Edit schedule\' | translate }}"\n      (click)="editSchedule()"\n      icon="pencil"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf="isStatusScheduled() || isStatusExecutingOrExecutingWithError()"\n      label="{{ \'Cancel bulk operation\' | translate }}"\n      (click)="cancelBulkOperation()"\n      icon="remove"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf="isStatusFailed()"\n      label="{{ \'Retry failed operations\' | translate }}"\n      (click)="retryFailedOperation()"\n      icon="repeat"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf="isStatusFailed()"\n      label="{{ \'Set operation to successful\' | translate }}"\n      (click)="setToSuccessful()"\n      icon="check"\n    >\n    </c8y-li-action>\n  </ng-container>\n  <c8y-li-collapse class="m-b-16">\n    <c8y-bulk-operation-details-tabs\n      *ngIf="!listItem.collapsed"\n      [bulkOperation]="bulkOperation"\n      [readOnly]="readOnly"\n      (onRetryFailedOperations)="retryFailedOperation()"\n      (showFailedOperation)="openFailedOperation($event)"\n    >\n    </c8y-bulk-operation-details-tabs>\n  </c8y-li-collapse>\n</c8y-li>\n'})],e)}(),Y=function(){function e(e,t){var n=this;this.realtime=e,this.bulkOperationsService=t,this.selectedTypeFilters=this.getTypeFilters(),this.bulkOperationStatusOptions=q,this.refreshLoading=!1,this.statusFilter$=new a.BehaviorSubject(null),this.typeFilter$=new a.BehaviorSubject(null),this.timeFilter$=new a.BehaviorSubject(null),this.reload$=new a.BehaviorSubject(null),this.bulkOperations$=a.combineLatest(this.statusFilter$,this.timeFilter$,this.typeFilter$,this.reload$).pipe(p.tap((function(){n.refreshLoading=!0})),p.switchMap((function(e){var t=E(e,2),i=t[0],o=t[1];return n.filter(i,o)})),p.withLatestFrom(this.typeFilter$),p.map((function(e){var t=E(e,2),i=t[0],o=t[1];return n.filterPipe=a.pipe(p.map((function(e){return n.filterByType(e,o)}))),D({},i,{data:n.filterByType(i.data,o)})})),p.tap((function(){n.refreshLoading=!1})),p.shareReplay(1)),this.allFilterFragments=this.flattenFilterFragments(this.getTypeFilters())}return e.prototype.filterByType=function(e,t){var n=this.flattenFilterFragments(t);return!n.length||this.allFilterFragments.every((function(e){return n.includes(e)}))?e:e.filter((function(e){return Object.keys(e.operationPrototype).some((function(e){return n.includes(e)}))}))},e.prototype.resetFilter=function(){this.statusFilter$.next(null),this.timeFilter$.next(null),this.typeFilter$.next(null),this.datePicker.clearFilter(),this.selectedTypeFilters=this.getTypeFilters(),this.statusFilter.statusOptions.map((function(e){return e.selected=!1,e}))},e.prototype.isFilterApplied=function(){return this.statusFilter$.getValue()||this.typeFilter$.getValue()||this.timeFilter$.getValue()},e.prototype.filter=function(e,t){var n=e&&e.length>0?{generalStatus:r.flatten(e.map((function(e){return e.generalStatus})))}:{},i=t?D({},t.dateFrom&&{dateFrom:t.dateFrom.toISOString()},t.dateTo&&{dateTo:t.dateTo.toISOString()}):{};return this.getBulkOperations(D({},n,i))},e.prototype.getBulkOperations=function(e){return this.bulkOperationsService.getBulkOperations(e)},e.prototype.getTypeFilters=function(){return this.bulkOperationsService.getBulkTypes()},e.prototype.addBulkOperation=function(){this.bulkOperationsService.showNewBulkOperationModal()},e.prototype.openFailedOperation=function(e){this.listItems.forEach((function(t){t.bulkOperation.id===e&&(t.listItem.collapsed=!1,t.listItem.element.nativeElement.scrollIntoView({behavior:"smooth",block:"center"}))}))},e.prototype.compareOperations=function(e,t){return new Date(e.startDate).getTime()-new Date(t.startDate).getTime()},e.prototype.flattenFilterFragments=function(e){return(e||[]).reduce((function(e,t){return e.concat(t.fragments)}),[])},e.ctorParameters=function(){return[{type:o.OperationBulkRealtimeService},{type:L}]},T([n.ViewChildren(W)],e.prototype,"listItems",void 0),T([n.ViewChild("statusFilter",{static:!0})],e.prototype,"statusFilter",void 0),T([n.ViewChild(o.DatePickerComponent,{static:!0})],e.prototype,"datePicker",void 0),e=T([n.Component({selector:"c8y-bulk-operations",template:'<c8y-title> {{ \'Device control\' | translate }}</c8y-title>\n<c8y-action-bar-item itemClass="navbar-form" [placement]="\'left\'">\n  <label translate> Operation type</label>\n  <c8y-select\n    style="width: 180px;"\n    [items]="getTypeFilters()"\n    [selected]="selectedTypeFilters"\n    (onChange)="selectedTypeFilters = $event; typeFilter$.next(selectedTypeFilters)"\n  >\n  </c8y-select>\n</c8y-action-bar-item>\n<c8y-action-bar-item itemClass="btn-group" [placement]="\'left\'">\n  <c8y-status-filter\n    #statusFilter\n    [options]="bulkOperationStatusOptions"\n    (onFilterChanged)="statusFilter$.next($event)"\n  ></c8y-status-filter>\n</c8y-action-bar-item>\n<c8y-action-bar-item itemClass="navbar-form" [placement]="\'left\'">\n  <c8y-date-picker (onDateSelected)="timeFilter$.next($event)"></c8y-date-picker>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]="\'right\'">\n  <c8y-realtime-btn [service]="realtime"></c8y-realtime-btn>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]="\'right\'">\n  <button\n    class="btn btn-link"\n    (click)="addBulkOperation()"\n    title="{{ \'New bulk operation\' | translate }}"\n  >\n    <i class="fa fa-plus-circle"></i> {{ \'New bulk operation\' | translate }}\n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]="\'right\'">\n  <button class="btn btn-link" title="{{ \'Reload\' | translate }}" (click)="reload$.next()">\n    <i c8yIcon="refresh" [ngClass]="{ \'fa-spin\': refreshLoading }"></i>\n    {{ \'Reload\' | translate }}\n  </button>\n</c8y-action-bar-item>\n\x3c!-- IF THERE ARE NO OPERATIONS TO DISPLAY SHOW THIS:  --\x3e\n<div\n  class="c8y-empty-state text-center"\n  *ngIf="(bulkOperations$ | async)?.data.length === 0 && !isFilterApplied()"\n>\n  <h1 class="c8y-icon c8y-icon-energy c8y-icon-duocolor"></h1>\n  <h3 translate>No items to display</h3>\n  <p translate>Bulk operations will be displayed here</p>\n  <button\n    type="button"\n    title="{{ \'New bulk operation\' | translate }}"\n    class="btn btn-primary"\n    (click)="addBulkOperation()"\n    translate\n  >\n    New bulk operation\n  </button>\n</div>\n\x3c!-- DETAILED LIST OF OPERATIONS + LOAD MORE BUTTON --\x3e\n<c8y-list-group class="m-b-24">\n  <div\n    class="d-contents"\n    *c8yFor="\n      let bulkOperation of bulkOperations$;\n      let i = index;\n      realtime: realtime;\n      pipe: filterPipe;\n      comparator: compareOperations.bind(this);\n      loadMore: \'auto\';\n    "\n  >\n    <c8y-bulk-operation-list-item\n      [bulkOperation]="bulkOperation"\n      (reload)="reload$.next()"\n      (showFailedOperation)="openFailedOperation($event)"\n      class="d-contents"\n    >\n    </c8y-bulk-operation-list-item>\n  </div>\n</c8y-list-group>\n\x3c!-- no results empty state --\x3e\n<div\n  class="c8y-empty-state text-center"\n  *ngIf="(bulkOperations$ | async)?.data.length === 0 && isFilterApplied()"\n>\n  <h1 class="fa fa-search"></h1>\n  <h3 translate>No items to display</h3>\n  <p translate>Adjust or reset the filter.</p>\n  <button\n    class="btn btn-primary"\n    (click)="resetFilter()"\n    title="{{ \'Reset filter\' | translate }}"\n    translate\n  >\n    Reset filter\n  </button>\n</div>\n',providers:[o.OperationBulkRealtimeService]})],e)}(),H=function(){function e(e,t){this.router=e,this.bulkOpsService=t,this.onCustomType=new n.EventEmitter,this.bulkList=[]}return e.prototype.ngOnInit=function(){this.bulkList=this.bulkOpsService.getBulkTypes()},e.prototype.handleClick=function(e){e.path?(this.bulkOpsService.hideNewBulkOperationModal(),this.router.navigateByUrl(e.path)):e.component&&this.onCustomType.emit(e)},e.ctorParameters=function(){return[{type:c.Router},{type:L}]},T([n.Output()],e.prototype,"onCustomType",void 0),e=T([n.Component({selector:"c8y-bulk-operation-type-list",template:'<div class="list-group list-group-links">\n  <button\n    *ngFor="let item of bulkList"\n    type="button"\n    class="list-group-item flex-row"\n    (click)="handleClick(item)"\n  >\n    <div *ngIf="item.c8yIcon; else icon" class="list-item-icon">\n      <i [c8yIcon]="item.c8yIcon"></i>\n    </div>\n    <ng-template #icon>\n      <div class="list-item-icon">\n        <i c8yIcon="cogs"></i>\n      </div>\n    </ng-template>\n    <div title="{{ item.name | translate }}" class="list-item-body text-truncate">\n      {{ item.name | translate }}\n    </div>\n  </button>\n</div>\n'})],e)}(),K=function(){function t(t){var n;this.formBuilder=t,this.titlePlaceholder=o.gettext("e.g. Reset factory settings"),this.descriptionPlaceholder=o.gettext("e.g. Reset factory settings of all devices of model XYZ"),this.placeholders=((n={})[e.ɵa.SOFTWARE]={title:o.gettext("e.g. Cloud connectivity software"),description:o.gettext("e.g. Cloud connectivity software applied to devices with type c8y_Linux`KEEP_ORIGINAL`")},n[e.ɵa.FIRMWARE]={title:o.gettext("e.g. Firmware for hardware revision b"),description:o.gettext("e.g. Firmware for hardware revision b applied to devices with type c8y_Linux`KEEP_ORIGINAL`")},n[e.ɵa.CONFIGURATION]={title:o.gettext("e.g. Host configuration c8y_Linux`KEEP_ORIGINAL`"),description:o.gettext("e.g. Host configuration applied to devices with type c8y_Linux`KEEP_ORIGINAL`")},n[e.ɵa.DEVICE_PROFILE]={title:o.gettext("e.g. Device profile for c8y_Linux`KEEP_ORIGINAL` devices"),description:o.gettext("e.g. Device profile applied to devices with type c8y_Linux`KEEP_ORIGINAL`")},n)}return Object.defineProperty(t.prototype,"bulkOperationType",{set:function(e){this.titlePlaceholder=r.get(this.placeholders[e],"title"),this.descriptionPlaceholder=r.get(this.placeholders[e],"description")},enumerable:!0,configurable:!0}),t.prototype.ngOnInit=function(){var e={description:["",u.Validators.required],note:[""],schedule:[]};this.fgOperationDescription=this.formBuilder.group(e)},t.ctorParameters=function(){return[{type:u.FormBuilder}]},T([n.Input()],t.prototype,"bulkOperationType",null),t=T([n.Component({selector:"c8y-operation-details",template:'<div [formGroup]="fgOperationDescription">\n  <c8y-form-group>\n    <label translate>Title</label>\n    <input\n      formControlName="description"\n      class="form-control"\n      [placeholder]="titlePlaceholder | translate"\n      required\n    />\n    <c8y-messages *ngIf="fgOperationDescription?.controls?.description?.errors">\n      <c8y-message *ngIf="fgOperationDescription.controls.description.errors.required" translate>\n        This field is required.\n      </c8y-message>\n    </c8y-messages>\n  </c8y-form-group>\n  <c8y-form-group>\n    <label translate>Description</label>\n    <textarea\n      formControlName="note"\n      class="form-control"\n      [placeholder]="descriptionPlaceholder | translate"\n      rows="3"\n    ></textarea>\n  </c8y-form-group>\n  <c8y-operation-scheduler formControlName="schedule"></c8y-operation-scheduler>\n</div>\n'})],t)}(),Q=function(){function e(e){this.templateRef=e,this.buttonsDisabled=!1,this.onNext=function(e){var t=e.stepper;e.step.completed=!0,t.next()}}return e.ctorParameters=function(){return[{type:n.TemplateRef}]},T([n.Input("customStep")],e.prototype,"label",void 0),T([n.Input("customStepCompleted")],e.prototype,"completed",void 0),T([n.Input("customStepButtonsDisabled")],e.prototype,"buttonsDisabled",void 0),T([n.Input("customStepOnNext")],e.prototype,"onNext",void 0),e=T([n.Directive({selector:"[customStep]"})],e)}(),X=function(){function e(e,t,i){this.bulkOperationService=e,this.modal=t,this.alert=i,this.selectionChange=new n.EventEmitter,this.steps=[],this.showStepper=!1,this.showButtons=!1,this.stepperButtonsLabels={custom:o.gettext("Schedule bulk operation")},this.deviceTypesSubject$=new a.Subject,this.endSubscriptions=new a.Subject,this.deviceTypes$=this.deviceTypesSubject$.asObservable()}return e.prototype.ngAfterViewInit=function(){var e=this;setTimeout((function(){e.steps=e.customSteps.toArray(),e.showStepper=!0,setTimeout((function(){e.showButtons=!0,e.stepper&&(e.stepper.selectionChange.pipe(p.takeUntil(e.endSubscriptions)).subscribe((function(t){e.selectionChange.next(t)})),e.operationDetailsForm=e.operationDetailsComponent.fgOperationDescription)}))}))},e.prototype.changeDeviceTypes=function(e){e?this.deviceTypesSubject$.next(Array.isArray(e)?e:[e]):this.deviceTypesSubject$.next([])},e.prototype.confirmDeviceSelection=function(e){return I(this,void 0,void 0,(function(){var t,n,i,s;return F(this,(function(a){switch(a.label){case 0:if(this.deviceQueryString)return[3,8];a.label=1;case 1:return a.trys.push([1,6,,7]),[4,this.modal.confirm(o.gettext("All devices selected"),o.gettext("You are about to schedule the bulk operation to be executed for all devices. Do you want to proceed?"),o.Status.WARNING,{ok:o.gettext("Schedule for all devices"),cancel:o.gettext("Cancel and select devices")})];case 2:return a.sent(),e.step.completed=!0,e.stepper.next(),t=this,this.retrieveOperationDetails?[4,this.retrieveOperationDetails()]:[3,4];case 3:return n=a.sent(),[3,5];case 4:n=void 0,a.label=5;case 5:return t.operationDetails=n,[3,7];case 6:return a.sent(),[3,7];case 7:return[3,12];case 8:return e.step.completed=!0,e.stepper.next(),i=this,this.retrieveOperationDetails?[4,this.retrieveOperationDetails()]:[3,10];case 9:return s=a.sent(),[3,11];case 10:s=void 0,a.label=11;case 11:i.operationDetails=s,a.label=12;case 12:return this.bulkOperationType=this.bulkOperationService.retrieveBulkOperationType(r.get(this.operationDetails,"prototype")),this.operationDetailsForm&&r.get(this.operationDetailsForm,"controls.description.pristine")&&this.operationDetails&&this.operationDetailsForm.patchValue({description:r.get(this.operationDetails,"prototype.description")}),[2]}}))}))},e.prototype.cancel=function(){this.close()},e.prototype.scheduleBulkOperation=function(){return I(this,void 0,void 0,(function(){var e;return F(this,(function(t){switch(t.label){case 0:this.pendingStatus=!0,t.label=1;case 1:return t.trys.push([1,3,,4]),this.operationDetails.prototype.description=r.get(this.operationDetailsForm,"controls.description.value"),this.operationDetails.note=r.get(this.operationDetailsForm,"controls.note.value"),this.operationDetails.schedule=r.get(this.operationDetailsForm,"controls.schedule.value"),[4,this.bulkOperationService.scheduleBulkOperation(this.deviceQueryString,this.operationDetails)];case 2:return t.sent(),this.alert.success(o.gettext("New bulk operation scheduled.")),this.close(),[3,4];case 3:return e=t.sent(),this.alert.addServerFailure(e),[3,4];case 4:return this.pendingStatus=!1,[2]}}))}))},e.prototype.ngOnDestroy=function(){this.endSubscriptions.next(),this.endSubscriptions.complete()},e.prototype.close=function(){this.stepper.reset(),this.bulkOperationService.returnToBulkOperationOverview()},e.ctorParameters=function(){return[{type:L},{type:o.ModalService},{type:o.AlertService}]},T([n.Output()],e.prototype,"selectionChange",void 0),T([n.ContentChildren(Q)],e.prototype,"customSteps",void 0),T([n.ViewChild(o.C8yStepper,{static:!1})],e.prototype,"stepper",void 0),T([n.ViewChild(K,{static:!1})],e.prototype,"operationDetailsComponent",void 0),e=T([n.Component({selector:"c8y-bulk-operation-stepper",template:'<div class="fit-v">\n  <c8y-stepper\n    class="flex-col no-align-items fit-v c8y-stepper--no-btns"\n    linear\n    [disableDefaultIcons]="{ edit: true, done: false }"\n    [customClasses]="[\'col-md-6\', \'col-md-offset-3\', \'p-t-16\', \'p-b-32\', \'flex-no-shrink\']"\n    *ngIf="showStepper"\n  >\n    \x3c!-- CUSTOM STEPS 1 to N-2 --\x3e\n    <cdk-step\n      *ngFor="let step of steps"\n      [label]="step.label | translate"\n      [completed]="step.completed"\n    >\n      <ng-container *ngTemplateOutlet="step.templateRef"></ng-container>\n      <c8y-stepper-buttons\n        class="d-block card-footer p-24 separator"\n        *ngIf="showButtons"\n        [disabled]="step.buttonsDisabled"\n        (onNext)="step.onNext($event)"\n        (onCancel)="cancel()"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n    \x3c!-- STEP N-1 - Data-grid --\x3e\n    <cdk-step [label]="\'Select target devices\' | translate">\n      <div class="card-block p-t-0 flex-no-shrink separator-bottom col-xs-12">\n        <div class="row p-b-16">\n          <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n            <h4 class="text-center m-b-16">\n              {{ \'Select target devices\' | translate }}\n            </h4>\n          </div>\n        </div>\n      </div>\n\n      <div class="col-xs-12 flex-grow no-gutter">\n        <c8y-device-selector\n          [deviceTypes]="deviceTypes$"\n          (onDeviceQueryStringChange)="deviceQueryString = $event"\n        ></c8y-device-selector>\n      </div>\n      <c8y-stepper-buttons\n        class="d-block card-footer p-24 separator"\n        (onNext)="confirmDeviceSelection($event)"\n        (onCancel)="cancel()"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n\n    \x3c!-- STEP N - Scheduler --\x3e\n    <cdk-step [label]="\'Confirm and schedule bulk operation\' | translate">\n      <div class="card-block p-t-0 flex-no-shrink separator-bottom col-xs-12">\n        <div class="row p-b-16">\n          <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n            <h4 class="text-center m-b-16">\n              {{ \'Confirm and schedule bulk operation\' | translate }}\n            </h4>\n          </div>\n        </div>\n      </div>\n\n      <div class="col-xs-12 flex-grow no-gutter">\n        <div class="card-inner-scroll fit-v">\n          <div class="card-block p-b-0">\n            <div class="text-center p-b-16">\n              <c8y-operation-summary\n                [name]="operationDetails?.name | translate"\n                [description]="operationDetails?.description | translate"\n                [deviceQueryString]="deviceQueryString"\n              ></c8y-operation-summary>\n            </div>\n            <div class="row">\n              <div class="col-md-4 col-md-offset-4">\n                <c8y-operation-details\n                  [bulkOperationType]="bulkOperationType"\n                ></c8y-operation-details>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <c8y-stepper-buttons\n        class="d-block card-footer p-24 separator"\n        [labels]="stepperButtonsLabels"\n        [pending]="pendingStatus"\n        [disabled]="operationDetailsForm?.invalid"\n        (onCancel)="cancel()"\n        (onCustom)="scheduleBulkOperation()"\n      >\n      </c8y-stepper-buttons>\n    </cdk-step>\n  </c8y-stepper>\n</div>\n'})],e)}(),z=function(){function e(){this.stepData={},this.endSubscriptions=new a.Subject}return Object.defineProperty(e.prototype,"deviceTypes",{set:function(e){this.operationStepper&&this.operationStepper.changeDeviceTypes(e)},enumerable:!0,configurable:!0}),e.prototype.ngOnInit=function(){this.operationStepper.retrieveOperationDetails=this.retrieveOperationPrototype.bind(this),this.operationStepper.selectionChange.pipe(p.takeUntil(this.endSubscriptions)).subscribe(this.onSelectionChange.bind(this))},e.prototype.ngOnDestroy=function(){this.endSubscriptions.next(),this.endSubscriptions.complete()},e.prototype.onSelectionChange=function(e){var t=e.selectedIndex;t>e.previouslySelectedIndex&&t<Object.keys(this.stepData).length&&(this.stepData[this.getStepDataKeyByIndex(t)]=void 0)},e.prototype.getStepDataKeyByIndex=function(e){return Object.keys(this.stepData)[e]},T([n.ViewChild(X,{static:!0})],e.prototype,"operationStepper",void 0),e}(),Z=function(e){function t(t,n){var i=e.call(this)||this;return i.activatedRoute=t,i.bulkOperationService=n,i}return k(t,e),t.prototype.retrieveOperationPrototype=function(){return I(this,void 0,void 0,(function(){var e;return F(this,(function(t){switch(t.label){case 0:return[4,this.bulkOperationService.getOperation(this.activatedRoute.snapshot.params.operationId)];case 1:return e=t.sent().data,[2,{description:r.get(e,"description"),prototype:e}]}}))}))},t.ctorParameters=function(){return[{type:c.ActivatedRoute},{type:L}]},t=T([n.Component({selector:"bulk-operation-from-single",template:"<c8y-bulk-operation-stepper> </c8y-bulk-operation-stepper>\n"})],t)}(z),J=function(){function e(e){this.translate=e,this.DEVICE_TYPE_NOT_DEFINED=o.gettext("Device type not defined")}return Object.defineProperty(e.prototype,"softwares",{get:function(){return r.get(this.selectedDeviceProfile,["c8y_DeviceProfile","software"],[])},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"configurations",{get:function(){return r.get(this.selectedDeviceProfile,["c8y_DeviceProfile","configuration"],[])},enumerable:!0,configurable:!0}),e.prototype.getDeviceTypeTitle=function(e){return r.get(e,"c8y_Filter.type",this.translate.instant(this.DEVICE_TYPE_NOT_DEFINED))},e.ctorParameters=function(){return[{type:S.TranslateService}]},T([n.Input()],e.prototype,"selectedDeviceProfile",void 0),e=T([n.Component({selector:"c8y-confirm-device-profile-selection-step",template:'<div class="card-block p-t-0 flex-no-shrink separator-bottom col-xs-12">\n  <div class="row p-b-16">\n    <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n      <h4 class="text-center text-gray">{{ \'Confirm selection\' | translate }}</h4>\n    </div>\n  </div>\n</div>\n<div class="col-xs-12 flex-grow no-gutter">\n  <div class="card-inner-scroll fit-v">\n    <div class="card-block">\n      <div class="row p-b-16">\n        <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n          <div class="text-truncate" title="{{ \'Device type\' | translate }}: {{ getDeviceTypeTitle(selectedDeviceProfile) }}">\n            <span class="legend form-block" translate>Device type</span>\n            <ng-container *ngIf="selectedDeviceProfile?.c8y_Filter?.type; else noType">\n              <span>{{ selectedDeviceProfile.c8y_Filter.type }}</span>\n            </ng-container>\n            <ng-template #noType>\n              ---\n            </ng-template>\n          </div>\n        </div>\n      </div>\n      <div class="row p-b-16" *ngIf="selectedDeviceProfile?.c8y_DeviceProfile.firmware">\n        <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n          <span class="legend form-block" translate>Firmware</span>\n          <c8y-list-group>\n            <c8y-li>\n              <c8y-li-icon>\n                <i c8yIcon="c8y-firmware"></i>\n              </c8y-li-icon>\n              <c8y-li-body class="content-flex-500">\n                <div class="col-5">\n                  {{ selectedDeviceProfile.c8y_DeviceProfile.firmware.name }}\n                </div>\n                <div class="col-5">\n                  <span class="text-label-small m-r-8" translate>\n                    Version\n                  </span>\n                  <span>\n                    {{ selectedDeviceProfile.c8y_DeviceProfile.firmware.version }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n      <div class="row p-b-16" *ngIf="softwares.length">\n        <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n          <span class="legend form-block" translate>Software</span>\n          <c8y-list-group>\n            <c8y-li *ngFor="let software of softwares">\n              <c8y-li-icon>\n                <i c8yIcon="c8y-tools"></i>\n              </c8y-li-icon>\n              <c8y-li-body class="content-flex-500">\n                <div class="col-5">\n                  {{ software.name }}\n                </div>\n                <div class="col-5">\n                  <span class="text-label-small m-r-8" translate>\n                    Version\n                  </span>\n                  <span>\n                    {{ software.version }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n      <div class="row p-b-16" *ngIf="configurations.length">\n        <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n          <span class="legend form-block" translate>Configuration</span>\n          <c8y-list-group>\n            <c8y-li *ngFor="let configuration of configurations">\n              <c8y-li-icon>\n                <i c8yIcon="c8y-tools"></i>\n              </c8y-li-icon>\n              <c8y-li-body class="content-flex-500">\n                <div class="col-5">\n                  {{ configuration.name }}\n                </div>\n                <div class="col-5">\n                  <span class="label label-info" *ngIf="configuration.type">\n                    {{ configuration.type }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'})],e)}(),ee=function(){function e(e,t){var i=this;this.deviceProfileService=e,this.translate=t,this.deviceProfile=new n.EventEmitter,this.textFilter$=new a.BehaviorSubject(""),this.deviceType$=new a.BehaviorSubject(""),this.DEVICE_TYPE_NOT_DEFINED=o.gettext("Device type not defined"),this.deviceTypes=[],this.selectedDeviceType={name:""},this.deviceProfile$=a.combineLatest(this.textFilter$,this.deviceType$).pipe(p.switchMap((function(e){var t=E(e,2),n=t[0],o=t[1];return i.getDeviceProfiles(n,o)})),p.shareReplay(1)),this.loadDeviceTypes()}return e.prototype.loadDeviceTypes=function(){var e=this;this.deviceTypeSubscription=this.deviceType$.pipe(p.debounceTime(300),p.distinctUntilChanged(),p.switchMap((function(t){var n={"c8y_Filter.type":"*"+t+"*"};return a.from(e.deviceProfileService.getDeviceProfiles(n))}))).subscribe((function(t){var n=t.data;e.deviceTypes=r.uniqWith(n.map((function(e){return{name:e.c8y_Filter.type}})).filter((function(e){return e.name})),r.isEqual)}))},e.prototype.ngOnDestroy=function(){this.deviceTypeSubscription.unsubscribe()},e.prototype.selectDeviceProfile=function(e){this.deviceProfile.emit(e)},e.prototype.getDeviceTypeTitle=function(e){return r.get(e,"c8y_Filter.type",this.translate.instant(this.DEVICE_TYPE_NOT_DEFINED))},e.prototype.getDeviceProfiles=function(e,t){var n=t?{"c8y_Filter.type":t}:{};return e&&(n.name="*"+e+"*"),this.deviceProfileService.getDeviceProfiles(n)},e.ctorParameters=function(){return[{type:y.DeviceProfileService},{type:S.TranslateService}]},T([n.Output()],e.prototype,"deviceProfile",void 0),e=T([n.Component({selector:"c8y-select-device-profile-step",template:'<div class="card-block p-t-0 overflow-visible flex-no-shrink separator-bottom col-xs-12">\n  <div class="row p-b-16">\n    <div class="col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3">\n      <h4 class="text-center m-b-16">{{ \'Select device profile\' | translate }}</h4>\n      <div class="row">\n        <div class="col-md-6">\n          <div class="input-group input-group-search">\n            <input\n              type="search"\n              class="form-control"\n              title="{{ \'Filter device profiles…\' | translate }}"\n              placeholder="{{ \'Filter device profiles…\' | translate }}"\n              [ngModel]="textFilter$ | async"\n              (ngModelChange)="textFilter$.next($event)"\n            />\n            <span class="input-group-addon">\n              <i c8yIcon="filter" *ngIf="(textFilter$ | async).length === 0"></i>\n              <i\n                c8yIcon="times"\n                class="text-muted"\n                *ngIf="(textFilter$ | async).length"\n                (click)="textFilter$.next(\'\')"\n              ></i>\n            </span>\n          </div>\n        </div>\n        <div class="col-md-6">\n          <c8y-form-group class="m-0">\n            <c8y-typeahead\n              name="deviceType"\n              [(ngModel)]="selectedDeviceType"\n              placeholder="{{ \'Type to filter device types…\' | translate }}"\n              (onSearch)="deviceType$.next($event)"\n              [allowFreeEntries]="false"\n            >\n              <c8y-li\n                class="p-l-8 p-r-8 c8y-list__item--link"\n                (click)="selectedDeviceType = {name: \'\'}; deviceType$.next(\'\')"\n              >\n                <span>{{\'All device types\' | translate }}</span>\n              </c8y-li>\n              <c8y-li\n                *ngFor="let deviceType of deviceTypes"\n                class="p-l-8 p-r-8 c8y-list__item--link"\n                (click)="selectedDeviceType = deviceType; deviceType$.next(deviceType.name)"\n                [active]="selectedDeviceType === deviceType"\n              >\n                <c8y-highlight\n                  [text]="deviceType.name"\n                  [pattern]="deviceType$ | async"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <c8y-messages\n            ><c8y-message\n              name="notExisting"\n              [text]="\'Select one of the existing device types.\' | translate"\n            ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class="col-xs-12 flex-grow no-gutter">\n  <div class="card-inner-scroll fit-v">\n    <div class="card-block p-t-0 p-b-0">\n      <c8y-list-group>\n        <c8y-li *c8yFor="let deviceProfile of deviceProfile$ | async; loadMore: \'auto\'">\n          <c8y-li-radio (onSelect)="selectDeviceProfile(deviceProfile)"></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon="c8y-device-profile"></i>\n          </c8y-li-icon>\n          <c8y-li-body class="content-flex-60">\n            <div class="col-5">\n              <div class="text-truncate" title="{{ deviceProfile.name }}">\n                {{ deviceProfile.name }}\n              </div>\n            </div>\n            <div class="col-3">\n              <div class="text-truncate" title="{{ \'Device type\' | translate }}: {{ getDeviceTypeTitle(deviceProfile) }}">\n                <span class="text-label-small m-r-8" translate>\n                  Device type\n                </span>\n                <span *ngIf="deviceProfile.c8y_Filter?.type; else noType">\n                  {{ deviceProfile.c8y_Filter?.type }}\n                </span>\n                <ng-template #noType>\n                  <small><em class="text-muted" translate>Undefined`device type`</em></small>\n                </ng-template>\n              </div>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </div>\n  </div>\n</div>\n'})],e)}(),te=function(){function e(e,t,i){var r=this;this.repositoryService=e,this.bulkOpsService=t,this.translate=i,this.firmware=new n.EventEmitter,this.elementCount=0,this.DD_LOW_COUNT=10,this.textFilter$=new a.BehaviorSubject(""),this.firmwares$=this.textFilter$.pipe(p.debounceTime(400),p.distinctUntilChanged()).pipe(p.switchMap((function(e){return r.getFirmwares(e)})),p.tap((function(e){r.elementCount=e.data?e.data.length:0})),p.shareReplay(1)),this.isLegacy=this.repositoryService.isLegacyEntry.bind(this.repositoryService),this.DEVICE_TYPE_NOT_AVAILABLE=o.gettext("No device type available"),this.DESCRIPTION_NOT_AVAILABLE=o.gettext("No description available")}return e.prototype.ngOnInit=function(){this.DD_LOW_COUNT=this.bulkOpsService.DD_LOW_COUNT},e.prototype.selectFirmware=function(e,t){e&&this.firmware.emit(t)},e.prototype.getBaseVersionsCount$=function(e){var t=this;return this.firmwares$.pipe(p.switchMap((function(){return t.repositoryService.getBaseVersionsCount$(e)})),p.shareReplay(1))},e.prototype.getDescriptionTitle=function(e){return r.get(e,"description",this.translate.instant(this.DESCRIPTION_NOT_AVAILABLE))},e.prototype.getDeviceTypeTitle=function(e){return r.get(e,"c8y_Filter.type",this.translate.instant(this.DEVICE_TYPE_NOT_AVAILABLE))},e.prototype.getFirmwares=function(e){return this.repositoryService.listRepositoryEntries(f.RepositoryType.FIRMWARE,{partialName:e})},e.ctorParameters=function(){return[{type:f.RepositoryService},{type:L},{type:S.TranslateService}]},T([n.Input()],e.prototype,"selected",void 0),T([n.Output()],e.prototype,"firmware",void 0),T([o.memoize(r.property("id"))],e.prototype,"getBaseVersionsCount$",null),e=T([n.Component({selector:"c8y-select-firmware-step",template:'<div class="card-block p-t-0 flex-no-shrink separator-bottom col-xs-12">\n  <div class="row p-b-16">\n    <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n      <h4 class="text-center m-b-16">{{ \'Select firmware\' | translate }}</h4>\n      <div class="input-group input-group-search">\n        <input\n          type="search"\n          class="form-control"\n          title="{{ \'Filter firmware…\' | translate }}"\n          placeholder="{{ \'Filter firmware…\' | translate }}"\n          [ngModel]="textFilter$ | async"\n          (ngModelChange)="textFilter$.next($event)"\n        />\n        <span class="input-group-addon">\n          <i c8yIcon="filter" *ngIf="(textFilter$ | async).length === 0"></i>\n          <i\n            c8yIcon="times"\n            class="text-muted"\n            *ngIf="(textFilter$ | async).length > 0"\n            (click)="textFilter$.next(\'\')"\n          ></i>\n        </span>\n      </div>\n    </div>\n  </div>\n</div>\n<c8y-search-result-empty *ngIf="(textFilter$ | async).length > 0 && elementCount===0">\n</c8y-search-result-empty>\n<div class="col-xs-12 flex-grow no-gutter">\n  <div class="card-inner-scroll fit-v">\n    <div class="card-block p-t-0 p-b-0">\n      <c8y-list-group [ngClass]="{ \'dd-low\': elementCount <= DD_LOW_COUNT }">\n        <c8y-li *c8yFor="let firmware of firmwares$ | async; let i = index; loadMore: \'auto\'">\n          <c8y-li-radio (onSelect)="selectFirmware($event, firmware)" [selected]="firmware === selected"></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon="c8y-firmware"></i>\n          </c8y-li-icon>\n\n          <c8y-li-body class="content-flex-60">\n            <div class="col-3">\n              <div class="text-truncate" title="{{ firmware.name }}">\n                {{ firmware.name }}\n              </div>\n            </div>\n            <div class="col-4">\n              <div class="text-truncate" title="{{ getDescriptionTitle(firmware) }}">\n                <small *ngIf="firmware.description; else noDesc">\n                  {{ firmware.description }}\n                </small>\n                <ng-template #noDesc>\n                  <small>\n                    <em class="text-muted" translate>No description available</em>\n                  </small>\n                </ng-template>\n              </div>\n            </div>\n            <div class="col-3">\n              <div class="text-truncate" title="{{ \'Device type\' | translate }}: {{ getDeviceTypeTitle(firmware) }}">\n                <span class="text-label-small m-r-8" translate>\n                  Device type\n                </span>\n                <span *ngIf="firmware.c8y_Filter?.type; else noType">\n                  {{ firmware.c8y_Filter?.type }}\n                </span>\n                <ng-template #noType>\n                  <em class="text-muted" translate>Undefined`device type`</em>\n                </ng-template>\n              </div>\n            </div>\n            <div class="col-2">\n              <span *ngIf="isLegacy(firmware)" class="label label-warning">\n                <span translate>Legacy</span>\n              </span>\n\n              <span *ngIf="!isLegacy(firmware)">\n                <span *ngIf="(getBaseVersionsCount$(firmware) | async) === null">\n                  <span class="label label-info">\n                    <i c8yIcon="circle-o-notch" class="fa-spin"></i>\n                  </span>\n                </span>\n                <span *ngIf="(getBaseVersionsCount$(firmware) | async) !== null">\n                  <span [ngPlural]="getBaseVersionsCount$(firmware) | async">\n                    <ng-template ngPluralCase="=0">\n                      <span class="label label-default">\n                        <span translate>No versions</span>\n                      </span>\n                    </ng-template>\n                    <ng-template ngPluralCase="=1">\n                      <span class="label label-info"><span translate>1 version</span></span>\n                    </ng-template>\n                    <ng-template ngPluralCase="other">\n                      <span class="label label-info">\n                        <span\n                          ngNonBindable\n                          translate\n                          [translateParams]="{\n                            count: getBaseVersionsCount$(firmware) | async\n                          }"\n                          >{{ count }} versions</span\n                        >\n                      </span>\n                    </ng-template>\n                  </span>\n                </span>\n              </span>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </div>\n  </div>\n</div>\n'})],e)}(),ne=function(){function e(e,t,i){var o=this;this.repositoryService=e,this.inventoryService=t,this.bulkOpsService=i,this.versionOrPatch=new n.EventEmitter,this.elementCount=0,this.DD_LOW_COUNT=10,this.firmware$=this.bulkOpsService.firmwareId.pipe(p.distinctUntilChanged(),p.switchMap((function(e){return o.inventoryService.detail$(e).pipe(p.catchError((function(e){return a.of(e)})))})),p.shareReplay(1)),this.baseVersions$=this.firmware$.pipe(p.distinctUntilKeyChanged("id"),p.switchMap((function(e){return o.repositoryService.listBaseVersions(e)})),p.tap((function(e){o.elementCount=e.data?e.data.length:0})),p.shareReplay(1)),this.isLegacy$=this.firmware$.pipe(p.map((function(e){return o.repositoryService.isLegacyEntry(e)})),p.shareReplay(1)),this.expanded={},this.DD_LOW_COUNT=this.bulkOpsService.DD_LOW_COUNT}return e.prototype.getBinaryName$=function(e){return this.repositoryService.getBinaryName$(e)},e.prototype.getBaseVersionAndPatches$=function(e){var t=this;return this.firmware$.pipe(p.distinctUntilKeyChanged("id"),p.switchMap((function(n){return t.repositoryService.listBaseVersionAndPatches(n,e)})),p.shareReplay(1))},e.prototype.getPatchVersionsCount$=function(e){var t=this;return this.firmware$.pipe(p.distinctUntilKeyChanged("id"),p.switchMap((function(){return t.firmware$})),p.switchMap((function(n){return t.repositoryService.getPatchVersionsCount$(n,e)})),p.shareReplay(1))},e.prototype.selectVersionOrPatch=function(e,t){e&&this.versionOrPatch.emit(t)},e.ctorParameters=function(){return[{type:f.RepositoryService},{type:i.InventoryService},{type:L}]},T([n.Input()],e.prototype,"selected",void 0),T([n.Output()],e.prototype,"versionOrPatch",void 0),T([o.memoize()],e.prototype,"getBinaryName$",null),T([o.memoize(r.property("id"))],e.prototype,"getBaseVersionAndPatches$",null),T([o.memoize(r.property("id"))],e.prototype,"getPatchVersionsCount$",null),e=T([n.Component({selector:"c8y-version-or-patch-step",template:'<c8y-list-group\n  class="m-b-16"\n  [ngClass]="{ \'dd-low\': elementCount <= DD_LOW_COUNT }"\n  *ngIf="(baseVersions$ | async)?.data.length > 0"\n>\n  <c8y-li\n    *c8yFor="let baseVersion of baseVersions$ | async; let i = index; loadMore: \'auto\'"\n  >\n    <c8y-li-icon>\n      <i c8yIcon="c8y-firmware"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class="content-flex-50">\n      <div class="col-10">\n        <p>{{ baseVersion.c8y_Firmware.version }}</p>\n      </div>\n      <div class="col-2">\n        <span *ngIf="isLegacy$ | async" class="label label-warning">\n          {{ \'Legacy\' | translate }}\n        </span>\n\n        <span *ngIf="!(isLegacy$ | async)" >\n          <span *ngIf="(getPatchVersionsCount$(baseVersion) | async) === null">\n            <span class="label label-info">\n              <i c8yIcon="circle-o-notch" class="fa-spin"></i>\n            </span>\n          </span>\n\n          <span *ngIf="(getPatchVersionsCount$(baseVersion) | async) !== null">\n            <span [ngPlural]="getPatchVersionsCount$(baseVersion) | async">\n              <ng-template ngPluralCase="=0">\n                <span class="label label-default">\n                  <span translate>No patches</span></span\n                >\n              </ng-template>\n              <ng-template ngPluralCase="=1">\n                <span class="label label-info">\n                  <span translate>1 patch</span>\n                </span>\n              </ng-template>\n              <ng-template ngPluralCase="other">\n                <span class="label label-info">\n                  <span\n                    ngNonBindable\n                    translate\n                    [translateParams]="{ count: getPatchVersionsCount$(baseVersion) | async }"\n                    >{{ count }} patches</span\n                  ></span\n                >\n              </ng-template>\n            </span>\n          </span>\n        </span>\n      </div>\n    </c8y-li-body>\n\n    <c8y-li-collapse [item]="baseVersion">\n      <c8y-list-group>\n        <c8y-li\n          *c8yFor="\n            let patchVersion of getBaseVersionAndPatches$(baseVersion) | async;\n            let i = index;\n            loadMore: \'auto\'\n          "\n        >\n          <c8y-li-radio (onSelect)="selectVersionOrPatch($event, patchVersion)" [selected]="patchVersion === selected"></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon="c8y-firmware"></i>\n          </c8y-li-icon>\n          <c8y-li-body class="content-flex-50">\n            <div class="col-3">\n              {{ patchVersion.c8y_Firmware.version }}\n            </div>\n            <div class="col-3">\n              <span *ngIf="patchVersion.c8y_Patch; else version" translate class="label label-info">patch</span>\n              <ng-template #version><span translate class="label label-primary">version</span></ng-template>\n            </div>\n            <div class="col-6 text-truncate">\n              <span class="text-label-small m-r-4" translate>\n                File\n              </span>\n              <span title="{{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}">\n                {{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\n              </span>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </c8y-li-collapse>\n  </c8y-li>\n</c8y-list-group>\n'})],e)}(),ie=function(){function e(){}return e.prototype.ngOnChanges=function(e){if(e.selectedItems){var t=this.deviceTypes;this.title=t&&t.length?t.join(", "):o.gettext("Undefined`device type`")}},Object.defineProperty(e.prototype,"selectedToInstall",{get:function(){return this.selectedItems.filter((function(e){return"install"===e.action}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"selectedToDelete",{get:function(){return this.selectedItems.filter((function(e){return"delete"===e.action}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"deviceTypes",{get:function(){return r.uniq(this.selectedItems.filter((function(e){return r.has(e,["software","c8y_Filter","type"])})).map((function(e){return e.software.c8y_Filter.type})))},enumerable:!0,configurable:!0}),T([n.Input()],e.prototype,"selectedItems",void 0),e=T([n.Component({selector:"c8y-confirm-software-selection-step",template:'<div class="card-block p-t-0 flex-no-shrink separator-bottom col-xs-12">\n  <div class="row p-b-16">\n    <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n      <h4 class="text-center text-gray">{{ \'Confirm selection\' | translate }}</h4>\n    </div>\n  </div>\n</div>\n<div class="col-xs-12 flex-grow no-gutter">\n  <div class="card-inner-scroll fit-v">\n    <div class="card-block">\n      <div class="row p-b-16">\n        <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n          <div class="text-truncate" title="{{ this.title }}">\n            <span class="legend form-block" translate>Device type</span>\n            <ng-container *ngIf="deviceTypes.length > 0; else noType">\n              <span *ngFor="let deviceType of deviceTypes; let last = last">{{ deviceType }}{{ last ? \'\' : \', \' }}</span>\n            </ng-container>\n            <ng-template #noType>\n              <em class="text-muted" translate>Undefined`device type`</em>\n            </ng-template>\n          </div>\n        </div>\n      </div>\n      <div class="row p-b-16" *ngIf="selectedToInstall.length">\n        <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n          <span class="legend form-block" translate>Installations / updates`software`</span>\n          <c8y-list-group>\n            <c8y-li *ngFor="let selectedItem of selectedToInstall">\n              <c8y-li-icon>\n                <i c8yIcon="c8y-tools"></i>\n              </c8y-li-icon>\n              <c8y-li-body class="content-flex-10">\n                <div class="col-6 text-truncate" title="{{ selectedItem.software.name }}">\n                  {{ selectedItem.software.name }}\n                </div>\n                <div class="col-6 text-right">\n                  <span class="text-label-small m-r-4" translate>\n                    Version\n                  </span>\n                  <span>\n                    {{ selectedItem.version.c8y_Software.version }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n      <div class="row p-b-16" *ngIf="selectedToDelete.length">\n        <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n          <span class="legend form-block" translate>Removals`software`</span>\n          <c8y-list-group>\n            <c8y-li *ngFor="let selectedItem of selectedToDelete">\n              <c8y-li-icon>\n                <i c8yIcon="c8y-tools"></i>\n              </c8y-li-icon>\n              <c8y-li-body class="content-flex-10">\n                <div class="col-6">\n                  {{ selectedItem.software.name }}\n                </div>\n                <div class="col-6 text-right">\n                  <span class="text-label-small m-r-8" translate>\n                    Version\n                  </span>\n                  <span>\n                    {{ selectedItem.version.c8y_Software.version }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'})],e)}(),oe=function(){function e(e,t){var i=this;this.repositoryService=e,this.translate=t,this.software=new n.EventEmitter,this.textFilter$=new a.BehaviorSubject(""),this.deviceType$=new a.BehaviorSubject(""),this.deviceTypes=[],this.selectedDeviceType={name:""},this.isLegacy=this.repositoryService.isLegacyEntry.bind(this.repositoryService),this.software$=a.combineLatest(this.textFilter$,this.deviceType$).pipe(p.switchMap((function(e){var t=E(e,2),n=t[0],o=t[1];return i.getSoftware(n,o)})),p.shareReplay(1)),this.NO_DEVICE_TYPE_AVAILABLE=o.gettext("No device type available"),this.loadDeviceTypes()}return e.prototype.getVersions=function(e){return this.repositoryService.listAllVersions(e)},e.prototype.getDeviceTypeTitle=function(e){return r.get(e,"c8y_Filter.type",this.translate.instant(this.NO_DEVICE_TYPE_AVAILABLE))},e.prototype.loadDeviceTypes=function(){var e=this;this.deviceTypeSubscription=this.deviceType$.pipe(p.debounceTime(300),p.distinctUntilChanged(),p.switchMap((function(t){var n={"c8y_Filter.type":"*"+t+"*"};return a.from(e.repositoryService.listRepositoryEntries(f.RepositoryType.SOFTWARE,{query:n}))}))).subscribe((function(t){var n=t.data;e.deviceTypes=r.uniqWith(n.map((function(e){return{name:e.c8y_Filter.type}})),r.isEqual)}))},e.prototype.ngOnDestroy=function(){this.deviceTypeSubscription.unsubscribe()},e.prototype.resetSelection=function(){this.radioButtons.map((function(e){return e.reset()}))},e.prototype.selectSoftware=function(e){var t=e.option,n=e.software;n.selectedId=t.id,t.action="install",this.emitSoftware({option:t,software:n})},e.prototype.emitSoftware=function(e){var t=e.option,n=e.software,i=Object.assign({},{software:n},{version:t},{action:t.action});this.software.emit(i)},e.prototype.getSoftware=function(e,t){var n=e?{name:"*"+e+"*"}:{};return t&&(n.__or=[{"c8y_Filter.type":t},{__not:{__has:"c8y_Filter.type"}}]),this.repositoryService.listRepositoryEntries(f.RepositoryType.SOFTWARE,{query:n})},e.ctorParameters=function(){return[{type:f.RepositoryService},{type:S.TranslateService}]},T([n.Output()],e.prototype,"software",void 0),T([n.ViewChildren(o.ListItemRadioComponent)],e.prototype,"radioButtons",void 0),T([o.memoize(r.property("id"))],e.prototype,"getVersions",null),e=T([n.Component({selector:"c8y-select-software-step",template:'<div class="card-block p-t-0 overflow-visible flex-no-shrink separator-bottom col-xs-12">\n  <div class="row p-b-16">\n    <div class="col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3">\n      <h4 class="text-center m-b-16">{{ \'Select software\' | translate }}</h4>\n      <div class="row">\n        <div class="col-md-6">\n          <div class="input-group input-group-search">\n            <input\n              type="search"\n              class="form-control"\n              title="{{ \'Filter software…\' | translate }}"\n              placeholder="{{ \'Filter software…\' | translate }}"\n              [ngModel]="textFilter$ | async"\n              (ngModelChange)="textFilter$.next($event)"\n            />\n            <span class="input-group-addon">\n              <i c8yIcon="filter" *ngIf="(textFilter$ | async).length === 0"></i>\n              <i\n                c8yIcon="times"\n                class="text-muted"\n                *ngIf="(textFilter$ | async).length > 0"\n                (click)="textFilter$.next(\'\')"\n              ></i>\n            </span>\n          </div>\n        </div>\n        <div class="col-xs-12 p-b-8 visible-xs visible-sm"></div>\n        <div class="col-md-6">\n          <c8y-form-group class="m-0">\n            <c8y-typeahead\n              name="deviceType"\n              [(ngModel)]="selectedDeviceType"\n              placeholder="{{ \'Type to filter device types…\' | translate }}"\n              (onSearch)="deviceType$.next($event)"\n              [allowFreeEntries]="false"\n            >\n              <c8y-li\n                class="p-l-8 p-r-8 c8y-list__item--link"\n                (click)="selectedDeviceType = {name: \'\'}; deviceType$.next(\'\')"\n              >\n                <span>{{\'All device types\' | translate }}</span>\n              </c8y-li>\n              <c8y-li\n              *ngFor="let deviceType of deviceTypes"\n              class="p-l-8 p-r-8 c8y-list__item--link"\n              (click)="selectedDeviceType = deviceType; deviceType$.next(deviceType.name)"\n              [active]="selectedDeviceType === deviceType"\n              >\n              <c8y-highlight\n              [text]="deviceType.name"\n              [pattern]="deviceType$ | async"\n              ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <c8y-messages\n            ><c8y-message\n              name="notExisting"\n              [text]="\'Select one of the existing device types.\' | translate"\n            ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class="col-xs-12 flex-grow no-gutter">\n  <div class="card-inner-scroll fit-v">\n    <div class="card-block p-t-0 p-b-0">\n      \x3c!-- TODO: use the same approach as in firmware, i.e. apply the class \'dd-low\'\n        when the list is shorter than 10 --\x3e\n      <c8y-list-group [ngClass]="{ \'dd-low\': true }">\n        <c8y-li *c8yFor="let software of software$ | async; loadMore: \'auto\'">\n          <c8y-li-icon>\n            <i c8yIcon="c8y-tools"></i>\n          </c8y-li-icon>\n          <c8y-li-body class="content-flex-60">\n            <div class="col-5">\n              <div class="text-truncate" title="{{ software.name }}">\n                {{ software.name }}\n              </div>\n            </div>\n            <div class="col-3">\n              <div class="text-truncate" title="{{ \'Device type\' | translate }}: {{ getDeviceTypeTitle(software) }}">\n                <span class="text-label-small m-r-8" translate>\n                  Device type\n                </span>\n                <span *ngIf="software.c8y_Filter?.type; else noType">\n                  {{ software.c8y_Filter?.type }}\n                </span>\n                <ng-template #noType>\n                  <small><em class="text-muted" translate>Undefined`device type`</em></small>\n                </ng-template>\n              </div>\n            </div>\n            <div class="col-2">\n              <span *ngIf="isLegacy(software)" class="label label-warning flex-item-right-sm">\n                <span translate>Legacy</span>\n              </span>\n              <span *ngIf="!isLegacy(software)">\n                <span *ngIf="(getVersions(software) | async)?.data === null">\n                  <span class="label label-info">\n                    <i c8yIcon="circle-o-notch" class="fa-spin"></i>\n                  </span>\n                </span>\n                <span *ngIf="(getVersions(software) | async)?.data !== null">\n                  <span [ngPlural]="(getVersions(software) | async)?.data.length || 0">\n                    <ng-template ngPluralCase="=0">\n                      <span class="label label-default flex-item-right-sm">\n                        <span translate>No versions</span>\n                      </span>\n                    </ng-template>\n                    <ng-template ngPluralCase="=1">\n                      <span class="label label-info"><span translate>1 version</span></span>\n                    </ng-template>\n                    <ng-template ngPluralCase="other">\n                      <span class="label label-info">\n                        <span\n                          ngNonBindable\n                          translate\n                          [translateParams]="{\n                            count: (getVersions(software) | async)?.data.length || \'\'\n                          }"\n                          >{{ count }} versions</span\n                        >\n                      </span>\n                    </ng-template>\n                  </span>\n                </span>\n              </span>\n            </div>\n          </c8y-li-body>\n          <c8y-li-collapse>\n            <c8y-list-group>\n              <c8y-li *ngFor="let option of (getVersions(software) | async)?.data">\n                <c8y-li-radio\n                  [name]="software.id"\n                  (onSelect)="selectSoftware({ option: option, software: software })"\n                ></c8y-li-radio>\n                <c8y-li-body class="content-flex-40 p-r-16">\n                  <div class="col-4">\n                    {{ option.c8y_Software.version }}\n                  </div>\n                  <div class="col-5">\n                    <div class="text-truncate" title="{{ option.c8y_Software.url }}">\n                      <span class="text-label-small m-r-4" translate> File </span>\n                      <span>{{ option.c8y_Software.url }}</span>\n                    </div>\n                  </div>\n                  <div class="col-3" *ngIf="option.id === software.selectedId">\n                    <div class="c8y-select-wrapper d-inline-block" style="margin: -4px 0;">\n                      <select\n                        id="action"\n                        class="form-control input-sm"\n                        [(ngModel)]="option.action"\n                        (change)="emitSoftware({ option: option, software: software })"\n                      >\n                        <option [ngValue]="\'install\'">{{ \'Install / update`software`\' | translate }}</option>\n                        <option [ngValue]="\'delete\'">{{ \'Remove`software`\' | translate }}</option>\n                      </select>\n                      <span></span>\n                    </div>\n                  </div>\n                </c8y-li-body>\n              </c8y-li>\n            </c8y-list-group>\n          </c8y-li-collapse>\n        </c8y-li>\n      </c8y-list-group>\n    </div>\n  </div>\n</div>\n'})],e)}(),re=function(e){function t(t,n,i){var r=e.call(this)||this;return r.bulkOperationService=t,r.repositoryService=n,r.translate=i,r.NO_DEVICE_TYPE_AVAILABLE=o.gettext("Undefined`device type`"),r.elementCount=0,r.DD_LOW_COUNT=10,r.textFilter$=new a.BehaviorSubject(""),r.configType$=new a.BehaviorSubject(""),r.configTypes=[],r.selectedConfigType={name:""},r.configurations$=a.combineLatest(r.textFilter$,r.configType$).pipe(p.switchMap((function(e){var t=E(e,2),n=t[0],i=t[1];return r.getConfiguration(n,i)})),p.shareReplay(1)),r.DD_LOW_COUNT=r.bulkOperationService.DD_LOW_COUNT,r.loadConfigurationTypes(),r}return k(t,e),t.prototype.loadConfigurationTypes=function(){var e=this;this.configTypeSubscription=this.configType$.pipe(p.debounceTime(300),p.distinctUntilChanged(),p.switchMap((function(t){var n={configurationType:"*"+t+"*"};return a.from(e.repositoryService.listRepositoryEntries(f.RepositoryType.CONFIGURATION,{query:n}))}))).subscribe((function(t){var n=t.data;e.configTypes=r.uniqWith(n.map((function(e){return{name:e.configurationType}})),r.isEqual)}))},t.prototype.ngOnDestroy=function(){this.configTypeSubscription.unsubscribe()},t.prototype.selectConfiguration=function(e){this.selectedConfiguration=e},t.prototype.goToSecondStep=function(e){e.stepper.next(),this.getConfigBinary(),this.deviceTypes=this.selectedConfiguration.deviceType},t.prototype.getConfigBinary=function(){return I(this,void 0,void 0,(function(){var e;return F(this,(function(t){switch(t.label){case 0:return this.selectedConfiguration.url?(e=this.selectedConfiguration,[4,this.repositoryService.getBinaryText(this.selectedConfiguration.url,{allowExternal:!0})]):[3,2];case 1:e.binary=t.sent(),t.label=2;case 2:return[2]}}))}))},t.prototype.getDeviceTypeTitle=function(e){return r.get(e,"deviceType",this.translate.instant(this.NO_DEVICE_TYPE_AVAILABLE))},t.prototype.retrieveOperationPrototype=function(){var e={type:this.selectedConfiguration.configurationType,url:this.selectedConfiguration.url};return{name:o.gettext("Configuration update"),description:r.get(this.selectedConfiguration,"name"),prototype:{description:"Update configuration to: "+this.selectedConfiguration.name+".",c8y_DownloadConfigFile:e}}},t.prototype.getConfiguration=function(e,t){var n=e?{name:"*"+e+"*"}:{};return t&&(n.__or=[{configurationType:t},{__not:{__has:"configurationType"}}]),this.repositoryService.listRepositoryEntries(f.RepositoryType.CONFIGURATION,{query:n})},t.ctorParameters=function(){return[{type:L},{type:f.RepositoryService},{type:S.TranslateService}]},t=T([n.Component({selector:"c8y-stepper-bulk-type-configuration",template:'<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep="\n      \'Select configuration\' | translate; \n      completed: !!selectedConfiguration;\n      buttonsDisabled: !selectedConfiguration; \n      onNext: goToSecondStep.bind(this)"\n  >\n    <div class="card-block p-t-0 overflow-visible flex-no-shrink separator-bottom col-xs-12">\n      <div class="row p-b-16">\n        <div class="col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3">\n          <h4 class="text-center m-b-16">{{ \'Select configuration\' | translate }}</h4>\n          <div class="row">\n            <div class="col-md-6">\n              <div class="input-group input-group-search">\n                <input\n                  type="search"\n                  class="form-control"\n                  title="{{ \'Filter…\' | translate }}"\n                  placeholder="{{ \'Filter…\' | translate }}"\n                  [ngModel]="textFilter$ | async"\n                  (ngModelChange)="textFilter$.next($event)"\n                />\n                <span class="input-group-addon">\n                  <i c8yIcon="filter" *ngIf="(textFilter$ | async).length === 0"></i>\n                  <i\n                    c8yIcon="times"\n                    class="text-muted"\n                    *ngIf="(textFilter$ | async).length > 0"\n                    (click)="textFilter$.next(\'\')"\n                  ></i>\n                </span>\n              </div>\n            </div>\n            <div class="col-xs-12 p-b-8 visible-xs visible-sm"></div>\n            <div class="col-md-6">\n              <c8y-form-group class="m-0">\n                <c8y-typeahead\n                  name="configType"\n                  [(ngModel)]="selectedConfigType"\n                  placeholder="{{ \'Type to filter configuration types…\' | translate }}"\n                  (onSearch)="configType$.next($event)"\n                >\n                  <c8y-li\n                    class="p-l-8 p-r-8 c8y-list__item--link"\n                    (click)="selectedConfigType = { name: \'\' }; configType$.next(\'\')"\n                  >\n                    <span>{{ \'All configuration types\' | translate }}</span>\n                  </c8y-li>\n                  <c8y-li\n                    *ngFor="let configType of configTypes"\n                    class="p-l-8 p-r-8 c8y-list__item--link"\n                    (click)="selectedConfigType = configType; configType$.next(configType.name)"\n                    [active]="selectedConfigType === configType"\n                  >\n                    <c8y-highlight\n                      [text]="configType.name"\n                      [pattern]="configType$ | async"\n                    ></c8y-highlight>\n                  </c8y-li>\n                </c8y-typeahead>\n              </c8y-form-group>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class="col-xs-12 flex-grow no-gutter">\n      <div class="card-inner-scroll fit-v">\n        <div class="card-block p-t-0 p-b-0">\n          <c8y-list-group [ngClass]="{ \'dd-low\': elementCount < DD_LOW_COUNT }">\n            <c8y-li #listItem *c8yFor="let configuration of configurations$ | async">\n              <c8y-li-radio (onSelect)="selectConfiguration(configuration)"></c8y-li-radio>\n              <c8y-li-icon icon="gears"></c8y-li-icon>\n              <c8y-li-body class="content-flex-60">\n                <div class="col-5">\n                  <div class="text-truncate" title="{{ configuration.name || \'-\' }}">\n                    <c8y-highlight\n                      [text]="configuration.name || \'-\'"\n                      [pattern]="textFilter$ | async"\n                    ></c8y-highlight>\n                  </div>\n                </div>\n                <div class="col-4">\n                  <div\n                    class="text-truncate"\n                    title="{{ \'Device type\' | translate }}: {{ getDeviceTypeTitle(configuration) }}"\n                  >\n                    <span translate class="text-label-small m-r-4">Device type</span>\n                    {{ configuration.deviceType }}\n                    <em class="text-muted" *ngIf="!configuration.deviceType">\n                      {{ \'Undefined`device type`\' | translate }}\n                    </em>\n                  </div>\n                </div>\n                <div class="col-3">\n                  <span\n                    class="label label-info"\n                    *ngIf="configuration.configurationType"\n                    title="{{ \'Configuration type\' | translate }}: {{\n                      configuration.configurationType\n                    }}"\n                  >\n                    <c8y-highlight\n                      [text]="configuration.configurationType"\n                      elementClass="text-gray-lighter"\n                      [pattern]="configType$ | async"\n                    ></c8y-highlight>\n                  </span>\n                  <span\n                    class="label label-default"\n                    *ngIf="!configuration.configurationType"\n                    title="{{ \'Configuration type\' | translate }}: {{ \'Undefined\' | translate }}"\n                  >\n                    {{ \'Undefined\' | translate }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n  <ng-container *customStep="\'Preview configuration\' | translate">\n    <div class="d-contents">\n      <div class="card-block p-t-0 flex-no-shrink separator-bottom">\n        <div class="row">\n          <div class="col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3">\n            <h4 class="text-center m-b-16">\n              {{ \'Preview configuration\' | translate }}\n            </h4>\n            <div class="row no-gutter">\n              <div class="col-xs-6">\n                <div class="text-right text-truncate" title="{{ selectedConfiguration?.name }}">\n                  <strong>{{ selectedConfiguration?.name }}</strong>\n                </div>\n                <span class="label label-primary" *ngIf="selectedConfiguration?.configurationType">\n                  {{ selectedConfiguration.configurationType }}\n                </span>\n                <span class="label label-default" *ngIf="!selectedConfiguration?.configurationType">\n                  {{ \'Undefined\' | translate }}\n                </span>\n              </div>\n              <div class="col-xs-6 text-right">\n                <div class="text-truncate" title="{{ \'Device type\' | translate }}: {{ getDeviceTypeTitle(selectedConfiguration) }}">\n                  <span translate class="text-label-small m-r-4">\n                    Device type\n                  </span>\n                  {{ selectedConfiguration?.deviceType }}\n                  <em class="text-muted" *ngIf="!selectedConfiguration?.deviceType" translate>\n                    Undefined`device type`\n                  </em>\n                </div>\n                <p>\n                  <span translate class="text-label-small m-r-4">Updated</span>\n                  <small>{{ selectedConfiguration?.lastUpdated | c8yDate }}</small>\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class="col-xs-12 flex-grow no-gutter">\n        <div class="card-inner-scroll fit-v">\n          <div class="card-block p-t-0">\n            <div class="row">\n              <div class="col-md-8 col-md-offset-2">\n                <div class="legend form-block" translate>Preview</div>\n                <div\n                  class="c8y-empty-state text-left"\n                  *ngIf="!this.selectedConfiguration?.binary; else binaryPreview"\n                >\n                  <h1 [c8yIcon]="\'file-code-o\'"></h1>\n                  <p>\n                    <strong translate>No preview available.</strong><br />\n                    <small translate>Could not fetch the file.</small>\n                  </p>\n                </div>\n                <ng-template #binaryPreview>\n                  <pre\n                    style="min-height: 98px;"\n                  ><code>{{ this.selectedConfiguration?.binary }}</code></pre>\n                </ng-template>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n'})],t)}(z),se=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return k(t,e),t.prototype.goToConfirmSelection=function(e){this.deviceTypes=r.get(this.selectedDeviceProfile,"c8y_Filter.type"),e.stepper.next()},t.prototype.onDeviceProfileSelected=function(e){this.selectedDeviceProfile=e},t.prototype.retrieveOperationPrototype=function(){return{name:o.gettext("Apply device profile"),description:r.get(this.selectedDeviceProfile,"name"),prototype:{description:"Apply device profile: "+this.selectedDeviceProfile.name,profileId:this.selectedDeviceProfile.id,profileName:this.selectedDeviceProfile.name,c8y_DeviceProfile:this.selectedDeviceProfile.c8y_DeviceProfile}}},t=T([n.Component({selector:"c8y-stepper-bulk-type-device-profile",template:'<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep="\n      \'Select device profile\' | translate; \n      completed: !!selectedDeviceProfile;\n      buttonsDisabled: !selectedDeviceProfile; \n      onNext: goToConfirmSelection.bind(this)"\n  >\n    <c8y-select-device-profile-step\n      (deviceProfile)="onDeviceProfileSelected($event)"\n      class="d-contents"\n    ></c8y-select-device-profile-step>\n  </ng-container>\n  <ng-container *customStep="\'Confirm selected device profile\' | translate">\n    <c8y-confirm-device-profile-selection-step\n      class="d-contents"\n      [selectedDeviceProfile]="selectedDeviceProfile"\n    ></c8y-confirm-device-profile-selection-step>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n'})],t)}(z),ae=function(e){function t(t,n){var i=e.call(this)||this;return i.bulkOperationService=t,i.translate=n,i.descriptionTemplate=o.gettext("{{ name }} (version {{ version }})"),i.textFilter$=new a.BehaviorSubject(""),i.stepData={firmware:void 0,versionOrPatch:void 0},i}return k(t,e),t.prototype.goToVersionOrPatchStep=function(e){var t=e.stepper,n=this.stepData.firmware;this.bulkOperationService.setFirmwareId(n.id),this.deviceTypes=(n.c8y_Filter||{}).type,t.next()},t.prototype.onVersionOrPatchSelected=function(e){this.stepData.versionOrPatch=e},t.prototype.onFirmwareSelected=function(e){this.stepData.firmware=e},t.prototype.ngOnDestroy=function(){this.subscription&&this.subscription.unsubscribe()},t.prototype.retrieveOperationPrototype=function(){var e=this.stepData.firmware,t=this.stepData.versionOrPatch;if(e&&t){var n={name:e.name,version:t.c8y_Firmware.version,url:t.c8y_Firmware.url};t.c8y_Patch&&(n.isPatch=!0,n.dependency=t.c8y_Patch.dependency);var i="Update firmware to: "+e.name+" (version: "+t.c8y_Firmware.version+").";return{name:o.gettext("Firmware update"),description:this.translate.instant(this.descriptionTemplate,{name:r.get(this.stepData,"firmware.name"),version:r.get(this.stepData,"versionOrPatch.c8y_Firmware.version")}),prototype:{description:i,c8y_Firmware:n}}}},t.prototype.onSelectionChange=function(t){this.textFilter$.next(""),e.prototype.onSelectionChange.call(this,t)},t.ctorParameters=function(){return[{type:L},{type:S.TranslateService}]},t=T([n.Component({selector:"c8y-stepper-firmware",template:'<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep="\n      \'Select firmware\' | translate;\n      completed: !!stepData?.firmware;\n      buttonsDisabled: !stepData?.firmware;\n      onNext: goToVersionOrPatchStep.bind(this)\n    "\n  >\n    <c8y-select-firmware-step\n      [selected]="stepData?.firmware"\n      (firmware)="onFirmwareSelected($event)"\n      class="d-contents"\n    ></c8y-select-firmware-step\n  ></ng-container>\n  <ng-container\n    *customStep="\n      \'Select version or patch\' | translate;\n      completed: !!stepData?.versionOrPatch;\n      buttonsDisabled: !stepData?.versionOrPatch\n    "\n  >\n    <div class="card-block p-t-0 flex-no-shrink separator-bottom col-xs-12">\n      <div class="row">\n        <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n          <h4 class="text-center m-b-16 text-gray" translate>\n            Select version or patch\n          </h4>\n          <p class="text-center p-b-8 text-truncate">\n            <strong [title]="stepData?.firmware?.name">{{ stepData?.firmware?.name }}</strong>\n            <br/>\n            <small [title]="stepData?.firmware?.description">{{\n              stepData?.firmware?.description\n            }}</small>\n          </p>\n        </div>\n      </div>\n    </div>\n    <div class="col-xs-12 flex-grow no-gutter">\n      <div class="card-inner-scroll fit-v">\n        <div class="card-block p-t-0 p-b-0">\n          <c8y-version-or-patch-step\n            [selected]="stepData?.versionOrPatch"\n            (versionOrPatch)="onVersionOrPatchSelected($event)">\n          </c8y-version-or-patch-step>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n'})],t)}(z),le=function(e){function t(t,n){var i=e.call(this)||this;return i.modal=t,i.translate=n,i.descriptionTemplateSingle=o.gettext("Update software to: {{ name }} (version {{ version }})"),i.descriptionTemplateOneOther=o.gettext("Update software to: {{ name }} (version {{ version }}) and one other"),i.descriptionTemplateMultiple=o.gettext("Update software to: {{ name }} (version {{ version }}) and {{ count }} others"),i.selectedSoftware=[],i}return k(t,e),t.prototype.onSoftwareSelected=function(e){this.selectedSoftware=this.selectedSoftware.filter((function(t){return t.software.id!==e.software.id})),this.selectedSoftware.push(e)},t.prototype.confirmSoftwareSelection=function(e){return I(this,void 0,void 0,(function(){var t;return F(this,(function(n){switch(n.label){case 0:if(t=this.getUniqueDeviceTypes(),this.deviceTypes=t,!(t.length>1))return[3,5];n.label=1;case 1:return n.trys.push([1,3,,4]),[4,this.modal.confirm(o.gettext("Selected software for various device types"),o.gettext("Operation may fail due to unsupported software. Do you want to proceed?"),o.Status.WARNING,{ok:o.gettext("Confirm"),cancel:o.gettext("Cancel")})];case 2:return n.sent(),e.stepper.next(),[3,4];case 3:return n.sent(),this.selectedSoftware=[],this.selectSoftware.resetSelection(),[3,4];case 4:return[3,6];case 5:e.stepper.next(),n.label=6;case 6:return[2]}}))}))},t.prototype.retrieveOperationPrototype=function(){var e,t=this.selectedSoftware.map((function(e){return{name:e.software.name,version:e.version.c8y_Software.version,url:e.version.c8y_Software.url,action:e.action}})),n={name:t[0].name,version:t[0].version,count:t.length-1};switch(t.length){case 1:e=this.translate.instant(this.descriptionTemplateSingle,n);break;case 2:e=this.translate.instant(this.descriptionTemplateOneOther,n);break;default:e=this.translate.instant(this.descriptionTemplateMultiple,n)}return{name:o.gettext("Software update"),prototype:{description:e,c8y_SoftwareUpdate:t}}},t.prototype.getUniqueDeviceTypes=function(){return r.uniq(this.selectedSoftware.map((function(e){return e.software.c8y_Filter&&e.software.c8y_Filter.type})).filter((function(e){return!!e})))},t.ctorParameters=function(){return[{type:o.ModalService},{type:S.TranslateService}]},T([n.ViewChild(oe,{static:!1})],t.prototype,"selectSoftware",void 0),t=T([n.Component({selector:"c8y-stepper-bulk-type-software",template:'<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep="\n      \'Select software\' | translate; \n      completed: !!selectedSoftware.length;\n      buttonsDisabled: !selectedSoftware.length; \n      onNext: confirmSoftwareSelection.bind(this)"\n  >\n    <c8y-select-software-step\n      (software)="onSoftwareSelected($event)"\n      class="d-contents"\n    ></c8y-select-software-step>\n  </ng-container>\n  <ng-container *customStep="\'Confirm selected software\' | translate">\n    <c8y-confirm-software-selection-step\n      class="d-contents"\n      [selectedItems]="selectedSoftware"\n    ></c8y-confirm-software-selection-step>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n'})],t)}(z),ce=function(){function e(){this.readOnly=!1,this.onRetryFailedOperations=new n.EventEmitter,this.showFailedOperation=new n.EventEmitter,this.tabs=[]}return e.prototype.ngOnInit=function(){this.template=this.detailsTemplate,this.tabs=[{label:o.gettext("Details"),path:null,icon:"asterisk",template:this.detailsTemplate},{label:o.gettext("History of changes"),path:null,icon:"archive",template:this.auditTemplate}]},T([n.Input()],e.prototype,"bulkOperation",void 0),T([n.Input()],e.prototype,"readOnly",void 0),T([n.Output()],e.prototype,"onRetryFailedOperations",void 0),T([n.Output()],e.prototype,"showFailedOperation",void 0),T([n.ViewChild("details",{static:!0})],e.prototype,"detailsTemplate",void 0),T([n.ViewChild("audit",{static:!0})],e.prototype,"auditTemplate",void 0),e=T([n.Component({selector:"c8y-bulk-operation-details-tabs",template:'<div #container class="tabContainer">\n  <ul class="nav nav-tabs nav-tabsc8y">\n    <li [ngClass]="{ active: tab.template === template }" *ngFor="let tab of tabs">\n      <button [title]="tab.label | translate" class="btn-clean" (click)="template = tab.template">\n        <i [c8yIcon]="tab.icon"></i>\n        <span class="txt">{{ tab.label | translate }}</span>\n      </button>\n    </li>\n  </ul>\n</div>\n\n<ng-container *ngTemplateOutlet="template"></ng-container>\n\n<ng-template #details>\n  <c8y-bulk-operation-details\n    [bulkOperation]="bulkOperation"\n    [readOnly]="readOnly"\n    (showFailedOperation)="showFailedOperation.emit($event)"\n  >\n  </c8y-bulk-operation-details>\n</ng-template>\n\n<ng-template #audit>\n  <c8y-audit-log [source]="bulkOperation.id"></c8y-audit-log>\n</ng-template>\n\n<c8y-single-operations-list\n  [bulkOperation]="bulkOperation"\n  [readOnly]="readOnly"\n  (onRetryFailedOperations)="onRetryFailedOperations.emit($event)"\n  class="d-flex d-col"\n></c8y-single-operations-list>\n'})],e)}(),pe={PENDING:o.gettext("Pending"),EXECUTING:o.gettext("Executing"),FAILED:o.gettext("Failed"),SUCCESSFUL:o.gettext("Successful"),ALL:o.gettext("All")},ue=[{label:pe.PENDING,iconClass:"fa fw fa-clock-o text-info",selected:!1},{label:pe.EXECUTING,iconClass:"fa fw fa-refresh text-info",selected:!1},{label:pe.SUCCESSFUL,iconClass:"fa fw fa-check-circle text-success",selected:!1},{label:pe.FAILED,iconClass:"fa fw fa-exclamation-circle text-danger",selected:!1}],de=function(){function e(e,t){this.bulkOperationsService=e,this.alertService=t,this.device={},this.showIfTextTruncated=!1,this.singleOperationStatusNames=pe,this.singleOperationsStatusProperties=ue,this.readOnly=!1}return e.prototype.ngOnInit=function(){return I(this,void 0,void 0,(function(){var e;return F(this,(function(t){switch(t.label){case 0:return this.iconClass=this.getIconClass(),e=this,[4,this.getDeviceMO(this.operation.deviceId)];case 1:return e.device=t.sent(),[2]}}))}))},e.prototype.ngAfterViewInit=function(){this.isTextTruncated()},e.prototype.retrySingleOperation=function(e){return I(this,void 0,void 0,(function(){var t,n;return F(this,(function(i){switch(i.label){case 0:t=r.omit(e,["id","self","status","failureReason","creationTime","delivery"]),i.label=1;case 1:return i.trys.push([1,3,,4]),[4,this.bulkOperationsService.createSingleOperation(t)];case 2:return i.sent(),this.alertService.success(o.gettext("Operation created.")),[3,4];case 3:return n=i.sent(),this.alertService.addServerFailure(n),[3,4];case 4:return[2]}}))}))},e.prototype.getIconClass=function(){var e=this;return this.singleOperationsStatusProperties.find((function(t){return t.label.toUpperCase()===e.operation.status})).iconClass},e.prototype.getDeviceMO=function(e){return I(this,void 0,void 0,(function(){var t;return F(this,(function(n){switch(n.label){case 0:return[4,this.bulkOperationsService.getManagedObject(e)];case 1:return(t=n.sent())?[2,t.data]:[2]}}))}))},e.prototype.isTextTruncated=function(){if(this.operation.failureReason){var e=this.failureReasonRef.nativeElement;this.showIfTextTruncated=e.offsetWidth<e.scrollWidth}},e.ctorParameters=function(){return[{type:L},{type:o.AlertService}]},T([n.Input()],e.prototype,"operation",void 0),T([n.Input()],e.prototype,"readOnly",void 0),T([n.ViewChild("failureReason",{static:!0})],e.prototype,"failureReasonRef",void 0),e=T([n.Component({selector:"c8y-single-operation-item",template:'<c8y-li class="c8y-list__item--double-actions">\n  <c8y-li-icon>\n    <i [class]="iconClass"></i>\n  </c8y-li-icon>\n  <div [ngClass]="{\'content-flex-80\': !readOnly, \'content-flex-50\': readOnly}">\n    <div class="col-4">\n      <span class="m-r-4">\n        <device-status [mo]=""></device-status>\n      </span>\n      <a [routerLink]="[\'/device\', operation.deviceId, \'device-info\']" routerLinkActive="active">\n        {{ operation.deviceName }}\n      </a>\n    </div>\n    <div class="col-3">\n      <small class="icon-flex text-muted">\n        <i c8yIcon="calendar" class="m-r-4"></i>\n        {{ operation.creationTime | c8yDate }}\n      </small>\n    </div>\n    <div class="col-5">\n      <div class="flex-row">\n        <span class="text-truncate" #failureReason>\n          {{ operation.failureReason | translate }}\n        </span>\n        <a\n          *ngIf="showIfTextTruncated"\n          class="m-l-8"\n          popover="{{ operation.failureReason | translate }}"\n          placement="left"\n          outsideClick="true"\n        >\n          <i [c8yIcon]="\'info-circle text-primary\'"></i>\n        </a>\n        <div\n          class="showOnHover p-l-8 p-r-8 v-fit-20 flex-item-right"\n          *ngIf="!readOnly && operation.status == singleOperationStatusNames.FAILED.toUpperCase()"\n        >\n          <a\n            class="btn btn-default btn-xs"\n            (click)="retrySingleOperation(operation)"\n            title="{{ \'Retry operation\' | translate }}"\n          >\n            <i [c8yIcon]="\'repeat m-r-4\'"></i><span translate>Retry operation</span>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</c8y-li>\n'})],e)}(),ye=function(){function e(){this.statusOptions=[],this.onFilterChanged=new n.EventEmitter,this.isAllButtonSelected=!0}return Object.defineProperty(e.prototype,"options",{set:function(e){this.statusOptions=(e||[]).map((function(e){return{selected:!1,option:e}}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"_multiple",{set:function(e){this.multiple=w.coerceBooleanProperty(e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"_small",{set:function(e){this.small=w.coerceBooleanProperty(e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"displaySmall",{get:function(){return this.small},enumerable:!0,configurable:!0}),e.prototype.changeFilter=function(e){this.isAllButtonSelected=!1;var t=!1;this.multiple?(e.selected=!e.selected,t=!0):e.selected||(e.selected=!0,this.statusOptions.filter((function(t){return t!==e})).forEach((function(e){return e.selected=!1})),t=!0),t&&this.emitSelectedOptions()},e.prototype.removeFilter=function(){this.isAllButtonSelected=!0,this.statusOptions.forEach((function(e){return e.selected=!1})),this.emitSelectedOptions()},e.prototype.preset=function(e,t){var n=this;void 0===t&&(t=!0);var i=!1;this.statusOptions.forEach((function(e){return e.selected=!1})),this.statusOptions.filter((function(t){return(e||[]).map((function(e){return e.label})).includes(t.option.label)})).filter((function(){var e=n.multiple||!i;return e&&(i=!0),e})).forEach((function(e){return e.selected=!0})),this.isAllButtonSelected=!(e&&e.length),t&&this.emitSelectedOptions()},e.prototype.reset=function(){this.removeFilter()},e.prototype.activeFilters=function(){return this.statusOptions.filter((function(e){return e.selected})).map((function(e){return e.option}))},e.prototype.isFilterApplied=function(){return this.statusOptions.some((function(e){return e.selected}))},e.prototype.emitSelectedOptions=function(){this.onFilterChanged.emit(this.statusOptions.filter((function(e){return e.selected})).map((function(e){return e.option})))},T([n.Input()],e.prototype,"options",null),T([n.Input("multiple")],e.prototype,"_multiple",null),T([n.Input("small")],e.prototype,"_small",null),T([n.HostBinding("class.btn-group-sm")],e.prototype,"displaySmall",null),T([n.Output()],e.prototype,"onFilterChanged",void 0),e=T([n.Component({selector:"c8y-status-filter",template:'<button\n  *ngFor="let option of statusOptions"\n  class="btn btn-default"\n  [ngClass]="{ active: option.selected }"\n  tooltip="{{ option.option?.label | translate }}"\n  container="body"\n  (click)="changeFilter(option)"\n>\n  <i [class]="option.option?.iconClass"></i>\n  <span *ngIf="option.selected" class="m-8">{{ option.option?.label | translate }}</span>\n</button>\n<button\n  class="btn btn-default"\n  title="{{ \'All\' | translate }}"\n  [ngClass]="{ active: isAllButtonSelected }"\n  (click)="removeFilter()"\n>\n  {{ \'All\' | translate }}\n</button>\n',host:{class:"btn-group"}})],e)}(),fe=function(){function e(e){this.bulkOperationsService=e,this.readOnly=!1,this.onRetryFailedOperations=new n.EventEmitter,this.singleOperationStatusProperties=ue,this.singleOperationStatusNames=pe}return e.prototype.ngAfterViewInit=function(){return I(this,void 0,void 0,(function(){return F(this,(function(e){return this.statusFilter&&this.filterOperationsByType(),[2]}))}))},e.prototype.ngOnChanges=function(e){e.bulkOperation&&!e.bulkOperation.firstChange&&this.filterOperationsByType()},e.prototype.filterOperationsByType=function(){if(this.statusFilter){var e=this.getFilterTypeOfSingleOperations();this.statusFilter.preset(e===this.singleOperationStatusNames.ALL?[]:[{label:e}])}else setTimeout(this.filterOperationsByType.bind(this))},e.prototype.getFilterTypeOfSingleOperations=function(){var e=this.bulkOperation.progress;return e.failed>0?this.singleOperationStatusNames.FAILED:0===e.failed&&0===e.successful&&0===e.pending?this.singleOperationStatusNames.EXECUTING:0===e.failed&&0===e.successful&&0===e.executing?this.singleOperationStatusNames.PENDING:0===e.failed&&0===e.pending&&0===e.executing?this.singleOperationStatusNames.SUCCESSFUL:this.singleOperationStatusNames.ALL},e.prototype.getOperationsByStatus=function(e){return I(this,void 0,void 0,(function(){var t;return F(this,(function(n){switch(n.label){case 0:return t=this,[4,this.bulkOperationsService.getSingleOperationsByStatus(e[0]&&e[0].label,this.bulkOperation.id)];case 1:return t.singleOperations=n.sent(),[2]}}))}))},e.prototype.retryBulkOperation=function(){this.onRetryFailedOperations.emit(this.bulkOperation)},e.ctorParameters=function(){return[{type:L}]},T([n.Input()],e.prototype,"bulkOperation",void 0),T([n.Input()],e.prototype,"readOnly",void 0),T([n.Output()],e.prototype,"onRetryFailedOperations",void 0),T([n.ViewChild(ye,{static:!1})],e.prototype,"statusFilter",void 0),e=T([n.Component({selector:"c8y-single-operations-list",template:'<ng-container\n  *ngIf="\n    bulkOperation.progress.failed ||\n    bulkOperation.progress.executing ||\n    bulkOperation.progress.pending ||\n    bulkOperation.progress.successful\n  "\n>\n  <div class="legend form-block" translate>\n    Operations\n  </div>\n  <div class="flex-row p-b-8">\n    <div class="flex-grow p-b-8">\n      <span class="m-r-4" translate>Filter by status</span>\n      <c8y-status-filter\n        small\n        [options]="singleOperationStatusProperties"\n        (onFilterChanged)="getOperationsByStatus($event)"\n      ></c8y-status-filter>\n    </div>\n    <div class="p-b-8" *ngIf="!readOnly && bulkOperation.progress.failed > 0">\n      <button\n        class="btn btn-navbar"\n        (click)="retryBulkOperation()"\n        title="{{ \'Retry failed operations\' | translate }}"\n      >\n        <i class="fa fa-repeat m-r-4"></i> <span translate>Retry failed operations</span>\n      </button>\n    </div>\n  </div>\n  <div class="inner-scroll">\n    <c8y-list-group>\n      <div class="d-contents" *c8yFor="let operation of singleOperations; loadMore: \'auto\'">\n        <c8y-single-operation-item\n          [operation]="operation"\n          [readOnly]="readOnly"\n          style="display: contents;"\n        >\n        </c8y-single-operation-item>\n      </div>\n\n      <c8y-li *ngIf="singleOperations && singleOperations.data.length === 0">\n        <c8y-li-body>\n          <div class="c8y-empty-state text-center">\n            <h2 class="c8y-icon c8y-icon-energy c8y-icon-duocolor m-b-16"></h2>\n            <div>\n              <h3 translate>No single operations of the selected status to display.</h3>\n              <p class="m-b-16" translate>Single operations will be displayed here</p>\n            </div>\n          </div>\n        </c8y-li-body>\n      </c8y-li>\n    </c8y-list-group>\n  </div>\n</ng-container>\n'})],e)}(),ve=function(){function e(){this.typeColumn=new d.TypeDeviceGridColumn,this.onDeviceQueryStringChange=new n.EventEmitter,this.columns=[new d.StatusDeviceGridColumn,new d.NameDeviceGridColumn,this.typeColumn,new d.ModelDeviceGridColumn,new d.GroupDeviceGridColumn,new d.RegistrationDateDeviceGridColumn,new d.AlarmsDeviceGridColumn],this.unsubscribe$=new a.Subject}return e.prototype.ngOnInit=function(){var e=this;this.deviceTypes&&this.deviceTypes.pipe(p.distinctUntilChanged(),p.takeUntil(this.unsubscribe$)).subscribe((function(t){e.deviceGrid.updateFiltering([e.typeColumn.name],{type:t&&t.length?o.FilteringActionType.ApplyFilter:o.FilteringActionType.ResetFilter,payload:t?{filteringModifier:{externalFilterQuery:{types:t}}}:void 0})}))},e.prototype.ngOnDestroy=function(){this.unsubscribe$.next(!0),this.unsubscribe$.complete()},T([n.ViewChild(d.DeviceGridComponent,{static:!0})],e.prototype,"deviceGrid",void 0),T([n.Input()],e.prototype,"deviceTypes",void 0),T([n.Output()],e.prototype,"onDeviceQueryStringChange",void 0),e=T([n.Component({selector:"c8y-device-selector",template:'<c8y-device-grid\n  [title]="\'Select target devices\' | translate"\n  [columns]="columns"\n  [actionControls]="[]"\n  [infiniteScroll]="\'auto\'"\n  (onDeviceQueryStringChange)="onDeviceQueryStringChange.emit($event)"\n></c8y-device-grid>\n'})],e)}(),he=function(){function e(e){this.router=e}return e.prototype.get=function(){var e=[];return this.router.url.match(/devicecontrol/g)&&(e.push({path:"devicecontrol/single",label:o.gettext("Single operations"),icon:"c8y-icon c8y-icon-device-control",priority:1100,orientation:"horizontal"}),e.push({path:"devicecontrol/bulk",label:o.gettext("Bulk operations"),icon:"c8y-icon c8y-icon-energy",priority:1050,orientation:"horizontal"})),e},e.ctorParameters=function(){return[{type:c.Router}]},e=T([n.Injectable()],e)}(),ge=function(){function e(e){this.formBuilder=e,this.placeholder=o.gettext("Start date"),this.delayErrors=null,this.pickerErrors=null,this.DELAY_SECONDS_DEFAULT=1,this.DELAY_MILLISECONDS_DEFAULT=1,this.MINUTES_AHEAD_DEFAULT=5,this.delaySeconds=this.DELAY_SECONDS_DEFAULT,this.delayMilliseconds=this.DELAY_MILLISECONDS_DEFAULT,this.minutesAhead=this.MINUTES_AHEAD_DEFAULT,this.currentUnit="seconds"}var t;return t=e,Object.defineProperty(e.prototype,"_minutesAhead",{set:function(e){e&&e>this.MINUTES_AHEAD_DEFAULT&&(this.minutesAhead=e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"_delayConfig",{set:function(e){e&&(e.seconds>this.DELAY_SECONDS_DEFAULT&&(this.delaySeconds=e.seconds),e.milliseconds>this.DELAY_MILLISECONDS_DEFAULT&&(this.delayMilliseconds=e.milliseconds))},enumerable:!0,configurable:!0}),e.prototype.ngOnInit=function(){var e=this;this.minDate=new Date,this.initialDate=new Date(this.minDate.setMinutes(this.minDate.getMinutes()+this.minutesAhead)),this.minDelay=this.delaySeconds,this.fgOperationScheduler=this.formBuilder.group({picker:["",[u.Validators.required,this.dateValidation]],time:["",[u.Validators.required,this.timeValidation]],delay:["",[u.Validators.required,u.Validators.min(this.minDelay)]],unit:["seconds"]}),this.fgOperationScheduler.patchValue({picker:this.initialDate,time:this.initialDate,delay:this.minDelay});var t=this.fgOperationScheduler.valueChanges.pipe(p.throttleTime(100));this.subscription=t.subscribe((function(t){e.delayErrors=e.fgOperationScheduler.controls.delay.errors,e.pickerErrors=e.fgOperationScheduler.controls.picker.errors,e.convertDelayHandler(t.unit),e.emitData(t)}))},e.prototype.ngOnDestroy=function(){this.subscription&&!this.subscription.closed&&this.subscription.unsubscribe()},e.prototype.writeValue=function(e){e&&this.fgOperationScheduler.patchValue({picker:e.scheduledDate,time:e.scheduledDate,delay:e.delayInSeconds>1?e.delayInSeconds:1e3*e.delayInSeconds,unit:e.delayInSeconds>1?"seconds":"milliseconds"})},e.prototype.registerOnChange=function(e){this.onChange=e},e.prototype.registerOnTouched=function(e){this.onTouched=e},e.prototype.setDisabledState=function(e){e?this.fgOperationScheduler.disable():this.fgOperationScheduler.enable()},e.prototype.validate=function(){if(this.fgOperationScheduler.invalid)return D({},this.fgOperationScheduler.controls.picker.errors,this.fgOperationScheduler.controls.time.errors,this.fgOperationScheduler.controls.delay.errors)},e.prototype.registerOnValidatorChange=function(e){this.onValidatorChanged=e},e.prototype.markAsTouched=function(){this.onTouched&&this.onTouched()},e.prototype.convertDelayHandler=function(e){this.currentUnit!==e&&(this.currentUnit=e,this.convertDelay(this.currentUnit),this.fgOperationScheduler.controls.delay.setValidators([u.Validators.required]),this.fgOperationScheduler.controls.delay.updateValueAndValidity())},e.prototype.emitData=function(e){this.onValidatorChanged&&this.onValidatorChanged(),e.picker&&e.time&&(e.picker=this.combineDateAndTime(e.picker,e.time)),this.convertDelay(this.currentUnit),e.delayInSeconds=this.delayInSeconds,this.onChange&&this.onChange({delayInSeconds:e.delayInSeconds,scheduledDate:e.picker})},e.prototype.convertDelay=function(e){e&&this.fgOperationScheduler.controls.delay.value&&(this.delayMilliseconds=this.fgOperationScheduler.controls.delay.value,"milliseconds"===e?(this.minDelay=this.delayMilliseconds>this.DELAY_MILLISECONDS_DEFAULT?this.delayMilliseconds:this.DELAY_MILLISECONDS_DEFAULT,this.delayInSeconds=this.fgOperationScheduler.controls.delay.value/1e3):(this.delaySeconds=this.fgOperationScheduler.controls.delay.value,this.minDelay=this.delaySeconds>this.DELAY_SECONDS_DEFAULT?this.delaySeconds:this.DELAY_SECONDS_DEFAULT,this.delayInSeconds=this.fgOperationScheduler.controls.delay.value))},e.prototype.combineDateAndTime=function(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate(),t.getHours(),t.getMinutes())},e.prototype.dateValidation=function(e){if(e.value){var t=e.value;return e.parent.get("time").setValue(t),t>=new Date?null:{dateValidation:!0}}return{dateValidation:!0}},e.prototype.timeValidation=function(e){if(e.value){var t=e.value>=new Date?null:{dateValidation:!0},n=e.parent.get("picker");if(t)return n.setErrors(t),n.markAsTouched(),t;if(n&&n.errors&&n.errors.dateValidation){if(delete n.errors.dateValidation,r.isEmpty(n.errors))return n.setErrors(null),t;n.setErrors(n.errors)}return t}return{dateValidation:!0}},e.ctorParameters=function(){return[{type:u.FormBuilder}]},T([n.Input("minutesAhead")],e.prototype,"_minutesAhead",null),T([n.Input("delayConfig")],e.prototype,"_delayConfig",null),e=t=T([n.Component({selector:"c8y-operation-scheduler",template:'<div [formGroup]="fgOperationScheduler">\n  <div class="form-group m-0">\n    <label translate>Start date</label>\n    <div class="datetime-picker">\n      <c8y-form-group class="datepicker">\n        <input\n          formControlName="picker"\n          class="form-control"\n          placeholder="{{ placeholder | translate }}"\n          [bsConfig]="{ customTodayClass: \'today\' }"\n          [minDate]="minDate"\n          bsDatepicker\n          required\n          (blur)="markAsTouched()"\n        />\n        <c8y-messages *ngIf="pickerErrors">\n          <c8y-message *ngIf="pickerErrors.required" translate>\n            This field is required.\n          </c8y-message>\n          <c8y-message *ngIf="pickerErrors.dateValidation && !pickerErrors.required" translate>\n            Select time in the future.\n          </c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n      <timepicker\n        class="form-group"\n        [showSpinners]="false"\n        [showMeridian]="false"\n        formControlName="time"\n        (blur)="markAsTouched()"\n      ></timepicker>\n    </div>\n  </div>\n  <div class="form-group m-0">\n    <c8y-form-group [hasError]="delayErrors">\n      <label translate>Delay</label>\n      <div class="input-group">\n        <input\n          formControlName="delay"\n          type="number"\n          class="form-control"\n          placeholder="{{ \'e.g.\' | translate }} 15"\n          required\n          (blur)="markAsTouched()"\n        />\n        <div class="input-group-btn">\n          <div class="c8y-select-wrapper">\n            <select formControlName="unit" class="form-control" (blur)="markAsTouched()">\n              <option value="seconds" translate>Seconds</option>\n              <option value="milliseconds" translate>Milliseconds</option>\n            </select>\n            <span></span>\n          </div>\n        </div>\n      </div>\n      <c8y-messages *ngIf="delayErrors">\n        <c8y-message *ngIf="delayErrors.required" translate>\n          This field is required.\n        </c8y-message>\n        <c8y-message\n          *ngIf="delayErrors.min && !delayErrors.required"\n          translate\n          ngNonBindable\n          [translateParams]="{ delay: minDelay }"\n        >\n          Minimum value is {{ delay }}.\n        </c8y-message>\n      </c8y-messages>\n    </c8y-form-group>\n  </div>\n</div>\n',providers:[{provide:u.NG_VALUE_ACCESSOR,multi:!0,useExisting:n.forwardRef((function(){return t}))},{provide:u.NG_VALIDATORS,multi:!0,useExisting:n.forwardRef((function(){return t}))}]})],e)}(),me=function(){function e(e){this.inventoryService=e,this.deviceCount=0,this.displayDeviceCount=!1}return Object.defineProperty(e.prototype,"deviceQueryString",{set:function(e){var t=this;this.displayDeviceCount=!0;var n={q:e||"",pageSize:1,currentPage:1,withTotalPages:!0};this.inventoryService.list(n).then((function(e){return t.deviceCount=e.paging.totalPages}))},enumerable:!0,configurable:!0}),e.ctorParameters=function(){return[{type:i.InventoryService}]},T([n.Input()],e.prototype,"name",void 0),T([n.Input()],e.prototype,"description",void 0),T([n.Input()],e.prototype,"deviceQueryString",null),e=T([n.Component({selector:"c8y-operation-summary",template:'<div class="row">\n  <div class="col-md-12 text-center">\n    <p>{{ name | translate }}</p>\n    <div class="row">\n      <div class="col-md-4 col-md-offset-4 text-center">\n        <h4 class="m-t-16 m-b-8 text-truncate" title="{{ description | translate }}">{{ description | translate }}</h4>\n      </div>\n    </div>\n    <span\n      class="text-muted"\n      [ngPlural]="deviceCount"\n      *ngIf="displayDeviceCount && deviceCount !== undefined && deviceCount !== null"\n    >\n      <ng-template ngPluralCase="=0">\n        <span translate>No devices selected</span>\n      </ng-template>\n      <ng-template ngPluralCase="=1">\n        <span translate>1 device selected</span>\n      </ng-template>\n      <ng-template ngPluralCase="other">\n        <span translate ngNonBindable [translateParams]="{ deviceCount: deviceCount }">\n          {{ deviceCount }} devices selected</span\n        >\n      </ng-template>\n    </span>\n  </div>\n</div>\n'})],e)}(),be=[{path:"devicecontrol",redirectTo:"devicecontrol/single",pathMatch:"full"},{path:"devicecontrol/bulk",component:Y},{path:"devicecontrol/bulk/creation/:type",component:$},{path:"devicecontrol/single/create-bulk/:operationId",component:Z}],Oe=R,Se=function(){function e(){}return e=T([n.NgModule({declarations:[de,fe,V,ce,W,Y,H,P,X,$,Z,M,Q,ve,ye,le,ae,re,se,K,ge,me,ne,te,j,ie,oe,ee,J],imports:[o.CoreModule,o.FormsModule,u.ReactiveFormsModule,c.RouterModule.forRoot(be,{useHash:!0}),O.TooltipModule.forRoot(),m.PopoverModule.forRoot(),v.CollapseModule.forRoot(),g.BsDropdownModule.forRoot(),h.BsDatepickerModule.forRoot(),b.TimepickerModule.forRoot(),f.RepositoryModule,y.DeviceProfileModule,d.DeviceGridModule],exports:[Y,P,X,Q,ge],providers:[L,U,{provide:o.HOOK_TABS,useClass:he,multi:!0},{provide:B,useValue:Oe}],entryComponents:[de,V,W,Y,P,$,j,M]})],e)}();e.BulkOperationDetailsComponent=V,e.BulkOperationDetailsService=U,e.BulkOperationListItemComponent=W,e.BulkOperationTypeListComponent=H,e.BulkOperationsListComponent=Y,e.BulkOperationsModalComponent=P,e.BulkOperationsRescheduleModalComponent=j,e.BulkOperationsService=L,e.BulkOperationsStepperContainerComponent=$,e.C8Y_BULK_TYPES=R,e.C8Y_BULK_TYPE_FRAGMENTS=N,e.HOOK_LIST_BULK_TYPE=B,e.OperationSchedulerComponent=ge,e.OperationsModule=Se,e.baseUrl=_,e.routes=be,e.ɵ0=A,e.ɵc=Z,e.ɵd=z,e.ɵe=X,e.ɵf=Q,e.ɵg=K,e.ɵh=de,e.ɵi=fe,e.ɵj=ye,e.ɵk=ce,e.ɵl=M,e.ɵm=ve,e.ɵn=le,e.ɵo=oe,e.ɵp=ae,e.ɵq=re,e.ɵr=se,e.ɵs=me,e.ɵt=ne,e.ɵu=te,e.ɵv=ie,e.ɵw=ee,e.ɵx=J,e.ɵy=he,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=c8y-ngx-components-operations.umd.min.js.map