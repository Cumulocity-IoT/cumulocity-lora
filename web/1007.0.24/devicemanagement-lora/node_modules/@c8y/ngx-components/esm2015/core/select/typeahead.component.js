var TypeaheadComponent_1;
import * as tslib_1 from "tslib";
import { ContentChildren, Input, Output, EventEmitter, Component, ViewChild, forwardRef } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { fromEvent } from 'rxjs';
import { debounceTime, map, distinctUntilChanged, filter } from 'rxjs/operators';
import { ListItemComponent } from '../list-group/list-item.component';
import { findIndex, get, set } from 'lodash-es';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
let TypeaheadComponent = TypeaheadComponent_1 = class TypeaheadComponent {
    constructor() {
        this.required = false;
        this.disabled = false;
        this.allowFreeEntries = true;
        this.displayProperty = 'name';
        this.name = this.displayProperty;
        this.selected = {
            id: null
        };
        this.selectedChange = new EventEmitter();
        this.onSearch = new EventEmitter();
        this.KEYCODE_UP = 38;
        this.KEYCODE_DOWN = 40;
        this.KEYCODE_TAB = 9;
        this.KEYCODE_ENTER = 13;
        this.KEYCODE_ESC = 27;
    }
    writeValue(value) {
        this.selected = value;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    doBlur() {
        if (this.onTouched) {
            this.onTouched();
        }
    }
    getDisplayProperty() {
        return get(this.selected, this.displayProperty, '');
    }
    onShown() {
        this.searchControl.nativeElement.focus();
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    ngAfterViewInit() {
        this.subscription = fromEvent(this.searchControl.nativeElement, 'keydown')
            .pipe(map((e) => this.handleKeyboard(e)), filter((e) => e), debounceTime(200), map((e) => e.target.value), distinctUntilChanged())
            .subscribe(value => {
            this.selected = {
                id: null
            };
            set(this.selected, this.displayProperty, value || '');
            this.onChange(this.selected);
            this.selectedChange.emit(this.selected);
            this.onSearch.emit(value);
        });
    }
    handleKeyboard(event) {
        const keyCode = event.keyCode;
        if ([this.KEYCODE_ENTER, this.KEYCODE_DOWN, this.KEYCODE_TAB, this.KEYCODE_UP].includes(keyCode)) {
            const items = this.list.toArray();
            const index = findIndex(items, item => item.active);
            if (keyCode === this.KEYCODE_ENTER || keyCode === this.KEYCODE_TAB) {
                if (index > -1) {
                    event.preventDefault();
                    items[index].element.nativeElement.click();
                }
                this.dropdown.hide();
                this.searchControl.nativeElement.blur();
            }
            else {
                this.dropdown.show();
                const upOrDown = keyCode === this.KEYCODE_DOWN ? 1 : -1;
                if (index > -1) {
                    items[index].active = false;
                }
                if (items[index + upOrDown]) {
                    items[index + upOrDown].active = true;
                }
            }
            return;
        }
        else if (keyCode === this.KEYCODE_ESC) {
            event.stopPropagation();
            this.dropdown.hide();
            this.searchControl.nativeElement.blur();
            return;
        }
        else {
            this.dropdown.show();
        }
        return event;
    }
    validate(ctrl) {
        if (this.required && !this.getDisplayProperty()) {
            return { required: true };
        }
        if (!this.allowFreeEntries && this.selected && this.selected.id === null) {
            return { notExisting: true };
        }
        return null;
    }
};
tslib_1.__decorate([
    ViewChild('searchControl', { static: false })
], TypeaheadComponent.prototype, "searchControl", void 0);
tslib_1.__decorate([
    ViewChild('dropdown', { static: false })
], TypeaheadComponent.prototype, "dropdown", void 0);
tslib_1.__decorate([
    ContentChildren(ListItemComponent)
], TypeaheadComponent.prototype, "list", void 0);
tslib_1.__decorate([
    Input()
], TypeaheadComponent.prototype, "required", void 0);
tslib_1.__decorate([
    Input()
], TypeaheadComponent.prototype, "disabled", void 0);
tslib_1.__decorate([
    Input()
], TypeaheadComponent.prototype, "allowFreeEntries", void 0);
tslib_1.__decorate([
    Input()
], TypeaheadComponent.prototype, "placeholder", void 0);
tslib_1.__decorate([
    Input()
], TypeaheadComponent.prototype, "displayProperty", void 0);
tslib_1.__decorate([
    Input()
], TypeaheadComponent.prototype, "name", void 0);
tslib_1.__decorate([
    Input()
], TypeaheadComponent.prototype, "selected", void 0);
tslib_1.__decorate([
    Output()
], TypeaheadComponent.prototype, "selectedChange", void 0);
tslib_1.__decorate([
    Output()
], TypeaheadComponent.prototype, "onSearch", void 0);
TypeaheadComponent = TypeaheadComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'c8y-typeahead',
        template: "<div\n  class=\"c8y-child-assets-selector dropdown\"\n  dropdown\n  #dropdown=\"bs-dropdown\"\n  [autoClose]=\"true\"\n  (onShown)=\"onShown()\"\n  [isDisabled]=\"disabled\"\n>\n  <div class=\"input-group input-group-dropdown\" dropdownToggle>\n    <input\n      #searchControl\n      type=\"text\"\n      class=\"form-control text-truncate p-r-24\"\n      [required]=\"required\"\n      [ngModel]=\"selected ? getDisplayProperty() : ''\"\n      [placeholder]=\"placeholder | translate\"\n      (blur)=\"doBlur()\"\n      [name]=\"name\"\n      [disabled]=\"disabled\"\n      title=\"{{ placeholder | translate }}\"\n    />\n\n    <span\n      class=\"label label-info\"\n      style=\"position: absolute; right: 40px; top: 10px; z-index: 10;\"\n      translate\n      *ngIf=\"\n        selected\n          ? selected.id === null && getDisplayProperty()?.length > 0 && allowFreeEntries\n          : false\n      \"\n      >New</span\n    >\n\n    <span class=\"input-group-btn\">\n      <button type=\"button\" class=\"btn btn-clean\" [disabled]=\"disabled\">\n        <i class=\"dropdown-caret\"></i>\n      </button>\n    </span>\n  </div>\n\n  <c8y-list-group class=\"dropdown-menu\" *dropdownMenu>\n    <ng-content select=\"c8y-li, c8y-list-item, button, a\"></ng-content>\n  </c8y-list-group>\n</div>\n",
        providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                multi: true,
                useExisting: forwardRef(() => TypeaheadComponent_1)
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => TypeaheadComponent_1),
                multi: true
            }
        ]
    })
], TypeaheadComponent);
export { TypeaheadComponent };
//# sourceMappingURL=data:application/json;base64,