import { gettext } from '../i18n/gettext';
import { formatDate } from '@angular/common';
// TODO remove  when c8y-icon will works
export const deviceAvailabilityIconMap = {
    sendData: {
        AVAILABLE: {
            icon: 'long-arrow-right',
            class: 'statusOk'
        },
        UNAVAILABLE: {
            icon: 'long-arrow-right',
            class: 'statusNok'
        },
        UNKNOWN: {
            icon: 'long-arrow-right',
            class: 'statusUnknown'
        },
        NOT_MONITORED: {
            icon: 'long-arrow-right',
            class: 'statusUnknown'
        }
    },
    push: {
        CONNECTED: {
            icon: 'long-arrow-left',
            class: 'statusOk'
        },
        DISCONNECTED: {
            icon: 'long-arrow-left',
            class: 'statusUnknown'
        },
        UNKNOWN: {
            icon: 'long-arrow-left',
            class: 'statusUnknown'
        },
        MAINTENANCE: {
            icon: 'wrench',
            class: 'statusAlert'
        }
    },
    device: {
        MAINTENANCE: {
            icon: 'wrench',
            class: 'statusAlert'
        }
    }
};
const ɵ0 = (lastMessage, translateService) => {
    const date = formatDate(new Date(lastMessage), 'medium', translateService.currentLang);
    return translateService.instant(gettext('Device last request:\n{{date}}'), { date });
};
export const tooltips = {
    sendStatusConnected: ɵ0,
    sendStatusDisconnected: gettext('Connection not monitored'),
    pushStatusConnected: gettext('Connection to device established'),
    pushStatusDisconnected: gettext('Connection to device not established (not supported by device or no connectivity)'),
    maintenance: gettext('Device is under maintenance')
};
export var PushStatusLabels;
(function (PushStatusLabels) {
    PushStatusLabels[PushStatusLabels["CONNECTED"] = gettext('Push connection: active')] = "CONNECTED";
    PushStatusLabels[PushStatusLabels["DISCONNECTED"] = gettext('Push connection: inactive')] = "DISCONNECTED";
    PushStatusLabels[PushStatusLabels["UNKNOWN"] = gettext('Push connection: inactive')] = "UNKNOWN";
})(PushStatusLabels || (PushStatusLabels = {}));
export var SendStatusLabels;
(function (SendStatusLabels) {
    SendStatusLabels[SendStatusLabels["AVAILABLE"] = gettext('Send connection: online')] = "AVAILABLE";
    SendStatusLabels[SendStatusLabels["NOT_MONITORED"] = gettext('Send connection: not monitored')] = "NOT_MONITORED";
    SendStatusLabels[SendStatusLabels["UNAVAILABLE"] = gettext('Send connection: offline')] = "UNAVAILABLE";
    SendStatusLabels[SendStatusLabels["UNKNOWN"] = gettext('Send connection status unknown')] = "UNKNOWN";
    SendStatusLabels[SendStatusLabels["MAINTENANCE"] = gettext('Device is under maintenance')] = "MAINTENANCE";
})(SendStatusLabels || (SendStatusLabels = {}));
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWF2YWlsYWJpbGl0eS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2RldmljZS1zdGF0dXMvZGV2aWNlLWF2YWlsYWJpbGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLHdDQUF3QztBQUV4QyxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRztJQUN2QyxRQUFRLEVBQUU7UUFDUixTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsa0JBQWtCO1lBQ3hCLEtBQUssRUFBRSxVQUFVO1NBQ2xCO1FBQ0QsV0FBVyxFQUFFO1lBQ1gsSUFBSSxFQUFFLGtCQUFrQjtZQUN4QixLQUFLLEVBQUUsV0FBVztTQUNuQjtRQUNELE9BQU8sRUFBRTtZQUNQLElBQUksRUFBRSxrQkFBa0I7WUFDeEIsS0FBSyxFQUFFLGVBQWU7U0FDdkI7UUFDRCxhQUFhLEVBQUU7WUFDYixJQUFJLEVBQUUsa0JBQWtCO1lBQ3hCLEtBQUssRUFBRSxlQUFlO1NBQ3ZCO0tBQ0Y7SUFDRCxJQUFJLEVBQUU7UUFDSixTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsaUJBQWlCO1lBQ3ZCLEtBQUssRUFBRSxVQUFVO1NBQ2xCO1FBQ0QsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLGlCQUFpQjtZQUN2QixLQUFLLEVBQUUsZUFBZTtTQUN2QjtRQUNELE9BQU8sRUFBRTtZQUNQLElBQUksRUFBRSxpQkFBaUI7WUFDdkIsS0FBSyxFQUFFLGVBQWU7U0FDdkI7UUFDRCxXQUFXLEVBQUU7WUFDWCxJQUFJLEVBQUUsUUFBUTtZQUNkLEtBQUssRUFBRSxhQUFhO1NBQ3JCO0tBQ0Y7SUFDRCxNQUFNLEVBQUU7UUFDTixXQUFXLEVBQUU7WUFDWCxJQUFJLEVBQUUsUUFBUTtZQUNkLEtBQUssRUFBRSxhQUFhO1NBQ3JCO0tBQ0Y7Q0FDRixDQUFDO1dBRzRCLENBQUMsV0FBVyxFQUFFLGdCQUFnQixFQUFFLEVBQUU7SUFDckQsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN2RixPQUFPLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsZ0NBQWdDLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDdkYsQ0FBQztBQUpWLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRztJQUNmLG1CQUFtQixJQUdsQjtJQUNELHNCQUFzQixFQUFFLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztJQUMzRCxtQkFBbUIsRUFBRSxPQUFPLENBQUMsa0NBQWtDLENBQUM7SUFDaEUsc0JBQXNCLEVBQUUsT0FBTyxDQUM3QixtRkFBbUYsQ0FDcEY7SUFDRCxXQUFXLEVBQUUsT0FBTyxDQUFDLDZCQUE2QixDQUFDO0NBQ3BELENBQUM7QUFFVCxNQUFNLENBQU4sSUFBWSxnQkFJWDtBQUpELFdBQVksZ0JBQWdCO0lBQzFCLGlEQUFZLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxlQUFBLENBQUE7SUFDOUMsb0RBQWUsT0FBTyxDQUFDLDJCQUEyQixDQUFDLGtCQUFBLENBQUE7SUFDbkQsK0NBQVUsT0FBTyxDQUFDLDJCQUEyQixDQUFDLGFBQUEsQ0FBQTtBQUNoRCxDQUFDLEVBSlcsZ0JBQWdCLEtBQWhCLGdCQUFnQixRQUkzQjtBQUVELE1BQU0sQ0FBTixJQUFZLGdCQU1YO0FBTkQsV0FBWSxnQkFBZ0I7SUFDMUIsaURBQVksT0FBTyxDQUFDLHlCQUF5QixDQUFDLGVBQUEsQ0FBQTtJQUM5QyxxREFBZ0IsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLG1CQUFBLENBQUE7SUFDekQsbURBQWMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLGlCQUFBLENBQUE7SUFDakQsK0NBQVUsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLGFBQUEsQ0FBQTtJQUNuRCxtREFBYyxPQUFPLENBQUMsNkJBQTZCLENBQUMsaUJBQUEsQ0FBQTtBQUN0RCxDQUFDLEVBTlcsZ0JBQWdCLEtBQWhCLGdCQUFnQixRQU0zQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuaW1wb3J0IHsgZm9ybWF0RGF0ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG4vLyBUT0RPIHJlbW92ZSAgd2hlbiBjOHktaWNvbiB3aWxsIHdvcmtzXG5cbmV4cG9ydCBjb25zdCBkZXZpY2VBdmFpbGFiaWxpdHlJY29uTWFwID0ge1xuICBzZW5kRGF0YToge1xuICAgIEFWQUlMQUJMRToge1xuICAgICAgaWNvbjogJ2xvbmctYXJyb3ctcmlnaHQnLFxuICAgICAgY2xhc3M6ICdzdGF0dXNPaydcbiAgICB9LFxuICAgIFVOQVZBSUxBQkxFOiB7XG4gICAgICBpY29uOiAnbG9uZy1hcnJvdy1yaWdodCcsXG4gICAgICBjbGFzczogJ3N0YXR1c05vaydcbiAgICB9LFxuICAgIFVOS05PV046IHtcbiAgICAgIGljb246ICdsb25nLWFycm93LXJpZ2h0JyxcbiAgICAgIGNsYXNzOiAnc3RhdHVzVW5rbm93bidcbiAgICB9LFxuICAgIE5PVF9NT05JVE9SRUQ6IHtcbiAgICAgIGljb246ICdsb25nLWFycm93LXJpZ2h0JyxcbiAgICAgIGNsYXNzOiAnc3RhdHVzVW5rbm93bidcbiAgICB9XG4gIH0sXG4gIHB1c2g6IHtcbiAgICBDT05ORUNURUQ6IHtcbiAgICAgIGljb246ICdsb25nLWFycm93LWxlZnQnLFxuICAgICAgY2xhc3M6ICdzdGF0dXNPaydcbiAgICB9LFxuICAgIERJU0NPTk5FQ1RFRDoge1xuICAgICAgaWNvbjogJ2xvbmctYXJyb3ctbGVmdCcsXG4gICAgICBjbGFzczogJ3N0YXR1c1Vua25vd24nXG4gICAgfSxcbiAgICBVTktOT1dOOiB7XG4gICAgICBpY29uOiAnbG9uZy1hcnJvdy1sZWZ0JyxcbiAgICAgIGNsYXNzOiAnc3RhdHVzVW5rbm93bidcbiAgICB9LFxuICAgIE1BSU5URU5BTkNFOiB7XG4gICAgICBpY29uOiAnd3JlbmNoJyxcbiAgICAgIGNsYXNzOiAnc3RhdHVzQWxlcnQnXG4gICAgfVxuICB9LFxuICBkZXZpY2U6IHtcbiAgICBNQUlOVEVOQU5DRToge1xuICAgICAgaWNvbjogJ3dyZW5jaCcsXG4gICAgICBjbGFzczogJ3N0YXR1c0FsZXJ0J1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHRvb2x0aXBzID0ge1xuICAgICAgICAgc2VuZFN0YXR1c0Nvbm5lY3RlZDogKGxhc3RNZXNzYWdlLCB0cmFuc2xhdGVTZXJ2aWNlKSA9PiB7XG4gICAgICAgICAgIGNvbnN0IGRhdGUgPSBmb3JtYXREYXRlKG5ldyBEYXRlKGxhc3RNZXNzYWdlKSwgJ21lZGl1bScsIHRyYW5zbGF0ZVNlcnZpY2UuY3VycmVudExhbmcpO1xuICAgICAgICAgICByZXR1cm4gdHJhbnNsYXRlU2VydmljZS5pbnN0YW50KGdldHRleHQoJ0RldmljZSBsYXN0IHJlcXVlc3Q6XFxue3tkYXRlfX0nKSwgeyBkYXRlIH0pO1xuICAgICAgICAgfSxcbiAgICAgICAgIHNlbmRTdGF0dXNEaXNjb25uZWN0ZWQ6IGdldHRleHQoJ0Nvbm5lY3Rpb24gbm90IG1vbml0b3JlZCcpLFxuICAgICAgICAgcHVzaFN0YXR1c0Nvbm5lY3RlZDogZ2V0dGV4dCgnQ29ubmVjdGlvbiB0byBkZXZpY2UgZXN0YWJsaXNoZWQnKSxcbiAgICAgICAgIHB1c2hTdGF0dXNEaXNjb25uZWN0ZWQ6IGdldHRleHQoXG4gICAgICAgICAgICdDb25uZWN0aW9uIHRvIGRldmljZSBub3QgZXN0YWJsaXNoZWQgKG5vdCBzdXBwb3J0ZWQgYnkgZGV2aWNlIG9yIG5vIGNvbm5lY3Rpdml0eSknXG4gICAgICAgICApLFxuICAgICAgICAgbWFpbnRlbmFuY2U6IGdldHRleHQoJ0RldmljZSBpcyB1bmRlciBtYWludGVuYW5jZScpXG4gICAgICAgfTtcblxuZXhwb3J0IGVudW0gUHVzaFN0YXR1c0xhYmVscyB7XG4gIENPTk5FQ1RFRCA9IGdldHRleHQoJ1B1c2ggY29ubmVjdGlvbjogYWN0aXZlJyksXG4gIERJU0NPTk5FQ1RFRCA9IGdldHRleHQoJ1B1c2ggY29ubmVjdGlvbjogaW5hY3RpdmUnKSxcbiAgVU5LTk9XTiA9IGdldHRleHQoJ1B1c2ggY29ubmVjdGlvbjogaW5hY3RpdmUnKVxufVxuXG5leHBvcnQgZW51bSBTZW5kU3RhdHVzTGFiZWxzIHtcbiAgQVZBSUxBQkxFID0gZ2V0dGV4dCgnU2VuZCBjb25uZWN0aW9uOiBvbmxpbmUnKSxcbiAgTk9UX01PTklUT1JFRCA9IGdldHRleHQoJ1NlbmQgY29ubmVjdGlvbjogbm90IG1vbml0b3JlZCcpLFxuICBVTkFWQUlMQUJMRSA9IGdldHRleHQoJ1NlbmQgY29ubmVjdGlvbjogb2ZmbGluZScpLFxuICBVTktOT1dOID0gZ2V0dGV4dCgnU2VuZCBjb25uZWN0aW9uIHN0YXR1cyB1bmtub3duJyksXG4gIE1BSU5URU5BTkNFID0gZ2V0dGV4dCgnRGV2aWNlIGlzIHVuZGVyIG1haW50ZW5hbmNlJylcbn1cbiJdfQ==