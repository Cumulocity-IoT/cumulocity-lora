import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ComponentFactoryResolver, ViewContainerRef, ComponentRef } from '@angular/core';
import { DynamicComponentService } from './dynamic-component.service';
import { of, isObservable } from 'rxjs';
import { isUndefined } from 'lodash-es';
/**
 * C8y dynamic component.
 * ## Example:
 *
 * register component in HOOK in module:
 * ```typescript
 *  import { HOOK_COMPONENT } from '@c8y/ngx-components';
 *
 * @NgModule({
 *  ...,
 *  providers: [{
 *      provide: HOOK_COMPONENT,
 *      multi: true,
 *      useValue: [{
 *          id: 'test-component',
 *          label: 'My test component',
 *          description: 'this is test component',
 *          component: TestComponent
 *      }],
 *  ...
 *  }]
 *
 * ```
 * Showing dynamic component:
 * ```html
 * <c8y-dynamic-component [componentId]="'test-component'" [config]="config"></c8y-dynamic-component>
 * ```
 */
let DynamicComponentComponent = class DynamicComponentComponent {
    /**
     * @ignore only DI
     */
    constructor(componentFactoryResolver, dynamicComponentService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.dynamicComponentService = dynamicComponentService;
        /**
         * DynamicComponents can have two modes, an edit (config) and an view (component) mode.
         * By default it is shown in the component mode.
         */
        this.mode = 'component';
        /**
         * Disable this to hide the error that is shown if the component was not found.
         */
        this.notFoundError = true;
        /**
         * @ignore
         */
        this.expandErrorDetails = false;
    }
    /**
     * Calls the dynamic component life cycle hook. Currently only
     * supporting onBeforeSave, a hook which is called before a config component
     * is saved.
     */
    callLifeCycleHooks() {
        return this.callOnBeforeSaveHook();
    }
    /**
     * @ignore
     */
    ngOnChanges() {
        this.dynamicComponentService
            .getById$(this.componentId)
            .subscribe(cmp => this.loadComponent(cmp));
    }
    loadComponent(dynamicComponent) {
        try {
            this.error = undefined;
            const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.mode === 'component' ? dynamicComponent.component : dynamicComponent.configComponent);
            this.host.clear();
            this.componentRef = this.host.createComponent(componentFactory);
            this.componentRef.instance.config = this.config;
        }
        catch (ex) {
            this.error = ex;
        }
    }
    callOnBeforeSaveHook() {
        if (!this.componentRef) {
            return of(true);
        }
        const hook = this.componentRef.instance.onBeforeSave;
        if (hook) {
            const result = hook(this.config);
            if (isUndefined(result)) {
                return of(true);
            }
            return isObservable(result) ? result : of(result);
        }
        return of(true);
    }
};
DynamicComponentComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: DynamicComponentService }
];
tslib_1.__decorate([
    Input()
], DynamicComponentComponent.prototype, "componentId", void 0);
tslib_1.__decorate([
    Input()
], DynamicComponentComponent.prototype, "config", void 0);
tslib_1.__decorate([
    Input()
], DynamicComponentComponent.prototype, "mode", void 0);
tslib_1.__decorate([
    Input()
], DynamicComponentComponent.prototype, "notFoundError", void 0);
tslib_1.__decorate([
    ViewChild('host', { read: ViewContainerRef, static: true })
], DynamicComponentComponent.prototype, "host", void 0);
DynamicComponentComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-dynamic-component',
        template: "<ng-template #host></ng-template>\n\n<div class=\"alert alert-warning m-8\" role=\"alert\" *ngIf=\"notFoundError && error\">\n  <strong class=\"message\">\n    {{\n      'This widget cannot be rendered because the current application does not support the following component:'\n        | translate\n    }}\n    {{ componentId }}.\n  </strong>\n  <p class=\"text-muted top-m-sm\">\n    <button class=\"btn btn-clean\" (click)=\"expandErrorDetails = !expandErrorDetails\">\n      <i class=\"fa fa-chevron-down\"></i>\n      <span *ngIf=\"!expandErrorDetails\" translate>Show details</span>\n      <span *ngIf=\"expandErrorDetails\" translate>Hide details</span>\n    </button>\n  </p>\n  <div [collapse]=\"!expandErrorDetails\" [isAnimated]=\"true\">\n    <pre>\n      {{ error }}\n    </pre>\n  </div>\n</div>\n"
    })
], DynamicComponentComponent);
export { DynamicComponentComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jb21wb25lbnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZHluYW1pYy1jb21wb25lbnQvZHluYW1pYy1jb21wb25lbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxTQUFTLEVBQ1Qsd0JBQXdCLEVBQ3hCLGdCQUFnQixFQUNoQixZQUFZLEVBQ2IsTUFBTSxlQUFlLENBQUM7QUFNdkIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEUsT0FBTyxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDcEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUV4Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMkJHO0FBS0gsSUFBYSx5QkFBeUIsR0FBdEMsTUFBYSx5QkFBeUI7SUFpQ3BDOztPQUVHO0lBQ0gsWUFDVSx3QkFBa0QsRUFDbEQsdUJBQWdEO1FBRGhELDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFDbEQsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtRQTVCMUQ7OztXQUdHO1FBQ00sU0FBSSxHQUEyQixXQUFXLENBQUM7UUFDcEQ7O1dBRUc7UUFDTSxrQkFBYSxHQUFHLElBQUksQ0FBQztRQVM5Qjs7V0FFRztRQUNILHVCQUFrQixHQUFHLEtBQUssQ0FBQztJQVN4QixDQUFDO0lBRUo7Ozs7T0FJRztJQUNILGtCQUFrQjtRQUNoQixPQUFPLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFRDs7T0FFRztJQUNILFdBQVc7UUFDVCxJQUFJLENBQUMsdUJBQXVCO2FBQ3pCLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO2FBQzFCLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRU8sYUFBYSxDQUFDLGdCQUE0QztRQUNoRSxJQUFJO1lBQ0YsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7WUFDdkIsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsdUJBQXVCLENBQzVFLElBQUksQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FDMUYsQ0FBQztZQUNGLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQy9ELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBNkIsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUN2RTtRQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ1gsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7U0FDakI7SUFDSCxDQUFDO0lBRU8sb0JBQW9CO1FBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3RCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2pCO1FBQ0QsTUFBTSxJQUFJLEdBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUF5QixDQUFDLFlBQVksQ0FBQztRQUN2RSxJQUFJLElBQUksRUFBRTtZQUNSLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDakMsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ3ZCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2pCO1lBQ0QsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBeUIsQ0FBQztTQUM1RTtRQUNELE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xCLENBQUM7Q0FDRixDQUFBOztZQWxEcUMsd0JBQXdCO1lBQ3pCLHVCQUF1Qjs7QUFqQ2pEO0lBQVIsS0FBSyxFQUFFOzhEQUFxQjtBQUlwQjtJQUFSLEtBQUssRUFBRTt5REFBYTtBQUtaO0lBQVIsS0FBSyxFQUFFO3VEQUE0QztBQUkzQztJQUFSLEtBQUssRUFBRTtnRUFBc0I7QUFJK0I7SUFBNUQsU0FBUyxDQUFDLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7dURBQXdCO0FBdEJ6RSx5QkFBeUI7SUFKckMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLHVCQUF1QjtRQUNqQyxzekJBQWlEO0tBQ2xELENBQUM7R0FDVyx5QkFBeUIsQ0F1RnJDO1NBdkZZLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIFZpZXdDaGlsZCxcbiAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICBWaWV3Q29udGFpbmVyUmVmLFxuICBDb21wb25lbnRSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBEeW5hbWljQ29tcG9uZW50LFxuICBEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbixcbiAgT25CZWZvcmVTYXZlXG59IGZyb20gJy4vZHluYW1pYy1jb21wb25lbnQubW9kZWwnO1xuaW1wb3J0IHsgRHluYW1pY0NvbXBvbmVudFNlcnZpY2UgfSBmcm9tICcuL2R5bmFtaWMtY29tcG9uZW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgb2YsIGlzT2JzZXJ2YWJsZSwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgaXNVbmRlZmluZWQgfSBmcm9tICdsb2Rhc2gtZXMnO1xuXG4vKipcbiAqIEM4eSBkeW5hbWljIGNvbXBvbmVudC5cbiAqICMjIEV4YW1wbGU6XG4gKlxuICogcmVnaXN0ZXIgY29tcG9uZW50IGluIEhPT0sgaW4gbW9kdWxlOlxuICogYGBgdHlwZXNjcmlwdFxuICogIGltcG9ydCB7IEhPT0tfQ09NUE9ORU5UIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG4gKlxuICogQE5nTW9kdWxlKHtcbiAqICAuLi4sXG4gKiAgcHJvdmlkZXJzOiBbe1xuICogICAgICBwcm92aWRlOiBIT09LX0NPTVBPTkVOVCxcbiAqICAgICAgbXVsdGk6IHRydWUsXG4gKiAgICAgIHVzZVZhbHVlOiBbe1xuICogICAgICAgICAgaWQ6ICd0ZXN0LWNvbXBvbmVudCcsXG4gKiAgICAgICAgICBsYWJlbDogJ015IHRlc3QgY29tcG9uZW50JyxcbiAqICAgICAgICAgIGRlc2NyaXB0aW9uOiAndGhpcyBpcyB0ZXN0IGNvbXBvbmVudCcsXG4gKiAgICAgICAgICBjb21wb25lbnQ6IFRlc3RDb21wb25lbnRcbiAqICAgICAgfV0sXG4gKiAgLi4uXG4gKiAgfV1cbiAqXG4gKiBgYGBcbiAqIFNob3dpbmcgZHluYW1pYyBjb21wb25lbnQ6XG4gKiBgYGBodG1sXG4gKiA8Yzh5LWR5bmFtaWMtY29tcG9uZW50IFtjb21wb25lbnRJZF09XCIndGVzdC1jb21wb25lbnQnXCIgW2NvbmZpZ109XCJjb25maWdcIj48L2M4eS1keW5hbWljLWNvbXBvbmVudD5cbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktZHluYW1pYy1jb21wb25lbnQnLFxuICB0ZW1wbGF0ZVVybDogJy4vZHluYW1pYy1jb21wb25lbnQuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNDb21wb25lbnRDb21wb25lbnQge1xuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSByZWdpc3RlcmVkIGNvbXBvbmVudC4gSXQgbmVlZHMgdG8gYmUgYSBjb21wb25lbnQgdGhhdCBpcyBob29rZWRcbiAgICogd2l0aCB0aGUgSE9PS19DT01QT05FTlRTIGV4dGVuc2lvbiBob29rLlxuICAgKi9cbiAgQElucHV0KCkgY29tcG9uZW50SWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjb25maWd1cmF0aW9uIHRvIHBhc3MuXG4gICAqL1xuICBASW5wdXQoKSBjb25maWc6IGFueTtcbiAgLyoqXG4gICAqIER5bmFtaWNDb21wb25lbnRzIGNhbiBoYXZlIHR3byBtb2RlcywgYW4gZWRpdCAoY29uZmlnKSBhbmQgYW4gdmlldyAoY29tcG9uZW50KSBtb2RlLlxuICAgKiBCeSBkZWZhdWx0IGl0IGlzIHNob3duIGluIHRoZSBjb21wb25lbnQgbW9kZS5cbiAgICovXG4gIEBJbnB1dCgpIG1vZGU6ICdjb25maWcnIHwgJ2NvbXBvbmVudCcgPSAnY29tcG9uZW50JztcbiAgLyoqXG4gICAqIERpc2FibGUgdGhpcyB0byBoaWRlIHRoZSBlcnJvciB0aGF0IGlzIHNob3duIGlmIHRoZSBjb21wb25lbnQgd2FzIG5vdCBmb3VuZC5cbiAgICovXG4gIEBJbnB1dCgpIG5vdEZvdW5kRXJyb3IgPSB0cnVlO1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgQFZpZXdDaGlsZCgnaG9zdCcsIHsgcmVhZDogVmlld0NvbnRhaW5lclJlZiwgc3RhdGljOiB0cnVlIH0pIGhvc3Q6IFZpZXdDb250YWluZXJSZWY7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBlcnJvcjogYW55O1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZXhwYW5kRXJyb3JEZXRhaWxzID0gZmFsc2U7XG4gIHByaXZhdGUgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8Q29tcG9uZW50PjtcblxuICAvKipcbiAgICogQGlnbm9yZSBvbmx5IERJXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgIHByaXZhdGUgZHluYW1pY0NvbXBvbmVudFNlcnZpY2U6IER5bmFtaWNDb21wb25lbnRTZXJ2aWNlXG4gICkge31cblxuICAvKipcbiAgICogQ2FsbHMgdGhlIGR5bmFtaWMgY29tcG9uZW50IGxpZmUgY3ljbGUgaG9vay4gQ3VycmVudGx5IG9ubHlcbiAgICogc3VwcG9ydGluZyBvbkJlZm9yZVNhdmUsIGEgaG9vayB3aGljaCBpcyBjYWxsZWQgYmVmb3JlIGEgY29uZmlnIGNvbXBvbmVudFxuICAgKiBpcyBzYXZlZC5cbiAgICovXG4gIGNhbGxMaWZlQ3ljbGVIb29rcygpIHtcbiAgICByZXR1cm4gdGhpcy5jYWxsT25CZWZvcmVTYXZlSG9vaygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xuICAgIHRoaXMuZHluYW1pY0NvbXBvbmVudFNlcnZpY2VcbiAgICAgIC5nZXRCeUlkJCh0aGlzLmNvbXBvbmVudElkKVxuICAgICAgLnN1YnNjcmliZShjbXAgPT4gdGhpcy5sb2FkQ29tcG9uZW50KGNtcCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBsb2FkQ29tcG9uZW50KGR5bmFtaWNDb21wb25lbnQ6IER5bmFtaWNDb21wb25lbnREZWZpbml0aW9uKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICBjb25zdCBjb21wb25lbnRGYWN0b3J5ID0gdGhpcy5jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoXG4gICAgICAgIHRoaXMubW9kZSA9PT0gJ2NvbXBvbmVudCcgPyBkeW5hbWljQ29tcG9uZW50LmNvbXBvbmVudCA6IGR5bmFtaWNDb21wb25lbnQuY29uZmlnQ29tcG9uZW50XG4gICAgICApO1xuICAgICAgdGhpcy5ob3N0LmNsZWFyKCk7XG4gICAgICB0aGlzLmNvbXBvbmVudFJlZiA9IHRoaXMuaG9zdC5jcmVhdGVDb21wb25lbnQoY29tcG9uZW50RmFjdG9yeSk7XG4gICAgICAodGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UgYXMgRHluYW1pY0NvbXBvbmVudCkuY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIHRoaXMuZXJyb3IgPSBleDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNhbGxPbkJlZm9yZVNhdmVIb29rKCkge1xuICAgIGlmICghdGhpcy5jb21wb25lbnRSZWYpIHtcbiAgICAgIHJldHVybiBvZih0cnVlKTtcbiAgICB9XG4gICAgY29uc3QgaG9vayA9ICh0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZSBhcyBPbkJlZm9yZVNhdmUpLm9uQmVmb3JlU2F2ZTtcbiAgICBpZiAoaG9vaykge1xuICAgICAgY29uc3QgcmVzdWx0ID0gaG9vayh0aGlzLmNvbmZpZyk7XG4gICAgICBpZiAoaXNVbmRlZmluZWQocmVzdWx0KSkge1xuICAgICAgICByZXR1cm4gb2YodHJ1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNPYnNlcnZhYmxlKHJlc3VsdCkgPyByZXN1bHQgOiAob2YocmVzdWx0KSBhcyBPYnNlcnZhYmxlPGJvb2xlYW4+KTtcbiAgICB9XG4gICAgcmV0dXJuIG9mKHRydWUpO1xuICB9XG59XG4iXX0=