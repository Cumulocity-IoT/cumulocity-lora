import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { IManagedObject, InventoryService, IOperation, IResultList, OperationService, OperationStatus, QueriesUtil } from '@c8y/client';
import { AlertService } from '@c8y/ngx-components';
import { sortBy, toArray, get } from 'lodash-es';
let DeviceProfileService = class DeviceProfileService {
    constructor(inventoryService, operationService, alertService) {
        this.inventoryService = inventoryService;
        this.operationService = operationService;
        this.alertService = alertService;
        this.dateFrom = new Date(0);
        this.dateTo = new Date(Date.now() + 86400000); // 1 day in the future
        this.queriesUtil = new QueriesUtil();
    }
    createDeviceProfile(deviceProfile) {
        return this.inventoryService.create(deviceProfile);
    }
    getDeviceProfilesByDeviceType(deviceType) {
        const deviceTypeFilter = {
            __or: [{ 'c8y_Filter.type': deviceType }, { __not: { __has: 'c8y_Filter.type' } }]
        };
        return this.getDeviceProfiles(deviceTypeFilter);
    }
    getDeviceProfiles(andQuery) {
        let query = {
            type: 'c8y_Profile'
        };
        const filter = {
            pageSize: 100,
            withTotalPages: true
        };
        query = this.queriesUtil.addAndFilter(query, andQuery || {});
        return this.inventoryService.listQuery(query, filter);
    }
    getProfileOperation(deviceId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const filter = {
                deviceId,
                fragmentType: 'c8y_DeviceProfile',
                dateFrom: this.dateFrom.toISOString(),
                dateTo: this.dateTo.toISOString(),
                revert: true,
                pageSize: 1
            };
            const operation = (yield this.operationService.list(filter)).data[0];
            return operation && operation.status !== OperationStatus.SUCCESSFUL ? operation : undefined;
        });
    }
    createProfileOperation(device, deviceProfile) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let operation;
            const operationCfg = {
                deviceId: device.id,
                profileId: deviceProfile.id,
                profileName: deviceProfile.name,
                c8y_DeviceProfile: deviceProfile.c8y_DeviceProfile,
                description: `Assign device profile ${deviceProfile.name} to device ${device.name}`
            };
            try {
                const { data } = yield this.operationService.create(operationCfg);
                operation = data;
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
            return operation;
        });
    }
    getFirmwareItems(device, selectedProfile) {
        const deviceFirmware = device.c8y_Firmware;
        const profileFirmware = get(selectedProfile, 'c8y_DeviceProfile.firmware');
        const deviceItems = [];
        const profileItems = [];
        if (deviceFirmware) {
            deviceItems.push(deviceFirmware);
        }
        if (profileFirmware) {
            profileItems.push(profileFirmware);
        }
        return this.createProfileComparison(deviceItems, profileItems, 'version');
    }
    getSoftwareItems(device, selectedProfile) {
        const deviceSoftware = device.c8y_SoftwareList;
        const profileSoftware = get(selectedProfile, 'c8y_DeviceProfile.software');
        return this.createProfileComparison(deviceSoftware, profileSoftware, 'version');
    }
    getConfigurationItems(device, selectedProfile) {
        const deviceConfiguration = [];
        Object.keys(device).forEach(key => {
            if (key.slice(0, 18) === 'c8y_Configuration_') {
                deviceConfiguration.push(device[key]);
            }
        });
        const profileConfiguration = get(selectedProfile, 'c8y_DeviceProfile.configuration');
        return this.createProfileComparison(deviceConfiguration, profileConfiguration, 'type');
    }
    createProfileComparison(deviceItems = [], profileItems = [], propToCompare) {
        const comparisonObj = this.createProfileComparisonFromDeviceItems(deviceItems, propToCompare);
        const extendedComparisonObj = this.extendProfileComparisonWithProfileItems(comparisonObj, profileItems, propToCompare);
        return sortBy(toArray(extendedComparisonObj), 'name');
    }
    createProfileComparisonFromDeviceItems(deviceItems, propToCompare) {
        const deviceItemsObject = {};
        deviceItems.forEach(item => {
            Object.assign(deviceItemsObject, {
                [item.name]: {
                    name: item.name,
                    profileVersion: undefined,
                    deviceVersion: item[propToCompare]
                }
            });
        });
        return deviceItemsObject;
    }
    extendProfileComparisonWithProfileItems(comparisonObj, profileItems, propToCompare) {
        profileItems.forEach(item => {
            if (comparisonObj[item.name]) {
                comparisonObj[item.name].profileVersion = item[propToCompare];
            }
            else {
                Object.assign(comparisonObj, {
                    [item.name]: {
                        name: item.name,
                        profileVersion: item[propToCompare],
                        deviceVersion: undefined
                    }
                });
            }
        });
        return comparisonObj;
    }
};
DeviceProfileService.ctorParameters = () => [
    { type: InventoryService },
    { type: OperationService },
    { type: AlertService }
];
DeviceProfileService = tslib_1.__decorate([
    Injectable()
], DeviceProfileService);
export { DeviceProfileService };
//# sourceMappingURL=data:application/json;base64,