import { BaseDeviceGridColumn } from './base.device-grid-column';
import { StatusCellRendererComponent } from './status.cell-renderer.component';
import { gettext } from '@c8y/ngx-components';
export class StatusDeviceGridColumn extends BaseDeviceGridColumn {
    constructor() {
        super();
        const availabilityStatusPath = 'c8y_Availability.status';
        const requiredAvailabilityPath = 'c8y_RequiredAvailability';
        const connectionStatusPath = 'c8y_Connection.status';
        this.name = 'status';
        this.header = gettext('Status');
        this.dataType = "icon" /* Icon */;
        this.cellRendererComponent = StatusCellRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    sendOnline: {
                        type: 'boolean'
                    },
                    sendOffline: {
                        type: 'boolean'
                    },
                    sendUnknown: {
                        type: 'boolean'
                    },
                    sendNotMonitored: {
                        type: 'boolean'
                    },
                    pushOnline: {
                        type: 'boolean'
                    },
                    pushOffline: {
                        type: 'boolean'
                    },
                    pushUnknown: {
                        type: 'boolean'
                    },
                    maintenance: {
                        type: 'boolean'
                    }
                }
            },
            form: [
                {
                    type: 'template',
                    template: `<label><span translate>${gettext('Show devices with send status')}</span>:</label>`
                },
                {
                    key: 'sendOnline',
                    title: gettext('Online')
                },
                {
                    key: 'sendOffline',
                    title: gettext('Offline')
                },
                {
                    key: 'sendUnknown',
                    title: gettext('Unknown')
                },
                {
                    key: 'sendNotMonitored',
                    title: gettext('Not monitored')
                },
                {
                    type: 'template',
                    template: `<label><span translate>${gettext('Show devices with push status')}</span>:</label>`
                },
                {
                    key: 'pushOnline',
                    title: gettext('Online')
                },
                {
                    key: 'pushOffline',
                    title: gettext('Offline')
                },
                {
                    key: 'pushUnknown',
                    title: gettext('Not monitored')
                },
                {
                    type: 'template',
                    template: `<label><span translate>${gettext('Show devices with maintenance status')}</span>:</label>`
                },
                {
                    key: 'maintenance',
                    title: gettext('Device is under maintenance')
                }
            ],
            getFilter(model) {
                const filter = {};
                const ors = [];
                const sendIns = [];
                const pushIns = [];
                if (model) {
                    if (model.sendOnline) {
                        sendIns.push('AVAILABLE');
                    }
                    if (model.maintenance) {
                        sendIns.push('MAINTENANCE');
                    }
                    if (model.sendOffline) {
                        sendIns.push('UNAVAILABLE');
                    }
                    if (model.sendUnknown) {
                        ors.push({
                            __and: [
                                { __not: { __has: availabilityStatusPath } },
                                { __has: requiredAvailabilityPath }
                            ]
                        });
                    }
                    if (model.sendNotMonitored) {
                        ors.push({
                            __and: [
                                { __not: { __has: availabilityStatusPath } },
                                { __not: { __has: requiredAvailabilityPath } }
                            ]
                        });
                    }
                    if (model.pushOnline) {
                        pushIns.push('CONNECTED');
                    }
                    if (model.pushOffline) {
                        pushIns.push('DISCONNECTED');
                    }
                    if (model.pushUnknown) {
                        ors.push({
                            __not: { __has: connectionStatusPath }
                        });
                    }
                    if (sendIns.length) {
                        ors.push({ [availabilityStatusPath]: { __in: sendIns } });
                    }
                    if (pushIns.length) {
                        ors.push({ [connectionStatusPath]: { __in: pushIns } });
                    }
                    if (ors.length) {
                        filter.__or = ors;
                    }
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: availabilityStatusPath }]
        };
    }
}
//# sourceMappingURL=data:application/json;base64,