import * as tslib_1 from "tslib";
import { Component, EventEmitter, Output } from '@angular/core';
import { Router } from '@angular/router';
import { BulkOperationsService } from '../../bulk-operations.service';
let BulkOperationTypeListComponent = class BulkOperationTypeListComponent {
    constructor(router, bulkOpsService) {
        this.router = router;
        this.bulkOpsService = bulkOpsService;
        this.onCustomType = new EventEmitter();
        this.bulkList = [];
    }
    ngOnInit() {
        this.bulkList = this.bulkOpsService.getBulkTypes();
    }
    handleClick(item) {
        if (item.path) {
            this.bulkOpsService.hideNewBulkOperationModal();
            this.router.navigateByUrl(item.path);
        }
        else if (item.component) {
            this.onCustomType.emit(item);
        }
    }
};
BulkOperationTypeListComponent.ctorParameters = () => [
    { type: Router },
    { type: BulkOperationsService }
];
tslib_1.__decorate([
    Output()
], BulkOperationTypeListComponent.prototype, "onCustomType", void 0);
BulkOperationTypeListComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-bulk-operation-type-list',
        template: "<div class=\"list-group list-group-links\">\n  <button\n    *ngFor=\"let item of bulkList\"\n    type=\"button\"\n    class=\"list-group-item flex-row\"\n    (click)=\"handleClick(item)\"\n  >\n    <div *ngIf=\"item.c8yIcon; else icon\" class=\"list-item-icon\">\n      <i [c8yIcon]=\"item.c8yIcon\"></i>\n    </div>\n    <ng-template #icon>\n      <div class=\"list-item-icon\">\n        <i c8yIcon=\"cogs\"></i>\n      </div>\n    </ng-template>\n    <div title=\"{{ item.name | translate }}\" class=\"list-item-body text-truncate\">\n      {{ item.name | translate }}\n    </div>\n  </button>\n</div>\n"
    })
], BulkOperationTypeListComponent);
export { BulkOperationTypeListComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVsay1vcGVyYXRpb24tdHlwZS1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy8iLCJzb3VyY2VzIjpbImJ1bGsvbGlzdC90eXBlLWxpc3QvYnVsay1vcGVyYXRpb24tdHlwZS1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQU90RSxJQUFhLDhCQUE4QixHQUEzQyxNQUFhLDhCQUE4QjtJQUl6QyxZQUFvQixNQUFjLEVBQVUsY0FBcUM7UUFBN0QsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFVLG1CQUFjLEdBQWQsY0FBYyxDQUF1QjtRQUh2RSxpQkFBWSxHQUFnQyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3pFLGFBQVEsR0FBb0IsRUFBRSxDQUFDO0lBRXFELENBQUM7SUFFckYsUUFBUTtRQUNOLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNyRCxDQUFDO0lBRUQsV0FBVyxDQUFDLElBQW1CO1FBQzdCLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNiLElBQUksQ0FBQyxjQUFjLENBQUMseUJBQXlCLEVBQUUsQ0FBQztZQUNoRCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdEM7YUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDekIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDOUI7SUFDSCxDQUFDO0NBQ0YsQ0FBQTs7WUFkNkIsTUFBTTtZQUEwQixxQkFBcUI7O0FBSHZFO0lBQVQsTUFBTSxFQUFFO29FQUFnRTtBQUQ5RCw4QkFBOEI7SUFKMUMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLDhCQUE4QjtRQUN4Qyx5bUJBQXdEO0tBQ3pELENBQUM7R0FDVyw4QkFBOEIsQ0FrQjFDO1NBbEJZLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEJ1bGtPcGVyYXRpb25zU2VydmljZSB9IGZyb20gJy4uLy4uL2J1bGstb3BlcmF0aW9ucy5zZXJ2aWNlJztcbmltcG9ydCB7IE9wZXJhdGlvblR5cGUgfSBmcm9tICcuL29wZXJhdGlvbi10eXBlLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWJ1bGstb3BlcmF0aW9uLXR5cGUtbGlzdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9idWxrLW9wZXJhdGlvbi10eXBlLWxpc3QuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEJ1bGtPcGVyYXRpb25UeXBlTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBPdXRwdXQoKSBvbkN1c3RvbVR5cGU6IEV2ZW50RW1pdHRlcjxPcGVyYXRpb25UeXBlPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgYnVsa0xpc3Q6IE9wZXJhdGlvblR5cGVbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsIHByaXZhdGUgYnVsa09wc1NlcnZpY2U6IEJ1bGtPcGVyYXRpb25zU2VydmljZSkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmJ1bGtMaXN0ID0gdGhpcy5idWxrT3BzU2VydmljZS5nZXRCdWxrVHlwZXMoKTtcbiAgfVxuXG4gIGhhbmRsZUNsaWNrKGl0ZW06IE9wZXJhdGlvblR5cGUpIHtcbiAgICBpZiAoaXRlbS5wYXRoKSB7XG4gICAgICB0aGlzLmJ1bGtPcHNTZXJ2aWNlLmhpZGVOZXdCdWxrT3BlcmF0aW9uTW9kYWwoKTtcbiAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlQnlVcmwoaXRlbS5wYXRoKTtcbiAgICB9IGVsc2UgaWYgKGl0ZW0uY29tcG9uZW50KSB7XG4gICAgICB0aGlzLm9uQ3VzdG9tVHlwZS5lbWl0KGl0ZW0pO1xuICAgIH1cbiAgfVxufVxuIl19