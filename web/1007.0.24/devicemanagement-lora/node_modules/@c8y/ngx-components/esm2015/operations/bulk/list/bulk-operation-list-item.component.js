import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { OperationBulkGeneralStatus } from '@c8y/client';
import { AlertService, gettext, ListItemComponent, ModalService, Status } from '@c8y/ngx-components';
import { assign, cloneDeep } from 'lodash-es';
import { BsModalRef, BsModalService, ModalOptions } from 'ngx-bootstrap/modal';
import { BulkOperationsService } from '../bulk-operations.service';
import { BulkOperationsRescheduleModalComponent } from '../modal/bulk-operations-reschedule-modal.component';
import { BULK_OPERATION_STATUS_OPTIONS } from './bulk-operation-list-item.model';
let BulkOperationListItemComponent = class BulkOperationListItemComponent {
    constructor(bulkOperationsService, modal, alert, bsModalService) {
        this.bulkOperationsService = bulkOperationsService;
        this.modal = modal;
        this.alert = alert;
        this.bsModalService = bsModalService;
        this.detailsCollapsed = true;
        this.readOnly = false;
        this.showFailedOperation = new EventEmitter();
        this.reload = new EventEmitter();
        this.refreshLoading = false;
        this.bulkOperationGeneralStatus = OperationBulkGeneralStatus;
        this.bulkOperationStatusOptions = BULK_OPERATION_STATUS_OPTIONS;
        this.finishDatePopoverText = gettext('Approximate date, estimated based on the bulk operation settings.');
        this.progressBarClass = 'progress';
        this.progressBarStatus = 0;
    }
    ngOnInit() {
        this.iconClass = this.getIconClass();
        this.finishDate = this.calculateFinishDateMs();
        this.setProgressBar();
    }
    ngOnChanges(changes) {
        if (changes.bulkOperation && !changes.bulkOperation.firstChange) {
            this.iconClass = this.getIconClass();
            this.setProgressBar();
        }
    }
    getIconClass() {
        return this.bulkOperationStatusOptions.find(statusOption => statusOption.generalStatus.includes(this.bulkOperation.generalStatus)).iconClass;
    }
    calculateFinishDateMs() {
        const startDateMs = new Date(this.bulkOperation.startDate).getTime();
        const creationRampMs = this.bulkOperation.creationRamp * 1000;
        return startDateMs + creationRampMs * this.bulkOperation.progress.all;
    }
    progressBarProgressFn() {
        return (((this.bulkOperation.progress.successful + this.bulkOperation.progress.failed) /
            this.bulkOperation.progress.all) *
            100);
    }
    setProgressBar() {
        const staticContentOfClass = 'progress-bar progress-striped active progress-bar';
        const progressBarState = {
            EXECUTING: {
                progressBarClass: 'progress progress-striped active',
                progressBarColor: `${staticContentOfClass}-primary`,
                progressBarStatus: this.progressBarProgressFn()
            },
            EXECUTING_WITH_ERROR: {
                progressBarClass: 'progress progress-striped active',
                progressBarColor: `${staticContentOfClass}-danger`,
                progressBarStatus: this.progressBarProgressFn()
            },
            FAILED: {
                progressBarClass: 'progress',
                progressBarColor: `${staticContentOfClass}-danger`,
                progressBarStatus: 100
            },
            SUCCESSFUL: {
                progressBarClass: 'progress',
                progressBarColor: `${staticContentOfClass}-success`,
                progressBarStatus: 100
            }
        };
        assign(this, progressBarState[this.bulkOperation.generalStatus]);
    }
    editSchedule() {
        const rescheduledOperation = cloneDeep(this.bulkOperation);
        const initialState = {
            bulkOperation: rescheduledOperation
        };
        const modalOptions = { initialState, class: 'modal-sm', backdrop: 'static' };
        this.bsModalRef = this.bsModalService.show(BulkOperationsRescheduleModalComponent, modalOptions);
    }
    cancelBulkOperation() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modal.confirm(gettext('Cancel bulk operation'), gettext('You are about to cancel the bulk operation. Do you want to proceed?'), Status.DANGER);
                yield this.bulkOperationsService.deleteBulkOperation(this.bulkOperation.id);
                this.reload.emit();
                this.alert.success(gettext('Operation canceled.'));
            }
            catch (er) {
                this.alert.addServerFailure(er);
            }
        });
    }
    retryFailedOperation() {
        const clonedBulk = cloneDeep(this.bulkOperation);
        // change the id to failedparentId similar to the logic in deviceBulkControl.service.js
        delete clonedBulk.groupId;
        clonedBulk.failedParentId = this.bulkOperation.id;
        // show reschdedule modal:
        const initialState = {
            bulkOperation: clonedBulk,
            isRetryOperation: true
        };
        const modalOptions = { initialState, class: 'modal-sm', backdrop: 'static' };
        this.bsModalRef = this.bsModalService.show(BulkOperationsRescheduleModalComponent, modalOptions);
        this.bsModalRef.content.closeSubject.subscribe(() => {
            this.reload.emit();
        });
    }
    setToSuccessful() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modal.confirm(gettext('Set manually bulk operation to successful'), gettext('You are about to change the bulk operation status to successful. Do you want to proceed?'), Status.DANGER);
                yield this.bulkOperationsService.updateBulkOperation({
                    id: this.bulkOperation.id,
                    generalStatus: OperationBulkGeneralStatus.SUCCESSFUL
                });
                this.reload.emit();
                this.alert.success(gettext('Operation status changed to successful.'));
            }
            catch (er) {
                this.alert.addServerFailure(er);
            }
        });
    }
    openFailedOperation(failedParentId) {
        this.showFailedOperation.emit(failedParentId);
    }
    isStatusScheduled() {
        return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.SCHEDULED;
    }
    isStatusExecutingOrExecutingWithError() {
        return (this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING ||
            this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING_WITH_ERROR);
    }
    isStatusCanceled() {
        return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.CANCELED;
    }
    isStatusFailed() {
        return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.FAILED;
    }
};
BulkOperationListItemComponent.ctorParameters = () => [
    { type: BulkOperationsService },
    { type: ModalService },
    { type: AlertService },
    { type: BsModalService }
];
tslib_1.__decorate([
    Input()
], BulkOperationListItemComponent.prototype, "bulkOperation", void 0);
tslib_1.__decorate([
    Input()
], BulkOperationListItemComponent.prototype, "detailsCollapsed", void 0);
tslib_1.__decorate([
    Input()
], BulkOperationListItemComponent.prototype, "readOnly", void 0);
tslib_1.__decorate([
    Output()
], BulkOperationListItemComponent.prototype, "showFailedOperation", void 0);
tslib_1.__decorate([
    Output()
], BulkOperationListItemComponent.prototype, "reload", void 0);
tslib_1.__decorate([
    ViewChild('listItem', { static: true })
], BulkOperationListItemComponent.prototype, "listItem", void 0);
BulkOperationListItemComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-bulk-operation-list-item',
        template: "<c8y-li\n  class=\"c8y-list__item--double-actions\"\n  [ngClass]=\"{ 'c8y-list__item--no-expand': !detailsCollapsed }\"\n  [collapsed]=\"detailsCollapsed\"\n  #listItem\n  id=\"{{ bulkOperation.id }}\"\n>\n  <c8y-li-icon>\n    <i [class]=\"iconClass\"></i>\n  </c8y-li-icon>\n  <div [ngClass]=\"{ 'content-flex-80': !readOnly, 'content-flex-50': readOnly }\">\n    <div class=\"col-5\">\n      <span\n        class=\"text-truncate\"\n        title=\"{{ bulkOperation.id }} - {{\n          bulkOperation.operationPrototype.description | translate\n        }}\"\n      >\n        <strong class=\"text-muted m-r-4\">{{ bulkOperation.id }}</strong>\n        {{ bulkOperation.operationPrototype.description | translate }}\n      </span>\n    </div>\n    <div class=\"flex-grow\">\n      <div class=\"m-t-8 visible-xs\"></div>\n      <hr *ngIf=\"isStatusCanceled(); else statusNotCanceled\" class=\"m-t-16 m-b-0\" />\n      <ng-template #statusNotCanceled>\n        <div [class]=\"progressBarClass\" title=\"{{ progressBarStatus | number: '1.0-0' }}%\">\n          <div\n            [class]=\"progressBarColor\"\n            role=\"progressbar\"\n            aria-valuenow=\"0\"\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            [style.width.%]=\"progressBarStatus\"\n          >\n            <span *ngIf=\"progressBarStatus !== 0\">{{ progressBarStatus | number: '1.0-0' }}%</span>\n          </div>\n        </div>\n      </ng-template>\n    </div>\n    <div class=\"col-4\">\n      <small *ngIf=\"bulkOperation.progress.successful > 0\" class=\"m-r-8 icon-flex\">\n        <i class=\"fa fw fa-check-circle text-success m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountSuccessful: bulkOperation.progress.successful }\"\n        >\n          {{ bulkOperationsCountSuccessful }} successful\n        </span>\n      </small>\n      <small *ngIf=\"bulkOperation.progress.failed > 0\" class=\"m-r-8 icon-flex\">\n        <i class=\"fa fw fa-warning text-danger m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountFailed: bulkOperation.progress.failed }\"\n        >\n          {{ bulkOperationsCountFailed }} failed\n        </span>\n      </small>\n      <small *ngIf=\"bulkOperation.progress.pending > 0\" class=\"m-r-8 icon-flex\">\n        <i class=\"fa fw fa-clock-o text-primary m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountPending: bulkOperation.progress.pending }\"\n        >\n          {{ bulkOperationsCountPending }} pending\n        </span>\n      </small>\n    </div>\n  </div>\n  <div class=\"c8y-list__item__footer\">\n    <div class=\"m-r-16\">\n      <span class=\"text-label-small m-r-4\" translate>Start</span>\n      <small class=\"icon-flex\">\n        <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n        <span>\n          {{ bulkOperation.startDate | c8yDate }}\n        </span>\n      </small>\n    </div>\n    <div class=\"m-r-16\" *ngIf=\"bulkOperationGeneralStatus.CANCELED !== bulkOperation.generalStatus\">\n      <span class=\"text-label-small m-r-4\" translate>Finish</span>\n\n      <small class=\"icon-flex\">\n        <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n        <span>{{ finishDate | c8yDate }}</span>\n      </small>\n      <a\n        container=\"body\"\n        *ngIf=\"isStatusScheduled() || isStatusExecutingOrExecutingWithError()\"\n        class=\"btn-clean m-l-4\"\n        popover=\"{{ finishDatePopoverText | translate }}\"\n        placement=\"right\"\n        outsideClick=\"true\"\n      >\n        <i c8yIcon=\"question-circle-o text-primary\"></i>\n      </a>\n    </div>\n  </div>\n  <ng-container *ngIf=\"!readOnly\">\n    <c8y-li-action\n      *ngIf=\"isStatusScheduled()\"\n      label=\"{{ 'Edit schedule' | translate }}\"\n      (click)=\"editSchedule()\"\n      icon=\"pencil\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"isStatusScheduled() || isStatusExecutingOrExecutingWithError()\"\n      label=\"{{ 'Cancel bulk operation' | translate }}\"\n      (click)=\"cancelBulkOperation()\"\n      icon=\"remove\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"isStatusFailed()\"\n      label=\"{{ 'Retry failed operations' | translate }}\"\n      (click)=\"retryFailedOperation()\"\n      icon=\"repeat\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"isStatusFailed()\"\n      label=\"{{ 'Set operation to successful' | translate }}\"\n      (click)=\"setToSuccessful()\"\n      icon=\"check\"\n    >\n    </c8y-li-action>\n  </ng-container>\n  <c8y-li-collapse class=\"m-b-16\">\n    <c8y-bulk-operation-details-tabs\n      *ngIf=\"!listItem.collapsed\"\n      [bulkOperation]=\"bulkOperation\"\n      [readOnly]=\"readOnly\"\n      (onRetryFailedOperations)=\"retryFailedOperation()\"\n      (showFailedOperation)=\"openFailedOperation($event)\"\n    >\n    </c8y-bulk-operation-details-tabs>\n  </c8y-li-collapse>\n</c8y-li>\n"
    })
], BulkOperationListItemComponent);
export { BulkOperationListItemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVsay1vcGVyYXRpb24tbGlzdC1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy8iLCJzb3VyY2VzIjpbImJ1bGsvbGlzdC9idWxrLW9wZXJhdGlvbi1saXN0LWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBR0wsTUFBTSxFQUVOLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQWtCLDBCQUEwQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3pFLE9BQU8sRUFDTCxZQUFZLEVBQ1osT0FBTyxFQUNQLGlCQUFpQixFQUNqQixZQUFZLEVBQ1osTUFBTSxFQUNQLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0UsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDbkUsT0FBTyxFQUFFLHNDQUFzQyxFQUFFLE1BQU0scURBQXFELENBQUM7QUFDN0csT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFNakYsSUFBYSw4QkFBOEIsR0FBM0MsTUFBYSw4QkFBOEI7SUF1QnpDLFlBQ1UscUJBQTRDLEVBQzVDLEtBQW1CLEVBQ25CLEtBQW1CLEVBQ25CLGNBQThCO1FBSDlCLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7UUFDNUMsVUFBSyxHQUFMLEtBQUssQ0FBYztRQUNuQixVQUFLLEdBQUwsS0FBSyxDQUFjO1FBQ25CLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQXZCeEMscUJBQWdCLEdBQVksSUFBSSxDQUFDO1FBRWpDLGFBQVEs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UUFDeEMsMC9KQUF3RDtLQUN6RCxDQUFDO0dBQ1csOEJBQThCLENBeUwxQztTQXpMWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElPcGVyYXRpb25CdWxrLCBPcGVyYXRpb25CdWxrR2VuZXJhbFN0YXR1cyB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7XG4gIEFsZXJ0U2VydmljZSxcbiAgZ2V0dGV4dCxcbiAgTGlzdEl0ZW1Db21wb25lbnQsXG4gIE1vZGFsU2VydmljZSxcbiAgU3RhdHVzXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgYXNzaWduLCBjbG9uZURlZXAgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgQnNNb2RhbFJlZiwgQnNNb2RhbFNlcnZpY2UsIE1vZGFsT3B0aW9ucyB9IGZyb20gJ25neC1ib290c3RyYXAvbW9kYWwnO1xuaW1wb3J0IHsgQnVsa09wZXJhdGlvbnNTZXJ2aWNlIH0gZnJvbSAnLi4vYnVsay1vcGVyYXRpb25zLnNlcnZpY2UnO1xuaW1wb3J0IHsgQnVsa09wZXJhdGlvbnNSZXNjaGVkdWxlTW9kYWxDb21wb25lbnQgfSBmcm9tICcuLi9tb2RhbC9idWxrLW9wZXJhdGlvbnMtcmVzY2hlZHVsZS1tb2RhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQlVMS19PUEVSQVRJT05fU1RBVFVTX09QVElPTlMgfSBmcm9tICcuL2J1bGstb3BlcmF0aW9uLWxpc3QtaXRlbS5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1idWxrLW9wZXJhdGlvbi1saXN0LWl0ZW0nLFxuICB0ZW1wbGF0ZVVybDogJy4vYnVsay1vcGVyYXRpb24tbGlzdC1pdGVtLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBCdWxrT3BlcmF0aW9uTGlzdEl0ZW1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpXG4gIGJ1bGtPcGVyYXRpb246IFBhcnRpYWw8SU9wZXJhdGlvbkJ1bGs+O1xuICBASW5wdXQoKVxuICBkZXRhaWxzQ29sbGFwc2VkOiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KClcbiAgcmVhZE9ubHk6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQE91dHB1dCgpIHNob3dGYWlsZWRPcGVyYXRpb24gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSByZWxvYWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAVmlld0NoaWxkKCdsaXN0SXRlbScsIHsgc3RhdGljOiB0cnVlIH0pIGxpc3RJdGVtOiBMaXN0SXRlbUNvbXBvbmVudDtcbiAgaWNvbkNsYXNzOiBzdHJpbmc7XG4gIGZpbmlzaERhdGU6IG51bWJlcjtcbiAgcmVmcmVzaExvYWRpbmcgPSBmYWxzZTtcbiAgYnVsa09wZXJhdGlvbkdlbmVyYWxTdGF0dXMgPSBPcGVyYXRpb25CdWxrR2VuZXJhbFN0YXR1cztcbiAgYnVsa09wZXJhdGlvblN0YXR1c09wdGlvbnMgPSBCVUxLX09QRVJBVElPTl9TVEFUVVNfT1BUSU9OUztcbiAgYnNNb2RhbFJlZjogQnNNb2RhbFJlZjtcbiAgZmluaXNoRGF0ZVBvcG92ZXJUZXh0OiBzdHJpbmcgPSBnZXR0ZXh0KFxuICAgICdBcHByb3hpbWF0ZSBkYXRlLCBlc3RpbWF0ZWQgYmFzZWQgb24gdGhlIGJ1bGsgb3BlcmF0aW9uIHNldHRpbmdzLidcbiAgKTtcbiAgcHJvZ3Jlc3NCYXJDbGFzczogc3RyaW5nID0gJ3Byb2dyZXNzJztcbiAgcHJvZ3Jlc3NCYXJDb2xvcjogc3RyaW5nO1xuICBwcm9ncmVzc0JhclN0YXR1czogbnVtYmVyID0gMDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGJ1bGtPcGVyYXRpb25zU2VydmljZTogQnVsa09wZXJhdGlvbnNTZXJ2aWNlLFxuICAgIHByaXZhdGUgbW9kYWw6IE1vZGFsU2VydmljZSxcbiAgICBwcml2YXRlIGFsZXJ0OiBBbGVydFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBic01vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2VcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuaWNvbkNsYXNzID0gdGhpcy5nZXRJY29uQ2xhc3MoKTtcbiAgICB0aGlzLmZpbmlzaERhdGUgPSB0aGlzLmNhbGN1bGF0ZUZpbmlzaERhdGVNcygpO1xuICAgIHRoaXMuc2V0UHJvZ3Jlc3NCYXIoKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlcy5idWxrT3BlcmF0aW9uICYmICFjaGFuZ2VzLmJ1bGtPcGVyYXRpb24uZmlyc3RDaGFuZ2UpIHtcbiAgICAgIHRoaXMuaWNvbkNsYXNzID0gdGhpcy5nZXRJY29uQ2xhc3MoKTtcbiAgICAgIHRoaXMuc2V0UHJvZ3Jlc3NCYXIoKTtcbiAgICB9XG4gIH1cblxuICBnZXRJY29uQ2xhc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVsa09wZXJhdGlvblN0YXR1c09wdGlvbnMuZmluZChzdGF0dXNPcHRpb24gPT5cbiAgICAgIHN0YXR1c09wdGlvbi5nZW5lcmFsU3RhdHVzLmluY2x1ZGVzKHRoaXMuYnVsa09wZXJhdGlvbi5nZW5lcmFsU3RhdHVzKVxuICAgICkuaWNvbkNsYXNzO1xuICB9XG5cbiAgY2FsY3VsYXRlRmluaXNoRGF0ZU1zKCk6IG51bWJlciB7XG4gICAgY29uc3Qgc3RhcnREYXRlTXM6IG51bWJlciA9IG5ldyBEYXRlKHRoaXMuYnVsa09wZXJhdGlvbi5zdGFydERhdGUpLmdldFRpbWUoKTtcbiAgICBjb25zdCBjcmVhdGlvblJhbXBNczogbnVtYmVyID0gdGhpcy5idWxrT3BlcmF0aW9uLmNyZWF0aW9uUmFtcCAqIDEwMDA7XG5cbiAgICByZXR1cm4gc3RhcnREYXRlTXMgKyBjcmVhdGlvblJhbXBNcyAqIHRoaXMuYnVsa09wZXJhdGlvbi5wcm9ncmVzcy5hbGw7XG4gIH1cblxuICBwcm9ncmVzc0JhclByb2dyZXNzRm4oKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICgodGhpcy5idWxrT3BlcmF0aW9uLnByb2dyZXNzLnN1Y2Nlc3NmdWwgKyB0aGlzLmJ1bGtPcGVyYXRpb24ucHJvZ3Jlc3MuZmFpbGVkKSAvXG4gICAgICAgIHRoaXMuYnVsa09wZXJhdGlvbi5wcm9ncmVzcy5hbGwpICpcbiAgICAgIDEwMFxuICAgICk7XG4gIH1cblxuICBzZXRQcm9ncmVzc0JhcigpIHtcbiAgICBjb25zdCBzdGF0aWNDb250ZW50T2ZDbGFzcyA9ICdwcm9ncmVzcy1iYXIgcHJvZ3Jlc3Mtc3RyaXBlZCBhY3RpdmUgcHJvZ3Jlc3MtYmFyJztcblxuICAgIGNvbnN0IHByb2dyZXNzQmFyU3RhdGUgPSB7XG4gICAgICBFWEVDVVRJTkc6IHtcbiAgICAgICAgcHJvZ3Jlc3NCYXJDbGFzczogJ3Byb2dyZXNzIHByb2dyZXNzLXN0cmlwZWQgYWN0aXZlJyxcbiAgICAgICAgcHJvZ3Jlc3NCYXJDb2xvcjogYCR7c3RhdGljQ29udGVudE9mQ2xhc3N9LXByaW1hcnlgLFxuICAgICAgICBwcm9ncmVzc0JhclN0YXR1czogdGhpcy5wcm9ncmVzc0JhclByb2dyZXNzRm4oKVxuICAgICAgfSxcbiAgICAgIEVYRUNVVElOR19XSVRIX0VSUk9SOiB7XG4gICAgICAgIHByb2dyZXNzQmFyQ2xhc3M6ICdwcm9ncmVzcyBwcm9ncmVzcy1zdHJpcGVkIGFjdGl2ZScsXG4gICAgICAgIHByb2dyZXNzQmFyQ29sb3I6IGAke3N0YXRpY0NvbnRlbnRPZkNsYXNzfS1kYW5nZXJgLFxuICAgICAgICBwcm9ncmVzc0JhclN0YXR1czogdGhpcy5wcm9ncmVzc0JhclByb2dyZXNzRm4oKVxuICAgICAgfSxcbiAgICAgIEZBSUxFRDoge1xuICAgICAgICBwcm9ncmVzc0JhckNsYXNzOiAncHJvZ3Jlc3MnLFxuICAgICAgICBwcm9ncmVzc0JhckNvbG9yOiBgJHtzdGF0aWNDb250ZW50T2ZDbGFzc30tZGFuZ2VyYCxcbiAgICAgICAgcHJvZ3Jlc3NCYXJTdGF0dXM6IDEwMFxuICAgICAgfSxcbiAgICAgIFNVQ0NFU1NGVUw6IHtcbiAgICAgICAgcHJvZ3Jlc3NCYXJDbGFzczogJ3Byb2dyZXNzJyxcbiAgICAgICAgcHJvZ3Jlc3NCYXJDb2xvcjogYCR7c3RhdGljQ29udGVudE9mQ2xhc3N9LXN1Y2Nlc3NgLFxuICAgICAgICBwcm9ncmVzc0JhclN0YXR1czogMTAwXG4gICAgICB9XG4gICAgfTtcblxuICAgIGFzc2lnbih0aGlzLCBwcm9ncmVzc0JhclN0YXRlW3RoaXMuYnVsa09wZXJhdGlvbi5nZW5lcmFsU3RhdHVzXSk7XG4gIH1cblxuICBlZGl0U2NoZWR1bGUoKSB7XG4gICAgY29uc3QgcmVzY2hlZHVsZWRPcGVyYXRpb24gPSBjbG9uZURlZXAodGhpcy5idWxrT3BlcmF0aW9uKTtcbiAgICBjb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gICAgICBidWxrT3BlcmF0aW9uOiByZXNjaGVkdWxlZE9wZXJhdGlvblxuICAgIH07XG4gICAgY29uc3QgbW9kYWxPcHRpb25zID0geyBpbml0aWFsU3RhdGUsIGNsYXNzOiAnbW9kYWwtc20nLCBiYWNrZHJvcDogJ3N0YXRpYycgfSBhcyBNb2RhbE9wdGlvbnM7XG4gICAgdGhpcy5ic01vZGFsUmVmID0gdGhpcy5ic01vZGFsU2VydmljZS5zaG93KFxuICAgICAgQnVsa09wZXJhdGlvbnNSZXNjaGVkdWxlTW9kYWxDb21wb25lbnQsXG4gICAgICBtb2RhbE9wdGlvbnNcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgY2FuY2VsQnVsa09wZXJhdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5tb2RhbC5jb25maXJtKFxuICAgICAgICBnZXR0ZXh0KCdDYW5jZWwgYnVsayBvcGVyYXRpb24nKSxcbiAgICAgICAgZ2V0dGV4dCgnWW91IGFyZSBhYm91dCB0byBjYW5jZWwgdGhlIGJ1bGsgb3BlcmF0aW9uLiBEbyB5b3Ugd2FudCB0byBwcm9jZWVkPycpLFxuICAgICAgICBTdGF0dXMuREFOR0VSXG4gICAgICApO1xuICAgICAgYXdhaXQgdGhpcy5idWxrT3BlcmF0aW9uc1NlcnZpY2UuZGVsZXRlQnVsa09wZXJhdGlvbih0aGlzLmJ1bGtPcGVyYXRpb24uaWQpO1xuICAgICAgdGhpcy5yZWxvYWQuZW1pdCgpO1xuICAgICAgdGhpcy5hbGVydC5zdWNjZXNzKGdldHRleHQoJ09wZXJhdGlvbiBjYW5jZWxlZC4nKSk7XG4gICAgfSBjYXRjaCAoZXIpIHtcbiAgICAgIHRoaXMuYWxlcnQuYWRkU2VydmVyRmFpbHVyZShlcik7XG4gICAgfVxuICB9XG5cbiAgcmV0cnlGYWlsZWRPcGVyYXRpb24oKSB7XG4gICAgY29uc3QgY2xvbmVkQnVsayA9IGNsb25lRGVlcCh0aGlzLmJ1bGtPcGVyYXRpb24pO1xuXG4gICAgLy8gY2hhbmdlIHRoZSBpZCB0byBmYWlsZWRwYXJlbnRJZCBzaW1pbGFyIHRvIHRoZSBsb2dpYyBpbiBkZXZpY2VCdWxrQ29udHJvbC5zZXJ2aWNlLmpzXG4gICAgZGVsZXRlIGNsb25lZEJ1bGsuZ3JvdXBJZDtcbiAgICBjbG9uZWRCdWxrLmZhaWxlZFBhcmVudElkID0gdGhpcy5idWxrT3BlcmF0aW9uLmlkO1xuXG4gICAgLy8gc2hvdyByZXNjaGRlZHVsZSBtb2RhbDpcbiAgICBjb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gICAgICBidWxrT3BlcmF0aW9uOiBjbG9uZWRCdWxrLFxuICAgICAgaXNSZXRyeU9wZXJhdGlvbjogdHJ1ZVxuICAgIH07XG4gICAgY29uc3QgbW9kYWxPcHRpb25zID0geyBpbml0aWFsU3RhdGUsIGNsYXNzOiAnbW9kYWwtc20nLCBiYWNrZHJvcDogJ3N0YXRpYycgfSBhcyBNb2RhbE9wdGlvbnM7XG4gICAgdGhpcy5ic01vZGFsUmVmID0gdGhpcy5ic01vZGFsU2VydmljZS5zaG93KFxuICAgICAgQnVsa09wZXJhdGlvbnNSZXNjaGVkdWxlTW9kYWxDb21wb25lbnQsXG4gICAgICBtb2RhbE9wdGlvbnNcbiAgICApO1xuICAgIHRoaXMuYnNNb2RhbFJlZi5jb250ZW50LmNsb3NlU3ViamVjdC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5yZWxvYWQuZW1pdCgpO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgc2V0VG9TdWNjZXNzZnVsKCkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLm1vZGFsLmNvbmZpcm0oXG4gICAgICAgIGdldHRleHQoJ1NldCBtYW51YWxseSBidWxrIG9wZXJhdGlvbiB0byBzdWNjZXNzZnVsJyksXG4gICAgICAgIGdldHRleHQoXG4gICAgICAgICAgJ1lvdSBhcmUgYWJvdXQgdG8gY2hhbmdlIHRoZSBidWxrIG9wZXJhdGlvbiBzdGF0dXMgdG8gc3VjY2Vzc2Z1bC4gRG8geW91IHdhbnQgdG8gcHJvY2VlZD8nXG4gICAgICAgICksXG4gICAgICAgIFN0YXR1cy5EQU5HRVJcbiAgICAgICk7XG5cbiAgICAgIGF3YWl0IHRoaXMuYnVsa09wZXJhdGlvbnNTZXJ2aWNlLnVwZGF0ZUJ1bGtPcGVyYXRpb24oe1xuICAgICAgICBpZDogdGhpcy5idWxrT3BlcmF0aW9uLmlkLFxuICAgICAgICBnZW5lcmFsU3RhdHVzOiBPcGVyYXRpb25CdWxrR2VuZXJhbFN0YXR1cy5TVUNDRVNTRlVMXG4gICAgICB9KTtcbiAgICAgIHRoaXMucmVsb2FkLmVtaXQoKTtcbiAgICAgIHRoaXMuYWxlcnQuc3VjY2VzcyhnZXR0ZXh0KCdPcGVyYXRpb24gc3RhdHVzIGNoYW5nZWQgdG8gc3VjY2Vzc2Z1bC4nKSk7XG4gICAgfSBjYXRjaCAoZXIpIHtcbiAgICAgIHRoaXMuYWxlcnQuYWRkU2VydmVyRmFpbHVyZShlcik7XG4gICAgfVxuICB9XG5cbiAgb3BlbkZhaWxlZE9wZXJhdGlvbihmYWlsZWRQYXJlbnRJZCkge1xuICAgIHRoaXMuc2hvd0ZhaWxlZE9wZXJhdGlvbi5lbWl0KGZhaWxlZFBhcmVudElkKTtcbiAgfVxuXG4gIGlzU3RhdHVzU2NoZWR1bGVkKCkge1xuICAgIHJldHVybiB0aGlzLmJ1bGtPcGVyYXRpb24uZ2VuZXJhbFN0YXR1cyA9PT0gdGhpcy5idWxrT3BlcmF0aW9uR2VuZXJhbFN0YXR1cy5TQ0hFRFVMRUQ7XG4gIH1cblxuICBpc1N0YXR1c0V4ZWN1dGluZ09yRXhlY3V0aW5nV2l0aEVycm9yKCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmJ1bGtPcGVyYXRpb24uZ2VuZXJhbFN0YXR1cyA9PT0gdGhpcy5idWxrT3BlcmF0aW9uR2VuZXJhbFN0YXR1cy5FWEVDVVRJTkcgfHxcbiAgICAgIHRoaXMuYnVsa09wZXJhdGlvbi5nZW5lcmFsU3RhdHVzID09PSB0aGlzLmJ1bGtPcGVyYXRpb25HZW5lcmFsU3RhdHVzLkVYRUNVVElOR19XSVRIX0VSUk9SXG4gICAgKTtcbiAgfVxuXG4gIGlzU3RhdHVzQ2FuY2VsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVsa09wZXJhdGlvbi5nZW5lcmFsU3RhdHVzID09PSB0aGlzLmJ1bGtPcGVyYXRpb25HZW5lcmFsU3RhdHVzLkNBTkNFTEVEO1xuICB9XG5cbiAgaXNTdGF0dXNGYWlsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVsa09wZXJhdGlvbi5nZW5lcmFsU3RhdHVzID09PSB0aGlzLmJ1bGtPcGVyYXRpb25HZW5lcmFsU3RhdHVzLkZBSUxFRDtcbiAgfVxufVxuIl19