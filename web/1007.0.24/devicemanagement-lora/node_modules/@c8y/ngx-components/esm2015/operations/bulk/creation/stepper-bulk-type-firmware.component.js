import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { gettext } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { get } from 'lodash-es';
import { BehaviorSubject } from 'rxjs';
import { BaseStepperComponent } from '../base-stepper.component';
import { BulkOperationsService } from '../bulk-operations.service';
let StepperFirmware = class StepperFirmware extends BaseStepperComponent {
    constructor(bulkOperationService, translate) {
        super();
        this.bulkOperationService = bulkOperationService;
        this.translate = translate;
        this.descriptionTemplate = gettext('{{ name }} (version {{ version }})');
        this.textFilter$ = new BehaviorSubject('');
        this.stepData = {
            firmware: undefined,
            versionOrPatch: undefined
        };
    }
    goToVersionOrPatchStep({ stepper }) {
        const selectedFirmware = this.stepData.firmware;
        this.bulkOperationService.setFirmwareId(selectedFirmware.id);
        this.deviceTypes = (selectedFirmware.c8y_Filter || {}).type;
        stepper.next();
    }
    onVersionOrPatchSelected(versionOrPatch) {
        this.stepData.versionOrPatch = versionOrPatch;
    }
    onFirmwareSelected(fw) {
        this.stepData.firmware = fw;
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    retrieveOperationPrototype() {
        const selectedFirmware = this.stepData.firmware;
        const selectedVersionOrPatch = this.stepData.versionOrPatch;
        if (!selectedFirmware || !selectedVersionOrPatch) {
            return;
        }
        const firmware = {
            name: selectedFirmware.name,
            version: selectedVersionOrPatch.c8y_Firmware.version,
            url: selectedVersionOrPatch.c8y_Firmware.url
        };
        if (selectedVersionOrPatch.c8y_Patch) {
            firmware.isPatch = true;
            firmware.dependency = selectedVersionOrPatch.c8y_Patch.dependency;
        }
        const name = selectedFirmware.name;
        const version = selectedVersionOrPatch.c8y_Firmware.version;
        const description = `Update firmware to: ${name} (version: ${version}).`;
        return {
            name: gettext('Firmware update'),
            description: this.translate.instant(this.descriptionTemplate, {
                name: get(this.stepData, 'firmware.name'),
                version: get(this.stepData, 'versionOrPatch.c8y_Firmware.version')
            }),
            prototype: {
                description,
                c8y_Firmware: firmware
            }
        };
    }
    onSelectionChange(event) {
        this.textFilter$.next('');
        super.onSelectionChange(event);
    }
};
StepperFirmware.ctorParameters = () => [
    { type: BulkOperationsService },
    { type: TranslateService }
];
StepperFirmware = tslib_1.__decorate([
    Component({
        selector: 'c8y-stepper-firmware',
        template: "<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep=\"\n      'Select firmware' | translate;\n      completed: !!stepData?.firmware;\n      buttonsDisabled: !stepData?.firmware;\n      onNext: goToVersionOrPatchStep.bind(this)\n    \"\n  >\n    <c8y-select-firmware-step\n      [selected]=\"stepData?.firmware\"\n      (firmware)=\"onFirmwareSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-firmware-step\n  ></ng-container>\n  <ng-container\n    *customStep=\"\n      'Select version or patch' | translate;\n      completed: !!stepData?.versionOrPatch;\n      buttonsDisabled: !stepData?.versionOrPatch\n    \"\n  >\n    <div class=\"card-block p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n      <div class=\"row\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <h4 class=\"text-center m-b-16 text-gray\" translate>\n            Select version or patch\n          </h4>\n          <p class=\"text-center p-b-8 text-truncate\">\n            <strong [title]=\"stepData?.firmware?.name\">{{ stepData?.firmware?.name }}</strong>\n            <br/>\n            <small [title]=\"stepData?.firmware?.description\">{{\n              stepData?.firmware?.description\n            }}</small>\n          </p>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-xs-12 flex-grow no-gutter\">\n      <div class=\"card-inner-scroll fit-v\">\n        <div class=\"card-block p-t-0 p-b-0\">\n          <c8y-version-or-patch-step\n            [selected]=\"stepData?.versionOrPatch\"\n            (versionOrPatch)=\"onVersionOrPatchSelected($event)\">\n          </c8y-version-or-patch-step>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n"
    })
], StepperFirmware);
export { StepperFirmware };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci1idWxrLXR5cGUtZmlybXdhcmUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zLyIsInNvdXJjZXMiOlsiYnVsay9jcmVhdGlvbi9zdGVwcGVyLWJ1bGstdHlwZS1maXJtd2FyZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFFckQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxFQUFFLGVBQWUsRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFDckQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDakUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFPbkUsSUFBYSxlQUFlLEdBQTVCLE1BQWEsZUFBZ0IsU0FBUSxvQkFBb0I7SUFldkQsWUFDVSxvQkFBMkMsRUFDM0MsU0FBMkI7UUFFbkMsS0FBSyxFQUFFLENBQUM7UUFIQSx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXVCO1FBQzNDLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBaEI1Qix3QkFBbUIsR0FBVyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQztRQUVyRixnQkFBVyxHQUE0QixJQUFJLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUUvRCxhQUFRLEdBQWlFO1lBQ3ZFLFFBQVEsRUFBRSxTQUFTO1lBQ25CLGNBQWMsRUFBRSxTQUFTO1NBQzFCLENBQUM7SUFZRixDQUFDO0lBRUQsc0JBQXNCLENBQUMsRUFBRSxPQUFPLEVBQUU7UUFDaEMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUNoRCxJQUFJLENBQUMsb0JBQW9CLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzVELE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRUQsd0JBQXdCLENBQUMsY0FBOEI7UUFDckQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO0lBQ2hELENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxFQUFrQjtRQUNuQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNqQztJQUNILENBQUM7SUFFUywwQkFBMEI7UUFDbEMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUNoRCxNQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDO1FBRTVELElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLHNCQUFzQixFQUFFO1lBQ2hELE9BQU87U0FDUjtRQUVELE1BQU0sUUFBUSxHQUFvQjtZQUNoQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsSUFBSTtZQUMzQixPQUFPLEVBQUUsc0JBQXNCLENBQUMsWUFBWSxDQUFDLE9BQU87WUFDcEQsR0FBRyxFQUFFLHNCQUFzQixDQUFDLFlBQVksQ0FBQyxHQUFHO1NBQ2YsQ0FBQztRQUVoQyxJQUFJLHNCQUFzQixDQUFDLFNBQVMsRUFBRTtZQUNwQyxRQUFRLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztZQUN4QixRQUFRLENBQUMsVUFBVSxHQUFHLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7U0FDbkU7UUFFRCxNQUFNLElBQUksR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7UUFDbkMsTUFBTSxPQUFPLEdBQUcsc0JBQXNCLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztRQUM1RCxNQUFNLFdBQVcsR0FBVyx1QkFBdUIsSUFBSSxjQUFjLE9BQU8sSUFBSSxDQUFDO1FBRWpGLE9BQU87WUFDTCxJQUFJLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixDQUFDO1lBQ2hDLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUU7Z0JBQzVELElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUM7Z0JBQ3pDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxxQ0FBcUMsQ0FBQzthQUNuRSxDQUFDO1lBQ0YsU0FBUyxFQUFHO2dCQUNWLFdBQVc7Z0JBQ1gsWUFBWSxFQUFFLFFBQVE7YUFDRztTQUM1QixDQUFDO0lBQ0osQ0FBQztJQUVTLGlCQUFpQixDQUFDLEtBQTRCO1FBQ3RELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFCLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDO0NBQ0YsQ0FBQTs7WUFuRWlDLHFCQUFxQjtZQUNoQyxnQkFBZ0I7O0FBakIxQixlQUFlO0lBSjNCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxzQkFBc0I7UUFDaEMsc3VEQUF3RDtLQUN6RCxDQUFDO0dBQ1csZUFBZSxDQW1GM0I7U0FuRlksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0ZXBwZXJTZWxlY3Rpb25FdmVudCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9zdGVwcGVyJztcbmltcG9ydCB7IENvbXBvbmVudCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCwgSU9wZXJhdGlvbiB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IGdldCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQmFzZVN0ZXBwZXJDb21wb25lbnQgfSBmcm9tICcuLi9iYXNlLXN0ZXBwZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEJ1bGtPcGVyYXRpb25zU2VydmljZSB9IGZyb20gJy4uL2J1bGstb3BlcmF0aW9ucy5zZXJ2aWNlJztcbmltcG9ydCB7IE9wZXJhdGlvbkRldGFpbHMgfSBmcm9tICcuLi9vcGVyYXRpb24tZGV0YWlscy5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1zdGVwcGVyLWZpcm13YXJlJyxcbiAgdGVtcGxhdGVVcmw6ICdzdGVwcGVyLWJ1bGstdHlwZS1maXJtd2FyZS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgU3RlcHBlckZpcm13YXJlIGV4dGVuZHMgQmFzZVN0ZXBwZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICByZWFkb25seSBkZXNjcmlwdGlvblRlbXBsYXRlOiBzdHJpbmcgPSBnZXR0ZXh0KCd7eyBuYW1lIH19ICh2ZXJzaW9uIHt7IHZlcnNpb24gfX0pJyk7XG5cbiAgdGV4dEZpbHRlciQ6IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+ID0gbmV3IEJlaGF2aW9yU3ViamVjdCgnJyk7XG5cbiAgc3RlcERhdGE6IHsgZmlybXdhcmU6IElNYW5hZ2VkT2JqZWN0OyB2ZXJzaW9uT3JQYXRjaDogSU1hbmFnZWRPYmplY3QgfSA9IHtcbiAgICBmaXJtd2FyZTogdW5kZWZpbmVkLFxuICAgIHZlcnNpb25PclBhdGNoOiB1bmRlZmluZWRcbiAgfTtcblxuICBzZWxlY3RlZEZpcm13YXJlOiBJTWFuYWdlZE9iamVjdDtcbiAgc2VsZWN0ZWRWZXJzaW9uT3JQYXRjaDogSU1hbmFnZWRPYmplY3Q7XG5cbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGJ1bGtPcGVyYXRpb25TZXJ2aWNlOiBCdWxrT3BlcmF0aW9uc1NlcnZpY2UsXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGdvVG9WZXJzaW9uT3JQYXRjaFN0ZXAoeyBzdGVwcGVyIH0pIHtcbiAgICBjb25zdCBzZWxlY3RlZEZpcm13YXJlID0gdGhpcy5zdGVwRGF0YS5maXJtd2FyZTtcbiAgICB0aGlzLmJ1bGtPcGVyYXRpb25TZXJ2aWNlLnNldEZpcm13YXJlSWQoc2VsZWN0ZWRGaXJtd2FyZS5pZCk7XG4gICAgdGhpcy5kZXZpY2VUeXBlcyA9IChzZWxlY3RlZEZpcm13YXJlLmM4eV9GaWx0ZXIgfHwge30pLnR5cGU7XG4gICAgc3RlcHBlci5uZXh0KCk7XG4gIH1cblxuICBvblZlcnNpb25PclBhdGNoU2VsZWN0ZWQodmVyc2lvbk9yUGF0Y2g6IElNYW5hZ2VkT2JqZWN0KSB7XG4gICAgdGhpcy5zdGVwRGF0YS52ZXJzaW9uT3JQYXRjaCA9IHZlcnNpb25PclBhdGNoO1xuICB9XG5cbiAgb25GaXJtd2FyZVNlbGVjdGVkKGZ3OiBJTWFuYWdlZE9iamVjdCkge1xuICAgIHRoaXMuc3RlcERhdGEuZmlybXdhcmUgPSBmdztcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgcmV0cmlldmVPcGVyYXRpb25Qcm90b3R5cGUoKTogT3BlcmF0aW9uRGV0YWlscyB7XG4gICAgY29uc3Qgc2VsZWN0ZWRGaXJtd2FyZSA9IHRoaXMuc3RlcERhdGEuZmlybXdhcmU7XG4gICAgY29uc3Qgc2VsZWN0ZWRWZXJzaW9uT3JQYXRjaCA9IHRoaXMuc3RlcERhdGEudmVyc2lvbk9yUGF0Y2g7XG5cbiAgICBpZiAoIXNlbGVjdGVkRmlybXdhcmUgfHwgIXNlbGVjdGVkVmVyc2lvbk9yUGF0Y2gpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBmaXJtd2FyZTogSU1hbmFnZWRPYmplY3QgPSAoe1xuICAgICAgbmFtZTogc2VsZWN0ZWRGaXJtd2FyZS5uYW1lLFxuICAgICAgdmVyc2lvbjogc2VsZWN0ZWRWZXJzaW9uT3JQYXRjaC5jOHlfRmlybXdhcmUudmVyc2lvbixcbiAgICAgIHVybDogc2VsZWN0ZWRWZXJzaW9uT3JQYXRjaC5jOHlfRmlybXdhcmUudXJsXG4gICAgfSBhcyB1bmtub3duKSBhcyBJTWFuYWdlZE9iamVjdDtcblxuICAgIGlmIChzZWxlY3RlZFZlcnNpb25PclBhdGNoLmM4eV9QYXRjaCkge1xuICAgICAgZmlybXdhcmUuaXNQYXRjaCA9IHRydWU7XG4gICAgICBmaXJtd2FyZS5kZXBlbmRlbmN5ID0gc2VsZWN0ZWRWZXJzaW9uT3JQYXRjaC5jOHlfUGF0Y2guZGVwZW5kZW5jeTtcbiAgICB9XG5cbiAgICBjb25zdCBuYW1lID0gc2VsZWN0ZWRGaXJtd2FyZS5uYW1lO1xuICAgIGNvbnN0IHZlcnNpb24gPSBzZWxlY3RlZFZlcnNpb25PclBhdGNoLmM4eV9GaXJtd2FyZS52ZXJzaW9uO1xuICAgIGNvbnN0IGRlc2NyaXB0aW9uOiBzdHJpbmcgPSBgVXBkYXRlIGZpcm13YXJlIHRvOiAke25hbWV9ICh2ZXJzaW9uOiAke3ZlcnNpb259KS5gO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGdldHRleHQoJ0Zpcm13YXJlIHVwZGF0ZScpLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMudHJhbnNsYXRlLmluc3RhbnQodGhpcy5kZXNjcmlwdGlvblRlbXBsYXRlLCB7XG4gICAgICAgIG5hbWU6IGdldCh0aGlzLnN0ZXBEYXRhLCAnZmlybXdhcmUubmFtZScpLFxuICAgICAgICB2ZXJzaW9uOiBnZXQodGhpcy5zdGVwRGF0YSwgJ3ZlcnNpb25PclBhdGNoLmM4eV9GaXJtd2FyZS52ZXJzaW9uJylcbiAgICAgIH0pLFxuICAgICAgcHJvdG90eXBlOiAoe1xuICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgYzh5X0Zpcm13YXJlOiBmaXJtd2FyZVxuICAgICAgfSBhcyB1bmtub3duKSBhcyBJT3BlcmF0aW9uXG4gICAgfTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvblNlbGVjdGlvbkNoYW5nZShldmVudDogU3RlcHBlclNlbGVjdGlvbkV2ZW50KSB7XG4gICAgdGhpcy50ZXh0RmlsdGVyJC5uZXh0KCcnKTtcbiAgICBzdXBlci5vblNlbGVjdGlvbkNoYW5nZShldmVudCk7XG4gIH1cbn1cbiJdfQ==