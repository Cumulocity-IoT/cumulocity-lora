import * as tslib_1 from "tslib";
import { ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { BulkOperationStepper } from './creation/bulk-operation-stepper.component';
export class BaseStepperComponent {
    constructor() {
        /**
         * A map holding step data. The order of properties need to match the order of
         * the steps they hold data for as the index of the property is used to clear
         * step data when navigating forth after changing data at an earlier step.
         */
        this.stepData = {};
        this.endSubscriptions = new Subject();
    }
    set deviceTypes(deviceTypes) {
        if (this.operationStepper) {
            this.operationStepper.changeDeviceTypes(deviceTypes);
        }
    }
    ngOnInit() {
        this.operationStepper.retrieveOperationDetails = this.retrieveOperationPrototype.bind(this);
        this.operationStepper.selectionChange
            .pipe(takeUntil(this.endSubscriptions))
            .subscribe(this.onSelectionChange.bind(this));
    }
    ngOnDestroy() {
        this.endSubscriptions.next();
        this.endSubscriptions.complete();
    }
    onSelectionChange(event) {
        const { selectedIndex, previouslySelectedIndex } = event;
        if (selectedIndex > previouslySelectedIndex &&
            selectedIndex < Object.keys(this.stepData).length) {
            // TODO clear step data only if previous step is "dirty"
            this.stepData[this.getStepDataKeyByIndex(selectedIndex)] = undefined;
        }
    }
    getStepDataKeyByIndex(index) {
        return Object.keys(this.stepData)[index];
    }
}
tslib_1.__decorate([
    ViewChild(BulkOperationStepper, { static: true })
], BaseStepperComponent.prototype, "operationStepper", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1zdGVwcGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy8iLCJzb3VyY2VzIjpbImJ1bGsvYmFzZS1zdGVwcGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFxQixTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFHbkYsTUFBTSxPQUFnQixvQkFBb0I7SUFBMUM7UUFTRTs7OztXQUlHO1FBQ0gsYUFBUSxHQUFzQyxFQUFFLENBQUM7UUFFekMscUJBQWdCLEdBQWtCLElBQUksT0FBTyxFQUFFLENBQUM7SUErQjFELENBQUM7SUE1Q0MsSUFBSSxXQUFXLENBQUMsV0FBOEI7UUFDNUMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDekIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3REO0lBQ0gsQ0FBQztJQVdELFFBQVE7UUFDTixJQUFJLENBQUMsZ0JBQWdCLENBQUMsd0JBQXdCLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU1RixJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZTthQUNsQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2FBQ3RDLFNBQVMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFJUyxpQkFBaUIsQ0FBQyxLQUE0QjtRQUN0RCxNQUFNLEVBQUUsYUFBYSxFQUFFLHVCQUF1QixFQUFFLEdBQUcsS0FBSyxDQUFDO1FBQ3pELElBQ0UsYUFBYSxHQUFHLHVCQUF1QjtZQUN2QyxhQUFhLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUNqRDtZQUNBLHdEQUF3RDtZQUN4RCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztTQUN0RTtJQUNILENBQUM7SUFFTyxxQkFBcUIsQ0FBQyxLQUFhO1FBQ3pDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0MsQ0FBQztDQUNGO0FBOUNvRDtJQUFsRCxTQUFTLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7OERBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RlcHBlclNlbGVjdGlvbkV2ZW50IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3N0ZXBwZXInO1xuaW1wb3J0IHsgT25EZXN0cm95LCBPbkluaXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBCdWxrT3BlcmF0aW9uU3RlcHBlciB9IGZyb20gJy4vY3JlYXRpb24vYnVsay1vcGVyYXRpb24tc3RlcHBlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgT3BlcmF0aW9uRGV0YWlscyB9IGZyb20gJy4vb3BlcmF0aW9uLWRldGFpbHMubW9kZWwnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZVN0ZXBwZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBWaWV3Q2hpbGQoQnVsa09wZXJhdGlvblN0ZXBwZXIsIHsgc3RhdGljOiB0cnVlIH0pIG9wZXJhdGlvblN0ZXBwZXI6IEJ1bGtPcGVyYXRpb25TdGVwcGVyO1xuXG4gIHNldCBkZXZpY2VUeXBlcyhkZXZpY2VUeXBlczogc3RyaW5nIHwgc3RyaW5nW10pIHtcbiAgICBpZiAodGhpcy5vcGVyYXRpb25TdGVwcGVyKSB7XG4gICAgICB0aGlzLm9wZXJhdGlvblN0ZXBwZXIuY2hhbmdlRGV2aWNlVHlwZXMoZGV2aWNlVHlwZXMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBIG1hcCBob2xkaW5nIHN0ZXAgZGF0YS4gVGhlIG9yZGVyIG9mIHByb3BlcnRpZXMgbmVlZCB0byBtYXRjaCB0aGUgb3JkZXIgb2ZcbiAgICogdGhlIHN0ZXBzIHRoZXkgaG9sZCBkYXRhIGZvciBhcyB0aGUgaW5kZXggb2YgdGhlIHByb3BlcnR5IGlzIHVzZWQgdG8gY2xlYXJcbiAgICogc3RlcCBkYXRhIHdoZW4gbmF2aWdhdGluZyBmb3J0aCBhZnRlciBjaGFuZ2luZyBkYXRhIGF0IGFuIGVhcmxpZXIgc3RlcC5cbiAgICovXG4gIHN0ZXBEYXRhOiB7IFtrZXk6IHN0cmluZ106IElNYW5hZ2VkT2JqZWN0IH0gPSB7fTtcblxuICBwcml2YXRlIGVuZFN1YnNjcmlwdGlvbnM6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdCgpO1xuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMub3BlcmF0aW9uU3RlcHBlci5yZXRyaWV2ZU9wZXJhdGlvbkRldGFpbHMgPSB0aGlzLnJldHJpZXZlT3BlcmF0aW9uUHJvdG90eXBlLmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLm9wZXJhdGlvblN0ZXBwZXIuc2VsZWN0aW9uQ2hhbmdlXG4gICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5lbmRTdWJzY3JpcHRpb25zKSlcbiAgICAgIC5zdWJzY3JpYmUodGhpcy5vblNlbGVjdGlvbkNoYW5nZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuZW5kU3Vic2NyaXB0aW9ucy5uZXh0KCk7XG4gICAgdGhpcy5lbmRTdWJzY3JpcHRpb25zLmNvbXBsZXRlKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgcmV0cmlldmVPcGVyYXRpb25Qcm90b3R5cGUoKTogT3BlcmF0aW9uRGV0YWlscyB8IFByb21pc2U8T3BlcmF0aW9uRGV0YWlscz47XG5cbiAgcHJvdGVjdGVkIG9uU2VsZWN0aW9uQ2hhbmdlKGV2ZW50OiBTdGVwcGVyU2VsZWN0aW9uRXZlbnQpIHtcbiAgICBjb25zdCB7IHNlbGVjdGVkSW5kZXgsIHByZXZpb3VzbHlTZWxlY3RlZEluZGV4IH0gPSBldmVudDtcbiAgICBpZiAoXG4gICAgICBzZWxlY3RlZEluZGV4ID4gcHJldmlvdXNseVNlbGVjdGVkSW5kZXggJiZcbiAgICAgIHNlbGVjdGVkSW5kZXggPCBPYmplY3Qua2V5cyh0aGlzLnN0ZXBEYXRhKS5sZW5ndGhcbiAgICApIHtcbiAgICAgIC8vIFRPRE8gY2xlYXIgc3RlcCBkYXRhIG9ubHkgaWYgcHJldmlvdXMgc3RlcCBpcyBcImRpcnR5XCJcbiAgICAgIHRoaXMuc3RlcERhdGFbdGhpcy5nZXRTdGVwRGF0YUtleUJ5SW5kZXgoc2VsZWN0ZWRJbmRleCldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0U3RlcERhdGFLZXlCeUluZGV4KGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnN0ZXBEYXRhKVtpbmRleF07XG4gIH1cbn1cbiJdfQ==