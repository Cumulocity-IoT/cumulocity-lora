import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { gettext, ViewContext } from '@c8y/ngx-components';
import { ActivatedRoute, Router } from '@angular/router';
import { ContextDashboardService } from './context-dashboard.service';
import { BsModalService } from 'ngx-bootstrap/modal';
import { DashboardDetailComponent } from './dashboard-detail.component';
let DashboardActionsFactory = class DashboardActionsFactory {
    constructor(router, contextDashboardService, bsModal) {
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.bsModal = bsModal;
    }
    get(activatedRoute) {
        const context = !activatedRoute.parent || activatedRoute.snapshot.data.context
            ? activatedRoute.snapshot.data
            : activatedRoute.parent.snapshot.data;
        return [
            {
                label: gettext('Add dashboard'),
                priority: 2500,
                action: () => this.addDashboard(context),
                disabled: !this.isEnabled(context)
            }
        ];
    }
    addDashboard(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let initialState;
            if (context.context === ViewContext.Device) {
                initialState = {
                    deviceType: context.contextData.type
                };
            }
            const modal = this.bsModal.show(DashboardDetailComponent, {
                class: 'modal-lg',
                initialState,
                ignoreBackdropClick: true
            }).content;
            try {
                const dashboardCfg = yield modal.result;
                const dashboardMO = yield this.contextDashboardService.create(dashboardCfg, context);
                yield this.contextDashboardService.navigateToDashboard(dashboardMO);
                modal.close();
            }
            catch (ex) {
                // intended emptys
            }
        });
    }
    isEnabled(context) {
        return (this.contextDashboardService.hasPermission() &&
            [ViewContext.Device, ViewContext.Group].includes(context.context));
    }
};
DashboardActionsFactory.ctorParameters = () => [
    { type: Router },
    { type: ContextDashboardService },
    { type: BsModalService }
];
DashboardActionsFactory = tslib_1.__decorate([
    Injectable()
], DashboardActionsFactory);
export { DashboardActionsFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLWFjdGlvbnMuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvY29udGV4dC1kYXNoYm9hcmQvIiwic291cmNlcyI6WyJkYXNoYm9hcmQtYWN0aW9ucy5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBeUIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBSXhFLElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBQ2xDLFlBQ1UsTUFBYyxFQUNkLHVCQUFnRCxFQUNoRCxPQUF1QjtRQUZ2QixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtRQUNoRCxZQUFPLEdBQVAsT0FBTyxDQUFnQjtJQUM5QixDQUFDO0lBRUosR0FBRyxDQUFDLGNBQThCO1FBQ2hDLE1BQU0sT0FBTyxHQUNYLENBQUMsY0FBYyxDQUFDLE1BQU0sSUFBSSxjQUFjLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPO1lBQzVELENBQUMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLElBQUk7WUFDOUIsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztRQUUxQyxPQUFPO1lBQ0w7Z0JBQ0UsS0FBSyxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUM7Z0JBQy9CLFFBQVEsRUFBRSxJQUFJO2dCQUNkLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztnQkFDeEMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7YUFDbkM7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUVLLFlBQVksQ0FBQyxPQUFPOztZQUN4QixJQUFJLFlBQW9DLENBQUM7WUFFekMsSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLFdBQVcsQ0FBQyxNQUFNLEVBQUU7Z0JBQzFDLFlBQVksR0FBRztvQkFDYixVQUFVLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJO2lCQUNyQyxDQUFDO2FBQ0g7WUFFRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRTtnQkFDeEQsS0FBSyxFQUFFLFVBQVU7Z0JBQ2pCLFlBQVk7Z0JBQ1osbUJBQW1CLEVBQUUsSUFBSTthQUMxQixDQUFDLENBQUMsT0FBbUMsQ0FBQztZQUN2QyxJQUFJO2dCQUNGLE1BQU0sWUFBWSxHQUFHLE1BQU0sS0FBSyxDQUFDLE1BQU0sQ0FBQztnQkFDeEMsTUFBTSxXQUFXLEdBQWtDLE1BQU0sSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FDMUYsWUFBWSxFQUNaLE9BQU8sQ0FDUixDQUFDO2dCQUNGLE1BQU0sSUFBSSxDQUFDLHVCQUF1QixDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUNwRSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDZjtZQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUNYLGtCQUFrQjthQUNuQjtRQUNILENBQUM7S0FBQTtJQUVPLFNBQVMsQ0FBQyxPQUFPO1FBQ3ZCLE9BQU8sQ0FDTCxJQUFJLENBQUMsdUJBQXVCLENBQUMsYUFBYSxFQUFFO1lBQzVDLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FDbEUsQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFBOztZQXREbUIsTUFBTTtZQUNXLHVCQUF1QjtZQUN2QyxjQUFjOztBQUp0Qix1QkFBdUI7SUFEbkMsVUFBVSxFQUFFO0dBQ0EsdUJBQXVCLENBd0RuQztTQXhEWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3Rpb24sIEFjdGlvbkZhY3RvcnksIGdldHRleHQsIFZpZXdDb250ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRTZXJ2aWNlIH0gZnJvbSAnLi9jb250ZXh0LWRhc2hib2FyZC5zZXJ2aWNlJztcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9tb2RhbCc7XG5pbXBvcnQgeyBEYXNoYm9hcmREZXRhaWxDb21wb25lbnQgfSBmcm9tICcuL2Rhc2hib2FyZC1kZXRhaWwuY29tcG9uZW50JztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRNYW5hZ2VkT2JqZWN0IH0gZnJvbSAnLi9jb250ZXh0LWRhc2hib2FyZC5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEYXNoYm9hcmRBY3Rpb25zRmFjdG9yeSBpbXBsZW1lbnRzIEFjdGlvbkZhY3Rvcnkge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgY29udGV4dERhc2hib2FyZFNlcnZpY2U6IENvbnRleHREYXNoYm9hcmRTZXJ2aWNlLFxuICAgIHByaXZhdGUgYnNNb2RhbDogQnNNb2RhbFNlcnZpY2VcbiAgKSB7fVxuXG4gIGdldChhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUpOiBBY3Rpb25bXSB7XG4gICAgY29uc3QgY29udGV4dCA9XG4gICAgICAhYWN0aXZhdGVkUm91dGUucGFyZW50IHx8IGFjdGl2YXRlZFJvdXRlLnNuYXBzaG90LmRhdGEuY29udGV4dFxuICAgICAgICA/IGFjdGl2YXRlZFJvdXRlLnNuYXBzaG90LmRhdGFcbiAgICAgICAgOiBhY3RpdmF0ZWRSb3V0ZS5wYXJlbnQuc25hcHNob3QuZGF0YTtcblxuICAgIHJldHVybiBbXG4gICAgICB7XG4gICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdBZGQgZGFzaGJvYXJkJyksXG4gICAgICAgIHByaW9yaXR5OiAyNTAwLFxuICAgICAgICBhY3Rpb246ICgpID0+IHRoaXMuYWRkRGFzaGJvYXJkKGNvbnRleHQpLFxuICAgICAgICBkaXNhYmxlZDogIXRoaXMuaXNFbmFibGVkKGNvbnRleHQpXG4gICAgICB9XG4gICAgXTtcbiAgfVxuXG4gIGFzeW5jIGFkZERhc2hib2FyZChjb250ZXh0KSB7XG4gICAgbGV0IGluaXRpYWxTdGF0ZTogeyBkZXZpY2VUeXBlOiBzdHJpbmcgfTtcblxuICAgIGlmIChjb250ZXh0LmNvbnRleHQgPT09IFZpZXdDb250ZXh0LkRldmljZSkge1xuICAgICAgaW5pdGlhbFN0YXRlID0ge1xuICAgICAgICBkZXZpY2VUeXBlOiBjb250ZXh0LmNvbnRleHREYXRhLnR5cGVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgbW9kYWwgPSB0aGlzLmJzTW9kYWwuc2hvdyhEYXNoYm9hcmREZXRhaWxDb21wb25lbnQsIHtcbiAgICAgIGNsYXNzOiAnbW9kYWwtbGcnLFxuICAgICAgaW5pdGlhbFN0YXRlLFxuICAgICAgaWdub3JlQmFja2Ryb3BDbGljazogdHJ1ZVxuICAgIH0pLmNvbnRlbnQgYXMgRGFzaGJvYXJkRGV0YWlsQ29tcG9uZW50O1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXNoYm9hcmRDZmcgPSBhd2FpdCBtb2RhbC5yZXN1bHQ7XG4gICAgICBjb25zdCBkYXNoYm9hcmRNTzogQ29udGV4dERhc2hib2FyZE1hbmFnZWRPYmplY3QgPSBhd2FpdCB0aGlzLmNvbnRleHREYXNoYm9hcmRTZXJ2aWNlLmNyZWF0ZShcbiAgICAgICAgZGFzaGJvYXJkQ2ZnLFxuICAgICAgICBjb250ZXh0XG4gICAgICApO1xuICAgICAgYXdhaXQgdGhpcy5jb250ZXh0RGFzaGJvYXJkU2VydmljZS5uYXZpZ2F0ZVRvRGFzaGJvYXJkKGRhc2hib2FyZE1PKTtcbiAgICAgIG1vZGFsLmNsb3NlKCk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIC8vIGludGVuZGVkIGVtcHR5c1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaXNFbmFibGVkKGNvbnRleHQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5jb250ZXh0RGFzaGJvYXJkU2VydmljZS5oYXNQZXJtaXNzaW9uKCkgJiZcbiAgICAgIFtWaWV3Q29udGV4dC5EZXZpY2UsIFZpZXdDb250ZXh0Lkdyb3VwXS5pbmNsdWRlcyhjb250ZXh0LmNvbnRleHQpXG4gICAgKTtcbiAgfVxufVxuIl19