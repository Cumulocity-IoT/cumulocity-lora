import * as tslib_1 from "tslib";
import { of, from, throwError, merge } from 'rxjs';
import { map, switchMap, takeWhile, take, filter, withLatestFrom } from 'rxjs/operators';
import { Injectable } from '@angular/core';
import { isNil, isUndefined, assign, set, head, get, isString, pick, cloneDeep, remove, find, forEach, map as _map } from 'lodash-es';
import { AlertService, gettext } from '@c8y/ngx-components';
import { InventoryService, InventoryBinaryService, IResult, IManagedObject, IManagedObjectBinary, IIdentified, QueriesUtil, IResultList, IFetchResponse, IOperation, OperationService, Realtime, OperationStatus, IEvent, EventService, EventBinaryService } from '@c8y/client';
import { RepositoryType, REPOSITORY_BINARY_TYPES } from './repository.model';
var RepositoryService = /** @class */ (function () {
    function RepositoryService(inventory, inventoryBinary, operation, alert, event, realtime, eventBinary) {
        this.inventory = inventory;
        this.inventoryBinary = inventoryBinary;
        this.operation = operation;
        this.alert = alert;
        this.event = event;
        this.realtime = realtime;
        this.eventBinary = eventBinary;
        this.dateFrom = new Date(0);
        this.dateTo = new Date(Date.now() + 86400000); // 1 day in the future
        this.queriesUtil = new QueriesUtil();
    }
    /**
     * Lists repository entries of given type.
     * @param type The type of repository entries to list.
     * @param options Extra listing options.
     */
    RepositoryService.prototype.listRepositoryEntries = function (type, options) {
        var defaultOrder = [{ name: 1 }];
        var defaultFilters = { type: type };
        var legacyFilters = { __has: "url" };
        var fullQuery = (options && options.query) || {};
        fullQuery = this.queriesUtil.addOrderbys(fullQuery, defaultOrder, 'prepend');
        fullQuery = this.queriesUtil.addAndFilter(fullQuery, defaultFilters);
        if (options && options.partialName) {
            fullQuery = this.queriesUtil.addAndFilter(fullQuery, { name: "*" + options.partialName + "*" });
        }
        if (options && options.skipLegacy) {
            fullQuery = this.queriesUtil.addAndFilter(fullQuery, { __not: legacyFilters });
        }
        var filters = tslib_1.__assign({ query: this.queriesUtil.buildQuery(fullQuery), pageSize: 50, withTotalPages: true }, ((options && options.params) || {}));
        return this.inventory.list(filters);
    };
    // TODO: merge with create()
    RepositoryService.prototype.save = function (data, type, mo) {
        if (mo === void 0) { mo = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var existingUrl, response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        switch (type) {
                            case RepositoryType.CONFIGURATION: {
                                Object.assign(mo, {
                                    type: RepositoryType.CONFIGURATION,
                                    configurationType: data.selected ? data.selected.configurationType : undefined,
                                    name: data.version,
                                    description: data.description,
                                    deviceType: data.deviceType,
                                    c8y_Global: {}
                                });
                                break;
                            }
                        }
                        existingUrl = mo.url;
                        if (!data.binary.url) return [3 /*break*/, 1];
                        mo.url = data.binary.url;
                        return [3 /*break*/, 3];
                    case 1:
                        if (!data.binary.file) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.inventoryBinary.create(data.binary.file, {
                                c8y_Global: {}
                            })];
                    case 2:
                        response = _a.sent();
                        mo.url = response.data.self;
                        _a.label = 3;
                    case 3:
                        if (mo.id) {
                            return [2 /*return*/, this.updateEntry(mo, existingUrl)];
                        }
                        return [2 /*return*/, this.createEntry(mo)];
                }
            });
        });
    };
    RepositoryService.prototype.create = function (modal, type) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (type) {
                    case RepositoryType.FIRMWARE:
                    case RepositoryType.SOFTWARE:
                        return [2 /*return*/, this.createFirmwareOrSoftware(modal, type)];
                }
                return [2 /*return*/];
            });
        });
    };
    RepositoryService.prototype.createFirmwareOrSoftware = function (modal, type) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var binary, binaryURL, repositoryEntry, repositoryBinary, mos, selectedId, _a, file, url, error_1;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        mos = [];
                        selectedId = modal.selected.id, _a = modal.binary, file = _a.file, url = _a.url;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 9, , 10]);
                        if (!file) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.saveBinary(file)];
                    case 2:
                        (binary = (_b.sent()).data);
                        (binaryURL = binary.self);
                        mos.push(binary);
                        return [3 /*break*/, 4];
                    case 3:
                        binaryURL = url;
                        _b.label = 4;
                    case 4: return [4 /*yield*/, this.createOrUpdateRepositoryEntry(modal, type)];
                    case 5:
                        (repositoryEntry = (_b.sent()).data);
                        if (isNil(selectedId)) {
                            mos.push(repositoryEntry);
                        }
                        return [4 /*yield*/, this.createRepositoryBinary(modal, binaryURL, type, repositoryEntry)];
                    case 6:
                        (repositoryBinary = (_b.sent()).data);
                        mos.push(repositoryBinary);
                        if (!file) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.linkBinary(repositoryBinary, binary)];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8: return [2 /*return*/, repositoryEntry];
                    case 9:
                        error_1 = _b.sent();
                        this.cleanUp(mos);
                        this.errorMsg();
                        // Propagate error
                        throw error_1;
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    RepositoryService.prototype.saveBinary = function (file) {
        return this.inventoryBinary.create(file, { c8y_Global: {} });
    };
    RepositoryService.prototype.createOrUpdateRepositoryEntry = function (modal, type) {
        var _a = modal.selected, id = _a.id, name = _a.name, description = modal.description;
        var mo = {
            id: id,
            name: id ? undefined : name,
            description: description,
            type: id ? undefined : type,
            c8y_Global: {}
        };
        return id
            ? this.inventory.update(mo)
            : this.inventory.create(mo);
    };
    RepositoryService.prototype.createRepositoryBinary = function (modal, binaryURL, type, parent) {
        var mo = this.prepareRepositoryBinaryMO(modal, binaryURL, type);
        return this.inventory.childAdditionsCreate(mo, parent);
    };
    RepositoryService.prototype.prepareRepositoryBinaryMO = function (modal, binaryURL, type) {
        var _a;
        var version = modal.version, patchVersion = modal.patchVersion, dependency = modal.dependency;
        var result = (_a = {
                type: REPOSITORY_BINARY_TYPES[type]
            },
            _a[type] = {
                url: binaryURL
            },
            _a.c8y_Global = {},
            _a);
        if (dependency) {
            set(result, [type, 'version'], patchVersion);
            assign(result, {
                c8y_Patch: {
                    dependency: dependency.c8y_Firmware.version
                }
            });
        }
        else {
            set(result, [type, 'version'], version);
        }
        return result;
    };
    RepositoryService.prototype.linkBinary = function (repositoryBinary, binary) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var repositoryBinaryId, binaryId;
            return tslib_1.__generator(this, function (_a) {
                repositoryBinaryId = repositoryBinary.id;
                if (binary) {
                    binaryId = binary.id;
                    return [2 /*return*/, this.inventory.childAdditionsAdd(binaryId, repositoryBinaryId)];
                }
                return [2 /*return*/];
            });
        });
    };
    RepositoryService.prototype.cleanUp = function (mosToDelete) {
        var _this = this;
        mosToDelete.forEach(function (mo) {
            var c8y_IsBinary = mo.c8y_IsBinary;
            isUndefined(c8y_IsBinary) ? _this.delete(mo) : _this.inventoryBinary.delete(mo);
        });
    };
    RepositoryService.prototype.delete = function (entity) {
        return this.inventory.delete(entity, { forceCascade: true });
    };
    RepositoryService.prototype.errorMsg = function () {
        var msg = gettext('Failed to save');
        this.alert.danger(msg);
    };
    RepositoryService.prototype.getBaseVersionsCount$ = function (entry) {
        if (this.isLegacyEntry(entry)) {
            return of(1);
        }
        return from(this.listBaseVersions(entry, { pageSize: 1, withTotalPages: true })).pipe(map(function (_a) {
            var paging = _a.paging;
            return paging.totalPages;
        }));
    };
    RepositoryService.prototype.getBaseVersionFromMO = function (mo) {
        return this.isPatch(mo) ? get(mo, 'c8y_Patch.dependency') : get(mo, 'c8y_Firmware.version');
    };
    RepositoryService.prototype.isPatch = function (mo) {
        return !!get(mo, 'c8y_Patch.dependency');
    };
    RepositoryService.prototype.getPatchVersionsCount$ = function (entry, baseVersion) {
        if (this.isLegacyEntry(baseVersion)) {
            return of(0);
        }
        return from(this.listPatchVersions(entry, baseVersion, { pageSize: 1, withTotalPages: true })).pipe(map(function (_a) {
            var paging = _a.paging;
            return paging.totalPages;
        }));
    };
    RepositoryService.prototype.isLegacyEntry = function (entry) {
        return Boolean(entry.url);
    };
    /**
     * Lists all versions (base and patch ones) of given top level entry.
     * Versions are ordered by creation time (assuming the earlier created, the older the version).
     * @param entry Top level repository entry.
     * @param params Additional query params.
     */
    RepositoryService.prototype.listAllVersions = function (entry, params) {
        if (params === void 0) { params = {}; }
        if (this.isLegacyEntry(entry)) {
            return this.getBaseVersionResultListForLegacyEntry(entry);
        }
        var VERSION_FILTER_ORDER = {
            __filter: {},
            __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]
        };
        return this.listChildren(entry, VERSION_FILTER_ORDER, params);
    };
    /**
     * Lists base versions of given top level entry.
     * Versions are ordered by creation time (assuming the earlier created, the older the version).
     * @param entry Top level repository entry.
     * @param params Additional query params.
     */
    RepositoryService.prototype.listBaseVersions = function (entry, params) {
        if (params === void 0) { params = {}; }
        if (this.isLegacyEntry(entry)) {
            return this.getBaseVersionResultListForLegacyEntry(entry);
        }
        var NO_PATCH_FILTER_ORDER = {
            __filter: {
                __not: { __has: 'c8y_Patch' }
            },
            __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]
        };
        return this.listChildren(entry, NO_PATCH_FILTER_ORDER, params);
    };
    /**
     * Lists patch versions of given base version under the entry.
     * Versions are ordered by creation time (assuming the earlier created, the older the version).
     * @param entry Top level repository entry.
     * @param baseVersion Base version.
     * @param params Additional query params.
     */
    RepositoryService.prototype.listPatchVersions = function (entry, baseVersion, params) {
        if (params === void 0) { params = {}; }
        var version = isString(baseVersion) ? baseVersion : get(baseVersion, 'c8y_Firmware.version');
        var PATCH_FILTER_ORDER = {
            __filter: {
                'c8y_Patch.dependency': version
            },
            __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]
        };
        return this.listChildren(entry, PATCH_FILTER_ORDER, params);
    };
    /**
     * Lists patch versions of given base version under the entry including the base version.
     * Versions are ordered by creation time (assuming the earlier created, the older the version).
     * In terms of legacy base version the entry gets transformed to fit the needed data model.
     * @param entry Top level repository entry.
     * @param baseVersion Base version.
     * @param params Additional query params.
     */
    RepositoryService.prototype.listBaseVersionAndPatches = function (entry, baseVersion, params) {
        if (params === void 0) { params = {}; }
        if (this.isLegacyEntry(entry)) {
            return Promise.resolve({
                data: [
                    Object.assign({
                        c8y_Firmware: {
                            version: entry.version,
                            url: entry.url
                        }
                    }, entry)
                ]
            });
        }
        var PATCH_FILTER_ORDER = {
            __filter: {
                __or: {
                    'c8y_Patch.dependency': baseVersion.c8y_Firmware.version,
                    'c8y_Firmware.version': baseVersion.c8y_Firmware.version
                }
            },
            __orderby: [{ 'c8y_Patch.dependency': 1 }, { 'c8y_Firmware.version': 1 }]
        };
        return this.listChildren(entry, PATCH_FILTER_ORDER, params);
    };
    RepositoryService.prototype.listChildren = function (entry, filters, params) {
        if (filters === void 0) { filters = {}; }
        if (params === void 0) { params = {}; }
        var childrenFilters = { __bygroupid: entry.id };
        var query = this.queriesUtil.addAndFilter(filters, childrenFilters);
        // FIXME: needed because of issue in forOf directive (...)
        params.withTotalPages = true;
        return this.inventory.listQuery(query, params);
    };
    /**
     * Fetches all items from the list starting with the provided page.
     * @param firstPage The first page of the list to fetch all items for.
     */
    RepositoryService.prototype.fetchAllItemsFromList = function (firstPage) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var allItems, _a, paging, items;
            var _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!!firstPage.then) return [3 /*break*/, 1];
                        allItems = tslib_1.__spread(firstPage);
                        return [3 /*break*/, 5];
                    case 1: return [4 /*yield*/, firstPage];
                    case 2:
                        _a = _c.sent(), paging = _a.paging, items = _a.data;
                        allItems = tslib_1.__spread(items);
                        _c.label = 3;
                    case 3:
                        if (!(paging && paging.nextPage)) return [3 /*break*/, 5];
                        return [4 /*yield*/, paging.next()];
                    case 4:
                        (_b = _c.sent(), paging = _b.paging, items = _b.data);
                        allItems = tslib_1.__spread(allItems, items);
                        return [3 /*break*/, 3];
                    case 5: return [2 /*return*/, allItems];
                }
            });
        });
    };
    /**
     * Gets top level repository entry managed object for base or patch version.
     * @param mo Base or patch version managed object with parents.
     */
    RepositoryService.prototype.getRepositoryEntryMO$ = function (mo) {
        if (!mo) {
            return of(undefined);
        }
        var _a = tslib_1.__read(get(mo, 'additionParents.references'), 1), reference = _a[0];
        var id = get(reference, 'managedObject.id');
        return id
            ? from(this.inventory.detail(id, { withChildren: false })).pipe(map(function (_a) {
                var data = _a.data;
                return data;
            }))
            : of(undefined);
    };
    /**
     * Gets base or patch version managed object.
     * @param deviceRepositoryFragment Device repository fragment.
     * @param type Top level repository entry type.
     * @param configuration Configuration object with options:
     * - **skipLegacy** - `boolean` - Exclude legacy entries.
     * - **filters** - `object` - Filter object.
     *
     * @deprecated as it doesn't support 'missing url' case
     */
    RepositoryService.prototype.getRepositoryBinaryMoByVersion = function (deviceRepositoryFragment, type, _a) {
        var _b;
        var _c = _a === void 0 ? {} : _a, _d = _c.skipLegacy, skipLegacy = _d === void 0 ? false : _d, _e = _c.filters, filters = _e === void 0 ? {} : _e;
        var version = deviceRepositoryFragment.version, url = deviceRepositoryFragment.url, name = deviceRepositoryFragment.name;
        var repositoryBinaryType = REPOSITORY_BINARY_TYPES[type];
        var query;
        var newModelBaseVersionQuery = (_b = {},
            _b[type + ".version"] = version,
            _b[type + ".url"] = url,
            _b.type = repositoryBinaryType,
            _b);
        var legacyVersionQuery = { url: url, type: type, name: name };
        filters = tslib_1.__assign({ withChildren: false, withParents: true }, filters);
        if (skipLegacy) {
            query = {
                __and: tslib_1.__assign({}, newModelBaseVersionQuery)
            };
        }
        else {
            query = {
                __or: [{ __and: tslib_1.__assign({}, newModelBaseVersionQuery) }, { __and: tslib_1.__assign({}, legacyVersionQuery) }]
            };
        }
        return this.inventory.listQuery(query, filters).then(function (_a) {
            var data = _a.data;
            return head(data);
        });
    };
    RepositoryService.prototype.getBinaryName$ = function (binaryUrl) {
        if (!binaryUrl) {
            return of('---');
        }
        var binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);
        if (!binaryId) {
            return of(binaryUrl);
        }
        return this.inventory.detail$(binaryId).pipe(map(function (mo) { return mo.name; }));
    };
    /**
     * Generates an inventory query object which can be used to find
     * repository entries of specified type matching the type of provided device.
     * @param repositoryType The type of repository entries which will be queried with the generated query.
     * @param device The device for which matching repository entries will be queried with the generated query.
     */
    RepositoryService.prototype.getDeviceTypeQuery = function (repositoryType, device) {
        var result = { type: repositoryType };
        if (device.type) {
            if (repositoryType === RepositoryType.CONFIGURATION) {
                result = this.queriesUtil.addAndFilter(result, {
                    __or: [{ deviceType: device.type }, { __not: { __has: "deviceType" } }]
                });
            }
            else {
                result = this.queriesUtil.addAndFilter(result, {
                    __or: [{ 'c8y_Filter.type': device.type }, { __not: { __has: "c8y_Filter.type" } }]
                });
            }
        }
        return result;
    };
    /**
     * Generates an inventory query object which can be used to find configuration repository entries
     * matching the type of provided device and specified configuration type.
     * @param device The device for which matching repository entries will be queried with the generated query.
     * @param configurationType Configuration type for which matching repository entries will be queried with the generated query.
     */
    RepositoryService.prototype.getConfigurationTypeQuery = function (device, configurationType) {
        var query = this.getDeviceTypeQuery(RepositoryType.CONFIGURATION, device);
        return this.queriesUtil.addAndFilter(query, {
            __or: [{ configurationType: configurationType }, { __not: { __has: "configurationType" } }]
        });
    };
    /**
     * Gets the list of software installed in the device in the uniform format.
     * Supports c8y_SoftwareList and c8y_Software fragments.
     * @param device The device whose software list should be returned.
     */
    RepositoryService.prototype.getDeviceSoftwareList = function (device) {
        if (device.c8y_SoftwareList) {
            return cloneDeep(device.c8y_SoftwareList);
        }
        if (device.c8y_Software) {
            return _map(device.c8y_Software, function (version, name) { return ({ name: name, version: version }); });
        }
        return [];
    };
    /**
     * Prepares a software update operation for given device and the list of changes, and sends it to the device.
     * @param device The device which the operation should be prepared for and sent to.
     * @param changes The list of software changes which should be applied.
     */
    RepositoryService.prototype.createSoftwareUpdateOperation = function (device, changes) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var operation;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        operation = this.getSoftwareUpdateOperation(device, changes);
                        return [4 /*yield*/, this.operation.create(operation)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    /**
     * Prepares a software update operation for given device and changes.
     * Returned operation type depends on device's supported operations.
     * Supports c8y_SoftwareUpdate, c8y_SoftwareList, and c8y_Software operations.
     * @param device The device for which operation should be prepared.
     * @param changes The list of software changes which should be applied.
     */
    RepositoryService.prototype.getSoftwareUpdateOperation = function (device, changes) {
        var operation = {
            deviceId: device.id,
            description: "Apply software changes: " + changes
                .map(function (change) {
                return change.action + " \"" + change.name + "\"" + (change.version ? " (version: " + change.version + ")" : '');
            })
                .join(', ')
        };
        if (device.c8y_SupportedOperations.includes('c8y_SoftwareUpdate')) {
            operation.c8y_SoftwareUpdate = cloneDeep(changes);
        }
        else if (device.c8y_SupportedOperations.includes('c8y_SoftwareList')) {
            operation.c8y_SoftwareList = cloneDeep(device.c8y_SoftwareList) || [];
            changes.forEach(function (change) {
                var deviceSoftware = pick(change, ['name', 'version', 'url']);
                if (change.action === 'delete') {
                    remove(operation.c8y_SoftwareList, deviceSoftware);
                }
                if (change.action === 'install') {
                    operation.c8y_SoftwareList.push(deviceSoftware);
                }
            });
        }
        else if (device.c8y_SupportedOperations.includes('c8y_Software')) {
            operation.c8y_Software = cloneDeep(device.c8y_Software) || {};
            changes.forEach(function (change) {
                if (change.action === 'delete') {
                    delete operation.c8y_Software[change.name];
                }
                if (change.action === 'install') {
                    operation.c8y_Software[change.name] = change.version;
                }
            });
        }
        return operation;
    };
    /**
     * Extracts the list of device software changes from given operation in the context of given device.
     * @param operation The operation from which the list should be extracted.
     * @param device The target device of the operation.
     */
    RepositoryService.prototype.getDeviceSoftwareChangesFromOperation = function (operation, device) {
        if (operation.c8y_SoftwareUpdate) {
            return cloneDeep(operation.c8y_SoftwareUpdate);
        }
        if (operation.c8y_SoftwareList) {
            return this.getDeviceSoftwareChangesFromSoftwareListOperation(operation, device);
        }
        if (operation.c8y_Software) {
            return this.getDeviceSoftwareChangesFromSoftwareOperation(operation, device);
        }
        return [];
    };
    /**
     * Prepares a firmware update operation for given device and the selected repository binary, and sends it to the device.
     * @param device The device which the operation should be prepared for and sent to.
     * @param selectedOption The selected repository binary option.
     */
    RepositoryService.prototype.createFirmwareUpdateOperation = function (device, selectedOption) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var operation;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        operation = this.getFirmwareUpdateOperation(device, selectedOption);
                        return [4 /*yield*/, this.operation.create(operation)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    /**
     * Prepares a firmware update operation for given device and selected version.
     * Supports c8y_Firmware operation.
     * @param device The device for which operation should be prepared.
     * @param selectedOption Selected firmware version.
     */
    RepositoryService.prototype.getFirmwareUpdateOperation = function (device, selectedOption) {
        delete selectedOption.id;
        var operation = {
            deviceId: device.id,
            description: "Update firmware to: \"" + selectedOption.name + "\"" + (selectedOption.version ? " (version: " + selectedOption.version + ")" : ''),
            c8y_Firmware: tslib_1.__assign({}, selectedOption)
        };
        return operation;
    };
    /**
     * Prepares a configuration file upload operation for given device and configuration type.
     * @param device The device for which operation should be prepared.
     * @param configurationType Selected configuration type.
     * @param isLegacy  A legacy operation is created without a configurationType.
     */
    RepositoryService.prototype.getUploadConfigurationFileOperation = function (device, configurationType, isLegacy) {
        if (isLegacy === void 0) { isLegacy = false; }
        if (isLegacy) {
            return {
                deviceId: device.id,
                description: "Retrieve configuration snapshot from device " + device.name,
                c8y_UploadConfigFile: {}
            };
        }
        return {
            deviceId: device.id,
            description: "Retrieve " + configurationType + " configuration snapshot from device " + device.name,
            c8y_UploadConfigFile: {
                type: configurationType
            }
        };
    };
    /**
     * Prepares a configuration file download operation for given device and configuration type.
     * @param device The device for which operation should be prepared.
     * @param configurationType Selected configuration type.
     * @param binaryUrl The url of a binary to be downloaded.
     * @param isLegacy A legacy operation is created without a configurationType.
     */
    RepositoryService.prototype.getDownloadConfigurationFileOperation = function (device, configurationType, configSnapshot, isLegacy) {
        if (isLegacy === void 0) { isLegacy = false; }
        if (isLegacy) {
            return {
                deviceId: device.id,
                description: "Send configuration snapshot " + configSnapshot.name + " to device " + device.name,
                c8y_DownloadConfigFile: {
                    url: configSnapshot.binaryUrl,
                    c8y_ConfigurationDump: {
                        id: configSnapshot.id
                    }
                }
            };
        }
        return {
            deviceId: device.id,
            description: "Send configuration snapshot " + configSnapshot.name + " of configuration type " + configurationType + " to device " + device.name,
            c8y_DownloadConfigFile: {
                url: configSnapshot.binaryUrl,
                type: configurationType
            }
        };
    };
    /**
     * Gets the last firmware update operation for given device.
     * Looks for c8y_Firmware operations.
     * @param deviceId The ID of the device to find an operation for.
     */
    RepositoryService.prototype.getLastFirmwareUpdateOperation = function (deviceId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filters;
            return tslib_1.__generator(this, function (_a) {
                filters = {
                    deviceId: deviceId,
                    dateFrom: new Date(0).toISOString(),
                    dateTo: new Date(Date.now()).toISOString(),
                    revert: true,
                    pageSize: 1
                };
                return [2 /*return*/, this.getFirstMatchingOperation([tslib_1.__assign({}, filters, { fragmentType: 'c8y_Firmware' })])];
            });
        });
    };
    /**
     * Gets the last software update operation for given device.
     * Looks for c8y_SoftwareUpdate, c8y_SoftwareList, or c8y_Software operations.
     * @param deviceId The ID of the device to find an operation for.
     */
    RepositoryService.prototype.getLastSoftwareUpdateOperation = function (deviceId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filters;
            return tslib_1.__generator(this, function (_a) {
                filters = {
                    deviceId: deviceId,
                    dateFrom: new Date(0).toISOString(),
                    dateTo: new Date(Date.now()).toISOString(),
                    revert: true,
                    pageSize: 1
                };
                return [2 /*return*/, this.getFirstMatchingOperation([
                        tslib_1.__assign({}, filters, { fragmentType: 'c8y_SoftwareUpdate' }),
                        tslib_1.__assign({}, filters, { fragmentType: 'c8y_SoftwareList' }),
                        tslib_1.__assign({}, filters, { fragmentType: 'c8y_Software' })
                    ])];
            });
        });
    };
    /**
     * Iterates over the list of filters and queries the operations.
     * If a query returns at least one operation, the first one will be returned.
     * Otherwise the next query will be performed.
     * If none of the queries returns any operation, null will be returned.
     * @param filtersList The list of filters for the queries.
     */
    RepositoryService.prototype.getFirstMatchingOperation = function (filtersList) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var matchingOperation, filtersList_1, filtersList_1_1, filters, operations, e_1_1;
            var e_1, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        matchingOperation = null;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, 7, 8]);
                        filtersList_1 = tslib_1.__values(filtersList), filtersList_1_1 = filtersList_1.next();
                        _b.label = 2;
                    case 2:
                        if (!!filtersList_1_1.done) return [3 /*break*/, 5];
                        filters = filtersList_1_1.value;
                        return [4 /*yield*/, this.operation.list(filters)];
                    case 3:
                        operations = (_b.sent()).data;
                        if (operations.length) {
                            matchingOperation = operations[0];
                            return [3 /*break*/, 5];
                        }
                        _b.label = 4;
                    case 4:
                        filtersList_1_1 = filtersList_1.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _b.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (filtersList_1_1 && !filtersList_1_1.done && (_a = filtersList_1.return)) _a.call(filtersList_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/, matchingOperation];
                }
            });
        });
    };
    /**
     * Creates the operation and returns an observable to track its progress.
     * Fails the observable when the operation returns FAILED status.
     * Completes the observable when the operation returns SUCCESSFUL status.
     * @param operation The operation to create and track.
     */
    RepositoryService.prototype.createObservedOperation = function (operation) {
        var _this = this;
        return from(this.operation.create(operation)).pipe(map(function (_a) {
            var data = _a.data;
            return data;
        }), take(1), switchMap(function (createdOperation) { return _this.observeOperation(createdOperation); }));
    };
    /**
     * Returns an observable to track progress of given operation.
     * Fails the observable when the operation returns FAILED status.
     * Completes the observable when the operation returns SUCCESSFUL status.
     * @param operation The operation to be observed.
     */
    RepositoryService.prototype.observeOperation = function (operation) {
        var _this = this;
        var observedOperation$ = of(operation);
        var operationUpdates$ = observedOperation$.pipe(switchMap(function (observedOperation) {
            return _this.realtime.observable("/operations/" + observedOperation.deviceId);
        }), map(function (_a) {
            var data = _a.data;
            return data;
        }), withLatestFrom(observedOperation$), filter(function (_a) {
            var _b = tslib_1.__read(_a, 2), operationUpdate = _b[0], observedOperation = _b[1];
            return operationUpdate.id === observedOperation.id;
        }), switchMap(function (_a) {
            var _b = tslib_1.__read(_a, 1), operationUpdate = _b[0];
            if (operationUpdate.status === OperationStatus.FAILED) {
                return throwError(operationUpdate);
            }
            return of(operationUpdate);
        }), takeWhile(function (operationUpdate) { return operationUpdate.status !== OperationStatus.SUCCESSFUL; }, true));
        return merge(observedOperation$, operationUpdates$);
    };
    /**
     * Gets a single event with latest creationTime for the given device Id and event type.
     * @param deviceId The device Id for which the events should be queried.
     * @param type Event type.
     */
    RepositoryService.prototype.getLatestConfigurationEvent = function (deviceId, type) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var eventFilter, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eventFilter = {
                            source: deviceId,
                            type: type,
                            dateFrom: this.dateFrom.toISOString(),
                            dateTo: this.dateTo.toISOString(),
                            pageSize: 1
                        };
                        return [4 /*yield*/, this.event.list(eventFilter)];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data[0]];
                }
            });
        });
    };
    /**
     * Gets a list of operations for the given device Id, and operation type.
     * @param deviceId The device Id for which the operation should be queried.
     * @param operationType Operation type fragment.
     */
    RepositoryService.prototype.getConfigFileOperationList = function (deviceId, operationType) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var operationFilter;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        operationFilter = {
                            deviceId: deviceId,
                            fragmentType: operationType,
                            dateFrom: this.dateFrom.toISOString(),
                            dateTo: this.dateTo.toISOString(),
                            revert: true,
                            pageSize: 2000
                        };
                        return [4 /*yield*/, this.operation.list(operationFilter)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    /**
     * Gets latest uploaded configuration snapshot for the given device, and configuration type.
     * @param device The device for which the configuration snapshot was uploaded.
     * @param configurationType Selected configuration type.
     */
    RepositoryService.prototype.getConfigSnapshot = function (device, configurationType) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var event, configSnapshot, _a, ex_1, msg;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getLatestConfigurationEvent(device.id, configurationType)];
                    case 1:
                        event = _b.sent();
                        if (!event) return [3 /*break*/, 6];
                        configSnapshot = {
                            time: event.time,
                            name: event.text,
                            deviceType: device.type,
                            configurationType: configurationType
                        };
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 5, , 6]);
                        _a = configSnapshot;
                        return [4 /*yield*/, this.eventBinary.download(event)];
                    case 3: return [4 /*yield*/, (_b.sent()).text()];
                    case 4:
                        _a.binary = _b.sent();
                        if (event.c8y_IsBinary) {
                            configSnapshot.binaryType = event.c8y_IsBinary.type;
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        ex_1 = _b.sent();
                        msg = gettext('Could not get the binary.');
                        this.alert.danger(msg);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/, configSnapshot];
                }
            });
        });
    };
    RepositoryService.prototype.getLegacyConfigSnapshot = function (deviceId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var configSnapshot, mo, device, snapshotId, ex_2, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.inventory.detail(deviceId, { withChildren: false })];
                    case 1:
                        device = (_b.sent()).data;
                        snapshotId = device.c8y_ConfigurationDump && device.c8y_ConfigurationDump.id;
                        if (!snapshotId) {
                            return [2 /*return*/];
                        }
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.inventory.detail(snapshotId)];
                    case 3:
                        mo = (_b.sent()).data;
                        return [3 /*break*/, 5];
                    case 4:
                        ex_2 = _b.sent();
                        return [3 /*break*/, 5];
                    case 5:
                        if (!mo) return [3 /*break*/, 7];
                        configSnapshot = {
                            time: mo.creationTime,
                            name: mo.name
                        };
                        _a = configSnapshot;
                        return [4 /*yield*/, this.getBinaryText(mo.url, { allowExternal: false })];
                    case 6:
                        _a.binary = _b.sent();
                        _b.label = 7;
                    case 7: return [2 /*return*/, configSnapshot];
                }
            });
        });
    };
    RepositoryService.prototype.getBinaryFile = function (binaryUrl, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var binaryId, data, binary, _a, fileBinary;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);
                        if (!binaryId && !options.allowExternal) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.inventory.detail(binaryId)];
                    case 1:
                        data = (_b.sent()).data;
                        if (!!!binaryId) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getBinary(binaryId)];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = this.fetchExternalBinary(binaryUrl);
                        _b.label = 4;
                    case 4:
                        binary = _a;
                        fileBinary = new File([binary], data.name, { type: data.contentType });
                        return [2 /*return*/, fileBinary];
                }
            });
        });
    };
    RepositoryService.prototype.getBinaryText = function (binaryUrl, options) {
        var binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);
        if (!binaryId && options.allowExternal) {
            return this.fetchExternalBinary(binaryUrl);
        }
        return this.getBinary(binaryId);
    };
    RepositoryService.prototype.getBinary = function (binaryId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var binary, res, ex_3, msg;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.inventoryBinary.download(binaryId)];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.text()];
                    case 2:
                        binary = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_3 = _a.sent();
                        msg = gettext('Could not get the binary.');
                        this.alert.danger(msg);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, binary];
                }
            });
        });
    };
    RepositoryService.prototype.fetchExternalBinary = function (url) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var configBinary, res, ex_4, msg;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        return [4 /*yield*/, fetch(url)];
                    case 1:
                        res = _a.sent();
                        if (!(res.status === 200)) return [3 /*break*/, 3];
                        return [4 /*yield*/, res.text()];
                    case 2:
                        configBinary = _a.sent();
                        _a.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        ex_4 = _a.sent();
                        msg = gettext('Could not get the external binary.');
                        this.alert.danger(msg);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/, configBinary];
                }
            });
        });
    };
    RepositoryService.prototype.createEntry = function (mo) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var binaryId, newMo;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.inventoryBinary.getIdFromUrl(mo.url)];
                    case 1:
                        binaryId = _a.sent();
                        return [4 /*yield*/, this.inventory.create(mo)];
                    case 2:
                        newMo = _a.sent();
                        if (!binaryId) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.inventory.childAdditionsAdd(binaryId, newMo.data)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/, newMo];
                }
            });
        });
    };
    RepositoryService.prototype.updateEntry = function (mo, url) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var existingBinaryId, newBinaryId, id;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.inventoryBinary.getIdFromUrl(url)];
                    case 1:
                        existingBinaryId = _a.sent();
                        return [4 /*yield*/, this.inventoryBinary.getIdFromUrl(mo.url)];
                    case 2:
                        newBinaryId = _a.sent();
                        if (!(existingBinaryId && existingBinaryId !== newBinaryId)) return [3 /*break*/, 4];
                        id = this.inventoryBinary.getIdFromUrl(url);
                        return [4 /*yield*/, this.inventoryBinary.delete(id)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        if (!newBinaryId) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.inventory.childAdditionsAdd(newBinaryId, mo)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/, this.inventory.update(mo)];
                }
            });
        });
    };
    RepositoryService.prototype.getBaseVersionResultListForLegacyEntry = function (entry) {
        var _a;
        return Promise.resolve({
            res: {},
            data: [
                tslib_1.__assign({}, entry, (_a = {}, _a[entry.type] = {
                    version: entry.version,
                    url: entry.url
                }, _a))
            ]
        });
    };
    RepositoryService.prototype.getDeviceSoftwareChangesFromSoftwareListOperation = function (operation, device) {
        var changes = [];
        forEach(device.c8y_SoftwareList, function (deviceSoftware) {
            var operationSoftware = find(operation.c8y_SoftwareList, { name: deviceSoftware.name });
            if (deviceSoftware.version !== operationSoftware.version) {
                changes.push(tslib_1.__assign({}, deviceSoftware, { action: 'delete' }));
            }
        });
        forEach(operation.c8y_SoftwareList, function (operationSoftware) {
            var deviceSoftware = find(device.c8y_SoftwareList, { name: operationSoftware.name });
            if (operationSoftware.version !== deviceSoftware.version) {
                changes.push(tslib_1.__assign({}, operationSoftware, { action: 'install' }));
            }
        });
        return changes;
    };
    RepositoryService.prototype.getDeviceSoftwareChangesFromSoftwareOperation = function (operation, device) {
        var changes = [];
        forEach(device.c8y_Software, function (deviceSoftwareVersion, deviceSoftwareName) {
            if (operation.c8y_Software[deviceSoftwareName] !== deviceSoftwareVersion) {
                changes.push({
                    name: deviceSoftwareName,
                    version: deviceSoftwareVersion,
                    action: 'delete'
                });
            }
        });
        forEach(operation.c8y_Software, function (operationSoftwareVersion, operationSoftwareName) {
            if (device.c8y_Software[operationSoftwareName] !== operationSoftwareVersion) {
                changes.push({
                    name: operationSoftwareName,
                    version: operationSoftwareVersion,
                    action: 'install'
                });
            }
        });
        return changes;
    };
    RepositoryService.ctorParameters = function () { return [
        { type: InventoryService },
        { type: InventoryBinaryService },
        { type: OperationService },
        { type: AlertService },
        { type: EventService },
        { type: Realtime },
        { type: EventBinaryService }
    ]; };
    RepositoryService = tslib_1.__decorate([
        Injectable()
    ], RepositoryService);
    return RepositoryService;
}());
export { RepositoryService };
//# sourceMappingURL=data:application/json;base64,