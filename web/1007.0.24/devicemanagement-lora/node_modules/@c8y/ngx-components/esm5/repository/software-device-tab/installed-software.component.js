import * as tslib_1 from "tslib";
import { Component, Output, Input, EventEmitter } from '@angular/core';
import { from, of } from 'rxjs';
import { shareReplay, map, switchMap, distinctUntilChanged } from 'rxjs/operators';
import { BsModalService } from 'ngx-bootstrap/modal';
import { IManagedObject, InventoryService, IOperation } from '@c8y/client';
import { gettext, ModalSelectionMode } from '@c8y/ngx-components';
import { RepositoryService } from '../repository.service';
import { RepositoryType } from './../repository.model';
import { RepositorySelectModalComponent } from '../select-modal/repository-select-modal.component';
var InstalledSoftwareComponent = /** @class */ (function () {
    function InstalledSoftwareComponent(repository, inventory, bsModal) {
        this.repository = repository;
        this.inventory = inventory;
        this.bsModal = bsModal;
        this.changes = new EventEmitter();
    }
    InstalledSoftwareComponent.prototype.installSoftware = function () {
        var _this = this;
        this.displaySoftwareSelectModal({
            title: gettext('Install software'),
            labels: { ok: gettext('Install') },
            repositoryEntriesWithVersions$: of([]),
            repositoryEntriesWithVersionsFn$: function (modal) {
                return _this.getAllSoftwaresWithVersions$(modal.content.searchTerm);
            }
        }).subscribe(function (softwareToInstall) {
            _this.emitSoftwareInstall(softwareToInstall);
        });
    };
    InstalledSoftwareComponent.prototype.updateSoftware = function (softwareToRemove) {
        var _this = this;
        this.displaySoftwareSelectModal({
            title: gettext('Update software'),
            labels: { ok: gettext('Update') },
            showFilter: false,
            repositoryEntriesWithVersions$: this.getSingleSoftwareWithVersions$(softwareToRemove)
        }).subscribe(function (softwareToInstall) {
            _this.emitSoftwareUpdate(softwareToRemove, softwareToInstall);
        });
    };
    InstalledSoftwareComponent.prototype.removeSoftware = function (softwareToRemove) {
        this.emitSoftwareRemoval(softwareToRemove);
    };
    InstalledSoftwareComponent.prototype.getAllSoftwaresWithVersions$ = function (searchTerm$) {
        var _this = this;
        return searchTerm$.pipe(distinctUntilChanged(), switchMap(function (searchTerm) {
            return _this.repository.listRepositoryEntries(RepositoryType.SOFTWARE, {
                query: _this.deviceTypeQuery,
                partialName: searchTerm,
                params: { pageSize: 100 }
            });
        }), map(function (_a) {
            var data = _a.data;
            return data;
        }), map(function (softwares) { return _this.attachVersions(softwares); }), shareReplay(1));
    };
    InstalledSoftwareComponent.prototype.getSingleSoftwareWithVersions$ = function (software) {
        var _this = this;
        return from(this.repository.listRepositoryEntries(RepositoryType.SOFTWARE, {
            query: { name: software.name }
        })).pipe(map(function (_a) {
            var data = _a.data;
            return data;
        }), map(function (softwares) { return _this.attachVersions(softwares); }), shareReplay(1));
    };
    InstalledSoftwareComponent.prototype.attachVersions = function (softwares) {
        var _this = this;
        softwares.forEach(function (software) {
            software.versions = _this.repository.listBaseVersions(software);
        });
        return softwares;
    };
    InstalledSoftwareComponent.prototype.displaySoftwareSelectModal = function (initialStateOverrides) {
        var initialState = tslib_1.__assign({ repositoryType: RepositoryType.SOFTWARE, subTitle: gettext('Available softwares matching the device type'), mode: ModalSelectionMode.SINGLE, icon: 'c8y-tools', disableSelected: false, selected: this.softwareList }, initialStateOverrides);
        var modal = this.bsModal.show(RepositorySelectModalComponent, {
            ignoreBackdropClick: true,
            class: 'modal-sm',
            initialState: initialState
        });
        if (initialStateOverrides.repositoryEntriesWithVersionsFn$) {
            modal.content.repositoryEntriesWithVersions$ = initialStateOverrides.repositoryEntriesWithVersionsFn$(modal);
        }
        modal.content.load.next();
        return modal.content.resultEmitter;
    };
    InstalledSoftwareComponent.prototype.emitSoftwareInstall = function (_a) {
        var name = _a.name, version = _a.version, url = _a.url;
        this.changes.emit([{ name: name, version: version, url: url, action: 'install' }]);
    };
    InstalledSoftwareComponent.prototype.emitSoftwareUpdate = function (softwareToRemove, softwareToInstall) {
        this.emitSoftwareRemoval(softwareToRemove);
        this.emitSoftwareInstall(softwareToInstall);
    };
    InstalledSoftwareComponent.prototype.emitSoftwareRemoval = function (_a) {
        var name = _a.name, version = _a.version, url = _a.url;
        this.changes.emit([{ name: name, version: version, url: url, action: 'delete' }]);
    };
    InstalledSoftwareComponent.ctorParameters = function () { return [
        { type: RepositoryService },
        { type: InventoryService },
        { type: BsModalService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], InstalledSoftwareComponent.prototype, "softwareList", void 0);
    tslib_1.__decorate([
        Input()
    ], InstalledSoftwareComponent.prototype, "deviceSoftwareChanges", void 0);
    tslib_1.__decorate([
        Input()
    ], InstalledSoftwareComponent.prototype, "deviceSoftwareChangesOperation", void 0);
    tslib_1.__decorate([
        Input()
    ], InstalledSoftwareComponent.prototype, "deviceSoftwareChangesInProgress", void 0);
    tslib_1.__decorate([
        Input()
    ], InstalledSoftwareComponent.prototype, "deviceTypeQuery", void 0);
    tslib_1.__decorate([
        Output()
    ], InstalledSoftwareComponent.prototype, "changes", void 0);
    InstalledSoftwareComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-installed-software',
            template: "<div class=\"card\">\n  <div class=\"card-header separator\">\n    <h4 class=\"card-title\" translate>Installed software</h4>\n  </div>\n\n  <fieldset *ngIf=\"deviceSoftwareChangesOperation\" class=\"card-block bg-gray-white\">\n    <c8y-single-operation [operation]=\"deviceSoftwareChangesOperation\"></c8y-single-operation>\n  </fieldset>\n\n  <fieldset>\n    <!-- EMPTY STATE -->\n    <div class=\"card-block\" *ngIf=\"softwareList.length === 0\">\n      <div class=\"c8y-empty-state text-center m-t-16\">\n        <h1 class=\"c8y-icon c8y-icon-tools c8y-icon-duocolor\"></h1>\n        <p>\n          <strong translate>No software installed.</strong> <br />\n          <small translate>Click below to install software into this device.</small>\n        </p>\n      </div>\n    </div>\n\n    <!-- NOT EMPTY STATE -->\n    <ng-container *ngIf=\"softwareList.length > 0\">\n      <c8y-device-software-list\n        [softwareList]=\"softwareList\"\n        [deviceSoftwareChanges]=\"deviceSoftwareChanges\"\n        (update)=\"updateSoftware($event)\"\n        (remove)=\"removeSoftware($event)\"\n        class=\"d-block p-l-16 p-r-16\"\n      >\n      </c8y-device-software-list>\n    </ng-container>\n  </fieldset>\n\n  <!-- INSTALL SOFTWARE-->\n  <div class=\"card-footer\">\n    <button\n      class=\"btn btn-add-block m-0\"\n      title=\"{{ 'Install software' | translate }}\"\n      (click)=\"installSoftware()\"\n      [disabled]=\"deviceSoftwareChangesInProgress\"\n    >\n      <i c8yIcon=\"plus-circle\"></i>\n      {{ 'Install software' | translate }}\n    </button>\n  </div>\n</div>\n"
        })
    ], InstalledSoftwareComponent);
    return InstalledSoftwareComponent;
}());
export { InstalledSoftwareComponent };
//# sourceMappingURL=data:application/json;base64,