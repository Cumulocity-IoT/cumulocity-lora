import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { IManagedObject, InventoryService, IOperation, IResultList, OperationService, OperationStatus, QueriesUtil } from '@c8y/client';
import { AlertService } from '@c8y/ngx-components';
import { sortBy, toArray, get } from 'lodash-es';
var DeviceProfileService = /** @class */ (function () {
    function DeviceProfileService(inventoryService, operationService, alertService) {
        this.inventoryService = inventoryService;
        this.operationService = operationService;
        this.alertService = alertService;
        this.dateFrom = new Date(0);
        this.dateTo = new Date(Date.now() + 86400000); // 1 day in the future
        this.queriesUtil = new QueriesUtil();
    }
    DeviceProfileService.prototype.createDeviceProfile = function (deviceProfile) {
        return this.inventoryService.create(deviceProfile);
    };
    DeviceProfileService.prototype.getDeviceProfilesByDeviceType = function (deviceType) {
        var deviceTypeFilter = {
            __or: [{ 'c8y_Filter.type': deviceType }, { __not: { __has: 'c8y_Filter.type' } }]
        };
        return this.getDeviceProfiles(deviceTypeFilter);
    };
    DeviceProfileService.prototype.getDeviceProfiles = function (andQuery) {
        var query = {
            type: 'c8y_Profile'
        };
        var filter = {
            pageSize: 100,
            withTotalPages: true
        };
        query = this.queriesUtil.addAndFilter(query, andQuery || {});
        return this.inventoryService.listQuery(query, filter);
    };
    DeviceProfileService.prototype.getProfileOperation = function (deviceId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filter, operation;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filter = {
                            deviceId: deviceId,
                            fragmentType: 'c8y_DeviceProfile',
                            dateFrom: this.dateFrom.toISOString(),
                            dateTo: this.dateTo.toISOString(),
                            revert: true,
                            pageSize: 1
                        };
                        return [4 /*yield*/, this.operationService.list(filter)];
                    case 1:
                        operation = (_a.sent()).data[0];
                        return [2 /*return*/, operation && operation.status !== OperationStatus.SUCCESSFUL ? operation : undefined];
                }
            });
        });
    };
    DeviceProfileService.prototype.createProfileOperation = function (device, deviceProfile) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var operation, operationCfg, data, ex_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        operationCfg = {
                            deviceId: device.id,
                            profileId: deviceProfile.id,
                            profileName: deviceProfile.name,
                            c8y_DeviceProfile: deviceProfile.c8y_DeviceProfile,
                            description: "Assign device profile " + deviceProfile.name + " to device " + device.name
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.operationService.create(operationCfg)];
                    case 2:
                        data = (_a.sent()).data;
                        operation = data;
                        return [3 /*break*/, 4];
                    case 3:
                        ex_1 = _a.sent();
                        this.alertService.addServerFailure(ex_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, operation];
                }
            });
        });
    };
    DeviceProfileService.prototype.getFirmwareItems = function (device, selectedProfile) {
        var deviceFirmware = device.c8y_Firmware;
        var profileFirmware = get(selectedProfile, 'c8y_DeviceProfile.firmware');
        var deviceItems = [];
        var profileItems = [];
        if (deviceFirmware) {
            deviceItems.push(deviceFirmware);
        }
        if (profileFirmware) {
            profileItems.push(profileFirmware);
        }
        return this.createProfileComparison(deviceItems, profileItems, 'version');
    };
    DeviceProfileService.prototype.getSoftwareItems = function (device, selectedProfile) {
        var deviceSoftware = device.c8y_SoftwareList;
        var profileSoftware = get(selectedProfile, 'c8y_DeviceProfile.software');
        return this.createProfileComparison(deviceSoftware, profileSoftware, 'version');
    };
    DeviceProfileService.prototype.getConfigurationItems = function (device, selectedProfile) {
        var deviceConfiguration = [];
        Object.keys(device).forEach(function (key) {
            if (key.slice(0, 18) === 'c8y_Configuration_') {
                deviceConfiguration.push(device[key]);
            }
        });
        var profileConfiguration = get(selectedProfile, 'c8y_DeviceProfile.configuration');
        return this.createProfileComparison(deviceConfiguration, profileConfiguration, 'type');
    };
    DeviceProfileService.prototype.createProfileComparison = function (deviceItems, profileItems, propToCompare) {
        if (deviceItems === void 0) { deviceItems = []; }
        if (profileItems === void 0) { profileItems = []; }
        var comparisonObj = this.createProfileComparisonFromDeviceItems(deviceItems, propToCompare);
        var extendedComparisonObj = this.extendProfileComparisonWithProfileItems(comparisonObj, profileItems, propToCompare);
        return sortBy(toArray(extendedComparisonObj), 'name');
    };
    DeviceProfileService.prototype.createProfileComparisonFromDeviceItems = function (deviceItems, propToCompare) {
        var deviceItemsObject = {};
        deviceItems.forEach(function (item) {
            var _a;
            Object.assign(deviceItemsObject, (_a = {},
                _a[item.name] = {
                    name: item.name,
                    profileVersion: undefined,
                    deviceVersion: item[propToCompare]
                },
                _a));
        });
        return deviceItemsObject;
    };
    DeviceProfileService.prototype.extendProfileComparisonWithProfileItems = function (comparisonObj, profileItems, propToCompare) {
        profileItems.forEach(function (item) {
            var _a;
            if (comparisonObj[item.name]) {
                comparisonObj[item.name].profileVersion = item[propToCompare];
            }
            else {
                Object.assign(comparisonObj, (_a = {},
                    _a[item.name] = {
                        name: item.name,
                        profileVersion: item[propToCompare],
                        deviceVersion: undefined
                    },
                    _a));
            }
        });
        return comparisonObj;
    };
    DeviceProfileService.ctorParameters = function () { return [
        { type: InventoryService },
        { type: OperationService },
        { type: AlertService }
    ]; };
    DeviceProfileService = tslib_1.__decorate([
        Injectable()
    ], DeviceProfileService);
    return DeviceProfileService;
}());
export { DeviceProfileService };
//# sourceMappingURL=data:application/json;base64,