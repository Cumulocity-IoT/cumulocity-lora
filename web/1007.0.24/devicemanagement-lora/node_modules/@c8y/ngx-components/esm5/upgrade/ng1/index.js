import { NgZone } from '@angular/core';
import { downgradeInjectable } from '@angular/upgrade/static';
import * as angular from 'angular';
import { c8yAlertDecorator } from './alert.decorator';
import { appLogsAutoRefreshComponent, bootstrapComponent, dataGridComponent, impactProviderSettingsComponent, userTotpComponent } from './downgraded.components';
import { alertsService, apiService, appStateService, bridgeService, bulkOperationDetailsService, docsService, headerService, passwordService, serverMessagesService, translateService, userMenuService } from './downgraded.services';
import { gettextCatalogDecorator } from './gettextCatalog.decorator';
import { groupTypesHierarchyNavigatorDecorator } from './groupsHierarchyNavigator.decorator';
import { c8yNg1HttpInterceptor } from './http.interceptor';
import { c8yNavigatorProvider } from './navigator.provider';
import { rootComponent } from './root.component';
import { c8yTitleDecorator } from './title.decorator';
import { c8yViewsProvider } from './views.provider';
var NAME = 'c8y.upgrade';
window.preventNg1Bootstrap = true;
angular
    .module(NAME, [])
    .config(function ($httpProvider) {
    'ngInject';
    var ng1InterceptorIndex = $httpProvider.interceptors.indexOf('c8yLoadingIndicator');
    if (ng1InterceptorIndex > -1) {
        $httpProvider.interceptors.splice(ng1InterceptorIndex, 1);
    }
    $httpProvider.interceptors.push(c8yNg1HttpInterceptor);
})
    .component('c8yUiRoot', rootComponent)
    .directive('c8yBootstrap', bootstrapComponent)
    .factory('c8yBridgeService', bridgeService)
    .factory('c8yAppStateService', appStateService)
    .factory('c8yHeaderService', headerService)
    .factory('c8yUserMenuService', userMenuService)
    .decorator('c8yTitle', c8yTitleDecorator)
    .factory('c8yAlert', alertsService)
    .decorator('c8yAlert', c8yAlertDecorator)
    .decorator('groupTypesHierarchyNavigator', groupTypesHierarchyNavigatorDecorator) // prevents loading the groups
    .factory('c8yApiService', apiService)
    .factory('c8yDocs', docsService)
    .service('c8yPasswordConfirm', passwordService);
angular
    .module('c8y.ui')
    .provider('c8yNavigator', c8yNavigatorProvider)
    .provider('c8yViews', c8yViewsProvider)
    .directive('c8yUserTotpRevoke', userTotpComponent)
    .directive('c8yAppLogsAutoRefresh', appLogsAutoRefreshComponent)
    .directive('c8yImpactProviderSettings', impactProviderSettingsComponent)
    .directive('c8yDataGrid', dataGridComponent)
    .factory('c8yTranslate', translateService)
    .factory('c8yBulkOperationDetailsService', bulkOperationDetailsService)
    .decorator('gettextCatalog', gettextCatalogDecorator)
    .factory('c8yServerMessages', serverMessagesService)
    .factory('ngZone', downgradeInjectable(NgZone));
export var ng1Modules = ['app', NAME];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3VwZ3JhZGUvIiwic291cmNlcyI6WyJuZzEvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEtBQUssT0FBTyxNQUFNLFNBQVMsQ0FBQztBQUNuQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQ0wsMkJBQTJCLEVBQzNCLGtCQUFrQixFQUNsQixpQkFBaUIsRUFDakIsK0JBQStCLEVBQy9CLGlCQUFpQixFQUNsQixNQUFNLHlCQUF5QixDQUFDO0FBQ2pDLE9BQU8sRUFDTCxhQUFhLEVBQ2IsVUFBVSxFQUNWLGVBQWUsRUFDZixhQUFhLEVBQ2IsMkJBQTJCLEVBQzNCLFdBQVcsRUFDWCxhQUFhLEVBQ2IsZUFBZSxFQUNmLHFCQUFxQixFQUNyQixnQkFBZ0IsRUFDaEIsZUFBZSxFQUNoQixNQUFNLHVCQUF1QixDQUFDO0FBQy9CLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzdGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzNELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzVELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVwRCxJQUFNLElBQUksR0FBRyxhQUFhLENBQUM7QUFDMUIsTUFBYyxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQztBQUUzQyxPQUFPO0tBQ0osTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUM7S0FDaEIsTUFBTSxDQUFDLFVBQUEsYUFBYTtJQUNuQixVQUFVLENBQUM7SUFFWCxJQUFNLG1CQUFtQixHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDdEYsSUFBSSxtQkFBbUIsR0FBRyxDQUFDLENBQUMsRUFBRTtRQUM1QixhQUFhLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUMzRDtJQUNELGFBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDekQsQ0FBQyxDQUFDO0tBQ0QsU0FBUyxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUM7S0FDckMsU0FBUyxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQztLQUM3QyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsYUFBYSxDQUFDO0tBQzFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxlQUFlLENBQUM7S0FDOUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLGFBQWEsQ0FBQztLQUMxQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsZUFBZSxDQUFDO0tBQzlDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsaUJBQWlCLENBQUM7S0FDeEMsT0FBTyxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUM7S0FDbEMsU0FBUyxDQUFDLFVBQVUsRUFBRSxpQkFBaUIsQ0FBQztLQUN4QyxTQUFTLENBQUMsOEJBQThCLEVBQUUscUNBQXFDLENBQUMsQ0FBQyw4QkFBOEI7S0FDL0csT0FBTyxDQUFDLGVBQWUsRUFBRSxVQUFVLENBQUM7S0FDcEMsT0FBTyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUM7S0FDL0IsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBRWxELE9BQU87S0FDSixNQUFNLENBQUMsUUFBUSxDQUFDO0tBQ2hCLFFBQVEsQ0FBQyxjQUFjLEVBQUUsb0JBQW9CLENBQUM7S0FDOUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQztLQUN0QyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsaUJBQWlCLENBQUM7S0FDakQsU0FBUyxDQUFDLHVCQUF1QixFQUFFLDJCQUEyQixDQUFDO0tBQy9ELFNBQVMsQ0FBQywyQkFBMkIsRUFBRSwrQkFBK0IsQ0FBQztLQUN2RSxTQUFTLENBQUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDO0tBQzNDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsZ0JBQWdCLENBQUM7S0FDekMsT0FBTyxDQUFDLGdDQUFnQyxFQUFFLDJCQUEyQixDQUFDO0tBQ3RFLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSx1QkFBdUIsQ0FBQztLQUNwRCxPQUFPLENBQUMsbUJBQW1CLEVBQUUscUJBQXFCLENBQUM7S0FDbkQsT0FBTyxDQUFDLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBRWxELE1BQU0sQ0FBQyxJQUFNLFVBQVUsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZG93bmdyYWRlSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL3VwZ3JhZGUvc3RhdGljJztcbmltcG9ydCAqIGFzIGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgeyBjOHlBbGVydERlY29yYXRvciB9IGZyb20gJy4vYWxlcnQuZGVjb3JhdG9yJztcbmltcG9ydCB7XG4gIGFwcExvZ3NBdXRvUmVmcmVzaENvbXBvbmVudCxcbiAgYm9vdHN0cmFwQ29tcG9uZW50LFxuICBkYXRhR3JpZENvbXBvbmVudCxcbiAgaW1wYWN0UHJvdmlkZXJTZXR0aW5nc0NvbXBvbmVudCxcbiAgdXNlclRvdHBDb21wb25lbnRcbn0gZnJvbSAnLi9kb3duZ3JhZGVkLmNvbXBvbmVudHMnO1xuaW1wb3J0IHtcbiAgYWxlcnRzU2VydmljZSxcbiAgYXBpU2VydmljZSxcbiAgYXBwU3RhdGVTZXJ2aWNlLFxuICBicmlkZ2VTZXJ2aWNlLFxuICBidWxrT3BlcmF0aW9uRGV0YWlsc1NlcnZpY2UsXG4gIGRvY3NTZXJ2aWNlLFxuICBoZWFkZXJTZXJ2aWNlLFxuICBwYXNzd29yZFNlcnZpY2UsXG4gIHNlcnZlck1lc3NhZ2VzU2VydmljZSxcbiAgdHJhbnNsYXRlU2VydmljZSxcbiAgdXNlck1lbnVTZXJ2aWNlXG59IGZyb20gJy4vZG93bmdyYWRlZC5zZXJ2aWNlcyc7XG5pbXBvcnQgeyBnZXR0ZXh0Q2F0YWxvZ0RlY29yYXRvciB9IGZyb20gJy4vZ2V0dGV4dENhdGFsb2cuZGVjb3JhdG9yJztcbmltcG9ydCB7IGdyb3VwVHlwZXNIaWVyYXJjaHlOYXZpZ2F0b3JEZWNvcmF0b3IgfSBmcm9tICcuL2dyb3Vwc0hpZXJhcmNoeU5hdmlnYXRvci5kZWNvcmF0b3InO1xuaW1wb3J0IHsgYzh5TmcxSHR0cEludGVyY2VwdG9yIH0gZnJvbSAnLi9odHRwLmludGVyY2VwdG9yJztcbmltcG9ydCB7IGM4eU5hdmlnYXRvclByb3ZpZGVyIH0gZnJvbSAnLi9uYXZpZ2F0b3IucHJvdmlkZXInO1xuaW1wb3J0IHsgcm9vdENvbXBvbmVudCB9IGZyb20gJy4vcm9vdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgYzh5VGl0bGVEZWNvcmF0b3IgfSBmcm9tICcuL3RpdGxlLmRlY29yYXRvcic7XG5pbXBvcnQgeyBjOHlWaWV3c1Byb3ZpZGVyIH0gZnJvbSAnLi92aWV3cy5wcm92aWRlcic7XG5cbmNvbnN0IE5BTUUgPSAnYzh5LnVwZ3JhZGUnO1xuKHdpbmRvdyBhcyBhbnkpLnByZXZlbnROZzFCb290c3RyYXAgPSB0cnVlO1xuXG5hbmd1bGFyXG4gIC5tb2R1bGUoTkFNRSwgW10pXG4gIC5jb25maWcoJGh0dHBQcm92aWRlciA9PiB7XG4gICAgJ25nSW5qZWN0JztcblxuICAgIGNvbnN0IG5nMUludGVyY2VwdG9ySW5kZXggPSAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5pbmRleE9mKCdjOHlMb2FkaW5nSW5kaWNhdG9yJyk7XG4gICAgaWYgKG5nMUludGVyY2VwdG9ySW5kZXggPiAtMSkge1xuICAgICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMuc3BsaWNlKG5nMUludGVyY2VwdG9ySW5kZXgsIDEpO1xuICAgIH1cbiAgICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKGM4eU5nMUh0dHBJbnRlcmNlcHRvcik7XG4gIH0pXG4gIC5jb21wb25lbnQoJ2M4eVVpUm9vdCcsIHJvb3RDb21wb25lbnQpXG4gIC5kaXJlY3RpdmUoJ2M4eUJvb3RzdHJhcCcsIGJvb3RzdHJhcENvbXBvbmVudClcbiAgLmZhY3RvcnkoJ2M4eUJyaWRnZVNlcnZpY2UnLCBicmlkZ2VTZXJ2aWNlKVxuICAuZmFjdG9yeSgnYzh5QXBwU3RhdGVTZXJ2aWNlJywgYXBwU3RhdGVTZXJ2aWNlKVxuICAuZmFjdG9yeSgnYzh5SGVhZGVyU2VydmljZScsIGhlYWRlclNlcnZpY2UpXG4gIC5mYWN0b3J5KCdjOHlVc2VyTWVudVNlcnZpY2UnLCB1c2VyTWVudVNlcnZpY2UpXG4gIC5kZWNvcmF0b3IoJ2M4eVRpdGxlJywgYzh5VGl0bGVEZWNvcmF0b3IpXG4gIC5mYWN0b3J5KCdjOHlBbGVydCcsIGFsZXJ0c1NlcnZpY2UpXG4gIC5kZWNvcmF0b3IoJ2M4eUFsZXJ0JywgYzh5QWxlcnREZWNvcmF0b3IpXG4gIC5kZWNvcmF0b3IoJ2dyb3VwVHlwZXNIaWVyYXJjaHlOYXZpZ2F0b3InLCBncm91cFR5cGVzSGllcmFyY2h5TmF2aWdhdG9yRGVjb3JhdG9yKSAvLyBwcmV2ZW50cyBsb2FkaW5nIHRoZSBncm91cHNcbiAgLmZhY3RvcnkoJ2M4eUFwaVNlcnZpY2UnLCBhcGlTZXJ2aWNlKVxuICAuZmFjdG9yeSgnYzh5RG9jcycsIGRvY3NTZXJ2aWNlKVxuICAuc2VydmljZSgnYzh5UGFzc3dvcmRDb25maXJtJywgcGFzc3dvcmRTZXJ2aWNlKTtcblxuYW5ndWxhclxuICAubW9kdWxlKCdjOHkudWknKVxuICAucHJvdmlkZXIoJ2M4eU5hdmlnYXRvcicsIGM4eU5hdmlnYXRvclByb3ZpZGVyKVxuICAucHJvdmlkZXIoJ2M4eVZpZXdzJywgYzh5Vmlld3NQcm92aWRlcilcbiAgLmRpcmVjdGl2ZSgnYzh5VXNlclRvdHBSZXZva2UnLCB1c2VyVG90cENvbXBvbmVudClcbiAgLmRpcmVjdGl2ZSgnYzh5QXBwTG9nc0F1dG9SZWZyZXNoJywgYXBwTG9nc0F1dG9SZWZyZXNoQ29tcG9uZW50KVxuICAuZGlyZWN0aXZlKCdjOHlJbXBhY3RQcm92aWRlclNldHRpbmdzJywgaW1wYWN0UHJvdmlkZXJTZXR0aW5nc0NvbXBvbmVudClcbiAgLmRpcmVjdGl2ZSgnYzh5RGF0YUdyaWQnLCBkYXRhR3JpZENvbXBvbmVudClcbiAgLmZhY3RvcnkoJ2M4eVRyYW5zbGF0ZScsIHRyYW5zbGF0ZVNlcnZpY2UpXG4gIC5mYWN0b3J5KCdjOHlCdWxrT3BlcmF0aW9uRGV0YWlsc1NlcnZpY2UnLCBidWxrT3BlcmF0aW9uRGV0YWlsc1NlcnZpY2UpXG4gIC5kZWNvcmF0b3IoJ2dldHRleHRDYXRhbG9nJywgZ2V0dGV4dENhdGFsb2dEZWNvcmF0b3IpXG4gIC5mYWN0b3J5KCdjOHlTZXJ2ZXJNZXNzYWdlcycsIHNlcnZlck1lc3NhZ2VzU2VydmljZSlcbiAgLmZhY3RvcnkoJ25nWm9uZScsIGRvd25ncmFkZUluamVjdGFibGUoTmdab25lKSk7XG5cbmV4cG9ydCBjb25zdCBuZzFNb2R1bGVzID0gWydhcHAnLCBOQU1FXTtcbiJdfQ==