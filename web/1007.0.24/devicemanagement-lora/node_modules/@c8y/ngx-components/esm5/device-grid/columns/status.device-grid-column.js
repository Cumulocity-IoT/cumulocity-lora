import * as tslib_1 from "tslib";
import { BaseDeviceGridColumn } from './base.device-grid-column';
import { StatusCellRendererComponent } from './status.cell-renderer.component';
import { gettext } from '@c8y/ngx-components';
var StatusDeviceGridColumn = /** @class */ (function (_super) {
    tslib_1.__extends(StatusDeviceGridColumn, _super);
    function StatusDeviceGridColumn() {
        var _this = _super.call(this) || this;
        var availabilityStatusPath = 'c8y_Availability.status';
        var requiredAvailabilityPath = 'c8y_RequiredAvailability';
        var connectionStatusPath = 'c8y_Connection.status';
        _this.name = 'status';
        _this.header = gettext('Status');
        _this.dataType = "icon" /* Icon */;
        _this.cellRendererComponent = StatusCellRendererComponent;
        _this.filterable = true;
        _this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    sendOnline: {
                        type: 'boolean'
                    },
                    sendOffline: {
                        type: 'boolean'
                    },
                    sendUnknown: {
                        type: 'boolean'
                    },
                    sendNotMonitored: {
                        type: 'boolean'
                    },
                    pushOnline: {
                        type: 'boolean'
                    },
                    pushOffline: {
                        type: 'boolean'
                    },
                    pushUnknown: {
                        type: 'boolean'
                    },
                    maintenance: {
                        type: 'boolean'
                    }
                }
            },
            form: [
                {
                    type: 'template',
                    template: "<label><span translate>" + gettext('Show devices with send status') + "</span>:</label>"
                },
                {
                    key: 'sendOnline',
                    title: gettext('Online')
                },
                {
                    key: 'sendOffline',
                    title: gettext('Offline')
                },
                {
                    key: 'sendUnknown',
                    title: gettext('Unknown')
                },
                {
                    key: 'sendNotMonitored',
                    title: gettext('Not monitored')
                },
                {
                    type: 'template',
                    template: "<label><span translate>" + gettext('Show devices with push status') + "</span>:</label>"
                },
                {
                    key: 'pushOnline',
                    title: gettext('Online')
                },
                {
                    key: 'pushOffline',
                    title: gettext('Offline')
                },
                {
                    key: 'pushUnknown',
                    title: gettext('Not monitored')
                },
                {
                    type: 'template',
                    template: "<label><span translate>" + gettext('Show devices with maintenance status') + "</span>:</label>"
                },
                {
                    key: 'maintenance',
                    title: gettext('Device is under maintenance')
                }
            ],
            getFilter: function (model) {
                var _a, _b;
                var filter = {};
                var ors = [];
                var sendIns = [];
                var pushIns = [];
                if (model) {
                    if (model.sendOnline) {
                        sendIns.push('AVAILABLE');
                    }
                    if (model.maintenance) {
                        sendIns.push('MAINTENANCE');
                    }
                    if (model.sendOffline) {
                        sendIns.push('UNAVAILABLE');
                    }
                    if (model.sendUnknown) {
                        ors.push({
                            __and: [
                                { __not: { __has: availabilityStatusPath } },
                                { __has: requiredAvailabilityPath }
                            ]
                        });
                    }
                    if (model.sendNotMonitored) {
                        ors.push({
                            __and: [
                                { __not: { __has: availabilityStatusPath } },
                                { __not: { __has: requiredAvailabilityPath } }
                            ]
                        });
                    }
                    if (model.pushOnline) {
                        pushIns.push('CONNECTED');
                    }
                    if (model.pushOffline) {
                        pushIns.push('DISCONNECTED');
                    }
                    if (model.pushUnknown) {
                        ors.push({
                            __not: { __has: connectionStatusPath }
                        });
                    }
                    if (sendIns.length) {
                        ors.push((_a = {}, _a[availabilityStatusPath] = { __in: sendIns }, _a));
                    }
                    if (pushIns.length) {
                        ors.push((_b = {}, _b[connectionStatusPath] = { __in: pushIns }, _b));
                    }
                    if (ors.length) {
                        filter.__or = ors;
                    }
                }
                return filter;
            }
        };
        _this.sortable = true;
        _this.sortingConfig = {
            pathSortingConfigs: [{ path: availabilityStatusPath }]
        };
        return _this;
    }
    return StatusDeviceGridColumn;
}(BaseDeviceGridColumn));
export { StatusDeviceGridColumn };
//# sourceMappingURL=data:application/json;base64,