import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { combineLatest, fromEvent, BehaviorSubject } from 'rxjs';
import { filter, delay, map, take } from 'rxjs/operators';
import { AppStateService, OptionsService } from '@c8y/ngx-components';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
/**
 * A service to manage the Gainsight integration. It allows to load the
 * tag and
 */
var GainsightService = /** @class */ (function () {
    function GainsightService(appState, options) {
        this.appState = appState;
        this.options = options;
        /**
         * A subject that emits the tag function as soon as a new tag is set.
         */
        this.tagFunction$ = new BehaviorSubject(null);
        this.GAINSIGHT_URL = 'web-sdk.aptrinsic.com/api/aptrinsic.js?a=';
        this.GAINSIGHT_GLOBAL_SCOPE = 'aptrinsic';
        this.SCRIPT_EXECUTION_WAIT_TIME = 500;
        this.OPTIONS_KEY_CATEGORY = 'gainsight';
        this.OPTIONS_KEY_NAME = 'api.key';
    }
    Object.defineProperty(GainsightService.prototype, "tagFunction", {
        /**
         * Returns the tag global function which can be used to identify user
         * or add special events.
         */
        get: function () {
            return window[this.GAINSIGHT_GLOBAL_SCOPE];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Load the script tag and calls the identify function to start the tracking.
     * @param accountId The account where the user is registered. Could be the name of the tenant.
     * @param identify If set to false, only the tag is loaded.
     */
    GainsightService.prototype.loadTag = function (accountId, identify) {
        if (identify === void 0) { identify = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var scriptTag, key, _a;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        scriptTag = document.createElement('script');
                        _a = this.options.gainsightKey;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.options.getSystemOption(this.OPTIONS_KEY_CATEGORY, this.OPTIONS_KEY_NAME)];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        key = _a;
                        if (key) {
                            this.loadScriptTag(scriptTag, key);
                            combineLatest(this.appState.currentUser, fromEvent(scriptTag, 'load'), this.appState.state$.pipe(filter(function (_a) {
                                var versions = _a.versions;
                                return versions.backend;
                            }), map(function (_a) {
                                var versions = _a.versions;
                                return versions;
                            }), take(1)))
                                .pipe(delay(this.SCRIPT_EXECUTION_WAIT_TIME), filter(function (_a) {
                                var _b = tslib_1.__read(_a, 2), user = _b[0], scriptEvent = _b[1];
                                return !!(scriptEvent && user);
                            }))
                                .subscribe(function (_a) {
                                var _b = tslib_1.__read(_a, 3), user = _b[0], scriptEvent = _b[1], versions = _b[2];
                                var instanceId = _this.getInstanceIdFromUrl();
                                if (identify) {
                                    _this.identify(user.id, accountId, instanceId, versions.ui.ngx, versions.backend);
                                }
                                _this.tagFunction$.next(_this.tagFunction);
                            });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Identifies the user/account at Gainsight.
     * @param userId The user id which is given to Gainsight.
     * @param accountId The account id which is given to Gainsight (e.g. the tenant name)
     * @param versionUI The UI version used.
     * @param versionBE The BE version used.
     */
    GainsightService.prototype.identify = function (userId, accountId, instanceId, versionUI, versionBE) {
        var windowRef = window;
        windowRef[this.GAINSIGHT_GLOBAL_SCOPE]('identify', {
            id: userId + "_" + accountId + "_" + instanceId,
            versionUI: versionUI,
            versionBE: versionBE,
            instanceId: instanceId
        }, {
            id: accountId + "_" + instanceId,
            instanceId: instanceId
        });
    };
    GainsightService.prototype.loadScriptTag = function (scriptTag, key) {
        try {
            var windowRef_1 = window;
            var firstTag = document.getElementsByTagName('script')[0];
            var protocol = location.protocol;
            var gainsightGlobalScope_1 = this.GAINSIGHT_GLOBAL_SCOPE;
            scriptTag.src = protocol + "//" + this.GAINSIGHT_URL + key;
            (windowRef_1[this.GAINSIGHT_GLOBAL_SCOPE] =
                windowRef_1[this.GAINSIGHT_GLOBAL_SCOPE] ||
                    // tslint:disable-next-line:only-arrow-functions
                    function () {
                        (windowRef_1[gainsightGlobalScope_1].q = windowRef_1[gainsightGlobalScope_1].q || []).push(arguments);
                    }),
                (windowRef_1[gainsightGlobalScope_1].p = key);
            scriptTag.async = true;
            firstTag.parentNode.insertBefore(scriptTag, firstTag);
        }
        catch (ex) {
            console.warn('Failed to load Gainsight PX', ex);
        }
    };
    GainsightService.prototype.getInstanceIdFromUrl = function () {
        var hostName = location.hostname;
        return hostName.substring(hostName.indexOf('.') + 1);
    };
    GainsightService.ctorParameters = function () { return [
        { type: AppStateService },
        { type: OptionsService }
    ]; };
    GainsightService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function GainsightService_Factory() { return new GainsightService(i0.ɵɵinject(i1.AppStateService), i0.ɵɵinject(i1.OptionsService)); }, token: GainsightService, providedIn: "root" });
    GainsightService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        })
    ], GainsightService);
    return GainsightService;
}());
export { GainsightService };
//# sourceMappingURL=data:application/json;base64,