import * as tslib_1 from "tslib";
import { AssetNode } from '../asset-node';
var GroupNode = /** @class */ (function (_super) {
    tslib_1.__extends(GroupNode, _super);
    // FIXME: Currently hasChildren returns true if it is a group,
    //        Issue is, that we disable the children in the API
    //        getGroupItems service call due to performance. This leads
    //        to that the dropdown chevron is shown always. Issue is,
    //        that even if we return the chevrons, we have no way to determine
    //        if the childAssets contain groups or other assets (like dashboards).
    // get hasChildren() {
    //  return this.root || this.service.groups.isGroup(this.mo) && (this.mo as IManagedObject).childAssets.references.length > 0;
    // }
    /**
     * Creates a new node which shows only groups.
     *
     * @param service The service to use.
     * @param config  The default configuration of the node.
     */
    function GroupNode(service, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, service, config) || this;
        _this.service = service;
        return _this;
    }
    /**
     * Fetches only group nodes.
     */
    GroupNode.prototype.fetch = function () {
        return this.root ? this.service.getRootNodes() : this.service.getGroupItems(this.mo.id);
    };
    return GroupNode;
}(AssetNode));
export { GroupNode };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtbm9kZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvYXNzZXRzLW5hdmlnYXRvci8iLCJzb3VyY2VzIjpbImFzc2V0LXNlbGVjdG9yL2dyb3VwLW5vZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUM7SUFBK0IscUNBQVM7SUFDdEMsOERBQThEO0lBQzlELDJEQUEyRDtJQUMzRCxtRUFBbUU7SUFDbkUsaUVBQWlFO0lBQ2pFLDBFQUEwRTtJQUMxRSw4RUFBOEU7SUFDOUUsc0JBQXNCO0lBQ3RCLDhIQUE4SDtJQUM5SCxJQUFJO0lBRUo7Ozs7O09BS0c7SUFDSCxtQkFBc0IsT0FBeUIsRUFBRSxNQUFXO1FBQVgsdUJBQUEsRUFBQSxXQUFXO1FBQTVELFlBQ0Usa0JBQU0sT0FBTyxFQUFFLE1BQU0sQ0FBQyxTQUN2QjtRQUZxQixhQUFPLEdBQVAsT0FBTyxDQUFrQjs7SUFFL0MsQ0FBQztJQUVEOztPQUVHO0lBQ0gseUJBQUssR0FBTDtRQUNFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMxRixDQUFDO0lBQ0gsZ0JBQUM7QUFBRCxDQUFDLEFBM0JELENBQStCLFNBQVMsR0EyQnZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JvdXBOb2RlU2VydmljZSB9IGZyb20gJy4vZ3JvdXAtbm9kZS5zZXJ2aWNlJztcbmltcG9ydCB7IEFzc2V0Tm9kZSB9IGZyb20gJy4uL2Fzc2V0LW5vZGUnO1xuXG5leHBvcnQgY2xhc3MgR3JvdXBOb2RlIGV4dGVuZHMgQXNzZXROb2RlIHtcbiAgLy8gRklYTUU6IEN1cnJlbnRseSBoYXNDaGlsZHJlbiByZXR1cm5zIHRydWUgaWYgaXQgaXMgYSBncm91cCxcbiAgLy8gICAgICAgIElzc3VlIGlzLCB0aGF0IHdlIGRpc2FibGUgdGhlIGNoaWxkcmVuIGluIHRoZSBBUElcbiAgLy8gICAgICAgIGdldEdyb3VwSXRlbXMgc2VydmljZSBjYWxsIGR1ZSB0byBwZXJmb3JtYW5jZS4gVGhpcyBsZWFkc1xuICAvLyAgICAgICAgdG8gdGhhdCB0aGUgZHJvcGRvd24gY2hldnJvbiBpcyBzaG93biBhbHdheXMuIElzc3VlIGlzLFxuICAvLyAgICAgICAgdGhhdCBldmVuIGlmIHdlIHJldHVybiB0aGUgY2hldnJvbnMsIHdlIGhhdmUgbm8gd2F5IHRvIGRldGVybWluZVxuICAvLyAgICAgICAgaWYgdGhlIGNoaWxkQXNzZXRzIGNvbnRhaW4gZ3JvdXBzIG9yIG90aGVyIGFzc2V0cyAobGlrZSBkYXNoYm9hcmRzKS5cbiAgLy8gZ2V0IGhhc0NoaWxkcmVuKCkge1xuICAvLyAgcmV0dXJuIHRoaXMucm9vdCB8fCB0aGlzLnNlcnZpY2UuZ3JvdXBzLmlzR3JvdXAodGhpcy5tbykgJiYgKHRoaXMubW8gYXMgSU1hbmFnZWRPYmplY3QpLmNoaWxkQXNzZXRzLnJlZmVyZW5jZXMubGVuZ3RoID4gMDtcbiAgLy8gfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IG5vZGUgd2hpY2ggc2hvd3Mgb25seSBncm91cHMuXG4gICAqXG4gICAqIEBwYXJhbSBzZXJ2aWNlIFRoZSBzZXJ2aWNlIHRvIHVzZS5cbiAgICogQHBhcmFtIGNvbmZpZyAgVGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiBvZiB0aGUgbm9kZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBzZXJ2aWNlOiBHcm91cE5vZGVTZXJ2aWNlLCBjb25maWcgPSB7fSkge1xuICAgIHN1cGVyKHNlcnZpY2UsIGNvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2hlcyBvbmx5IGdyb3VwIG5vZGVzLlxuICAgKi9cbiAgZmV0Y2goKSB7XG4gICAgcmV0dXJuIHRoaXMucm9vdCA/IHRoaXMuc2VydmljZS5nZXRSb290Tm9kZXMoKSA6IHRoaXMuc2VydmljZS5nZXRHcm91cEl0ZW1zKHRoaXMubW8uaWQpO1xuICB9XG59XG4iXX0=