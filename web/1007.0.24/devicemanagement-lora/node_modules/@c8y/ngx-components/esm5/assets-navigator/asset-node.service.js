import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { InventoryService, UserService, PagingStrategy } from '@c8y/client';
import { AlertService, BreadcrumbService, ModalService, NavigatorNode, AppStateService } from '@c8y/ngx-components';
import { ApiService } from '@c8y/ngx-components/api';
import { empty } from 'rxjs';
import { filter, mergeMap } from 'rxjs/operators';
import { AssetNode } from './asset-node';
import { ASSET_NAVIGATOR_CONFIG } from './asset-node-config.model';
import { DynamicGroupNode } from './dynamic-group-node';
import { GroupFragment } from './group-fragment.model';
import { DeviceGroupService } from './group.service';
var AssetNodeService = /** @class */ (function () {
    function AssetNodeService(inventory, groups, apiService, modal, alert, breadcrumbService, user, appState, moduleConfig) {
        this.inventory = inventory;
        this.groups = groups;
        this.apiService = apiService;
        this.modal = modal;
        this.alert = alert;
        this.breadcrumbService = breadcrumbService;
        this.user = user;
        this.appState = appState;
        this.moduleConfig = moduleConfig;
        this.firstUrl = true;
        this.PAGE_SIZE = 20;
        this.moduleConfig = tslib_1.__assign({ rootNodePriority: 2000 }, (moduleConfig || {}));
    }
    AssetNodeService.prototype.createRootNode = function () {
        this.rootNode = this.createAssetNode({
            root: true,
            priority: this.moduleConfig.rootNodePriority
        });
        return this.rootNode;
    };
    AssetNodeService.prototype.createDynamicGroupNode = function (config) {
        return new DynamicGroupNode(this, config);
    };
    AssetNodeService.prototype.createAssetNode = function (config) {
        return new AssetNode(this, config);
    };
    AssetNodeService.prototype.createChildNode = function (managedObject) {
        var type = managedObject.type;
        var config = { mo: managedObject };
        if (type === GroupFragment.dynamicGroupType) {
            return this.createDynamicGroupNode(config);
        }
        return this.createAssetNode(config);
    };
    AssetNodeService.prototype.getRootNodes = function () {
        if (this.user.hasRole(this.appState.currentUser.value, 'ROLE_INVENTORY_READ')) {
            var query = this.rootQueryFilter();
            var rootNodeFilter = this.createFilter({
                query: query,
                pageSize: this.PAGE_SIZE,
                withChildren: false,
                onlyRoots: true
            });
            return this.inventory.list(rootNodeFilter);
        }
        else {
            var groupFilter = this.createFilter({
                fragmentType: GroupFragment.groupFragmentType,
                withTotalPages: true,
                withChildren: false,
                pageSize: this.PAGE_SIZE,
                onlyRoots: true
            });
            return this.inventory
                .list$(groupFilter, {
                hot: false,
                pagingStrategy: PagingStrategy.NONE,
                realtime: false
            })
                .toPromise();
        }
    };
    AssetNodeService.prototype.getGroupItems = function (moId) {
        return this.inventory.childAssetsList(moId, { withChildren: false, pageSize: this.PAGE_SIZE });
    };
    AssetNodeService.prototype.getDynamicGroupItems = function (query) {
        var dynamicGroupfilter = this.createFilter({ q: query });
        return this.inventory.list(dynamicGroupfilter);
    };
    AssetNodeService.prototype.groupQueryFilter = function (moId) {
        return "$filter=(bygroupid(" + moId + "))$orderby=name";
    };
    AssetNodeService.prototype.rootQueryFilter = function () {
        var moduleConfig = this.moduleConfig;
        var rootFilter = ["(type eq '" + GroupFragment.groupType + "')"];
        if (moduleConfig.smartGroups) {
            rootFilter.push("(type eq '" + GroupFragment.dynamicGroupType + "' and has(" + GroupFragment.dynamicGroupFragment + ") and not(has(" + GroupFragment.dynamicGroupFragment + ".invisible)))");
        }
        return "$filter=(" + rootFilter.join(' or ') + ")$orderby=name";
    };
    AssetNodeService.prototype.onUpdate = function (_a) {
        var _this = this;
        var mo = _a.mo, root = _a.root;
        if (mo.id) {
            return this.apiService
                .hookResponse(function (_a) {
                var url = _a.url, method = _a.method;
                return ['PUT', 'DELETE', 'POST'].includes(method) &&
                    RegExp("((inventory/managedObjects)|(service/smartgroup/smartgroups))/" + mo.id).test(url);
            })
                .pipe(filter(function () { return !_this.draggedData; }), mergeMap(this.apiService.resolveData), filter(function (response) { return !response.data.c8y_Dashboard; }));
        }
        else if (root) {
            return this.apiService.hookResponse(function (_a) {
                var url = _a.url, method = _a.method, options = _a.options;
                return RegExp('((inventory/managedObjects)|(service/smartgroup/smartgroups))/?$').test(url) &&
                    method === 'POST' &&
                    _this.isNewManagedObjectRoot(options);
            });
        }
        else {
            return empty();
        }
    };
    AssetNodeService.prototype.isNewManagedObjectRoot = function (options) {
        if (options === void 0) { options = {}; }
        var data = options.data;
        var isRootAsset = false;
        if (typeof data === 'object') {
            isRootAsset = !!data[GroupFragment.groupFragmentType];
            if (!isRootAsset && this.moduleConfig.smartGroups) {
                isRootAsset = !!data[GroupFragment.dynamicGroupFragment];
            }
        }
        return isRootAsset;
    };
    /**
     * There could be multiple breadcrumbs for devices,
     * so we set a preferred one on click on a device.
     * @param parents The parent nodes of the device to select the prefered one.
     */
    AssetNodeService.prototype.preferBreadcrumb = function (parents) {
        if (parents.length === 1) {
            this.breadcrumbService.selectPreferredByPath(parents[0].path);
        }
    };
    AssetNodeService.prototype.createFilter = function (extraParams) {
        if (extraParams === void 0) { extraParams = {}; }
        var params = {
            currentPage: 1,
            withTotalPages: true,
            pageSize: 10
        };
        return tslib_1.__assign({}, params, extraParams);
    };
    AssetNodeService.ctorParameters = function () { return [
        { type: InventoryService },
        { type: DeviceGroupService },
        { type: ApiService },
        { type: ModalService },
        { type: AlertService },
        { type: BreadcrumbService },
        { type: UserService },
        { type: AppStateService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ASSET_NAVIGATOR_CONFIG,] }] }
    ]; };
    AssetNodeService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(8, Optional()), tslib_1.__param(8, Inject(ASSET_NAVIGATOR_CONFIG))
    ], AssetNodeService);
    return AssetNodeService;
}());
export { AssetNodeService };
//# sourceMappingURL=data:application/json;base64,