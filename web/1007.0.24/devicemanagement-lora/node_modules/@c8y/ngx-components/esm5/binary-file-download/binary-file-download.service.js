import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Router, NavigationEnd, ActivatedRoute } from '@angular/router';
import { filter, map } from 'rxjs/operators';
import { InventoryBinaryService, InventoryService } from '@c8y/client';
import { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';
import { saveAs } from 'file-saver';
import { isUndefined } from 'lodash-es';
import { TranslateService } from '@ngx-translate/core';
var BinaryFileDownloadService = /** @class */ (function () {
    function BinaryFileDownloadService(router, route, inventoryService, alertService, modalService, translate, inventoryBinary) {
        this.router = router;
        this.route = route;
        this.inventoryService = inventoryService;
        this.alertService = alertService;
        this.modalService = modalService;
        this.translate = translate;
        this.inventoryBinary = inventoryBinary;
    }
    BinaryFileDownloadService.prototype.run = function () {
        var _this = this;
        this.router.events
            .pipe(filter(function (event) {
            return event instanceof NavigationEnd
                && _this.route.snapshot.queryParams.download;
        }), map(function () { return _this.route.snapshot.queryParams.download; }))
            .subscribe(function (downloadId) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var data, alertMessage, ex_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.inventoryService.detail(downloadId)];
                    case 1:
                        data = (_a.sent()).data;
                        if (!isUndefined(data.c8y_IsBinary)) {
                            this.showDownloadModal(data);
                        }
                        else {
                            alertMessage = this.translate.instant(gettext('Could not download the file: object with ID "{{ id }}" is not a valid binary.'), { id: data.id });
                            this.alertService.danger(alertMessage);
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        this.alertService.addServerFailure(ex_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
    };
    BinaryFileDownloadService.prototype.showDownloadModal = function (data) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var modalBody, binary, fileBinary, e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        modalBody = this.translate.instant(gettext('You are about to download file "{{ fileName }}". Do you want to proceed?'), { fileName: data.name });
                        return [4 /*yield*/, this.modalService.confirm(gettext('File download'), modalBody, Status.INFO, { ok: gettext('Download') })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.getBinary(data.id)];
                    case 2:
                        binary = _a.sent();
                        fileBinary = new File([binary], data.name, { type: data.contentType });
                        saveAs(fileBinary);
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    BinaryFileDownloadService.prototype.getBinary = function (binaryId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var binary, res, ex_2, msg;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.inventoryBinary.download(binaryId)];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.text()];
                    case 2:
                        binary = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_2 = _a.sent();
                        msg = gettext('Could not get the binary.');
                        this.alertService.danger(msg);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, binary];
                }
            });
        });
    };
    BinaryFileDownloadService.ctorParameters = function () { return [
        { type: Router },
        { type: ActivatedRoute },
        { type: InventoryService },
        { type: AlertService },
        { type: ModalService },
        { type: TranslateService },
        { type: InventoryBinaryService }
    ]; };
    BinaryFileDownloadService = tslib_1.__decorate([
        Injectable()
    ], BinaryFileDownloadService);
    return BinaryFileDownloadService;
}());
export { BinaryFileDownloadService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluYXJ5LWZpbGUtZG93bmxvYWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvYmluYXJ5LWZpbGUtZG93bmxvYWQvIiwic291cmNlcyI6WyJiaW5hcnktZmlsZS1kb3dubG9hZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNsRixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHdkQ7SUFFRSxtQ0FBb0IsTUFBYyxFQUNkLEtBQXFCLEVBQ3JCLGdCQUFrQyxFQUNsQyxZQUEwQixFQUMxQixZQUEwQixFQUMxQixTQUEyQixFQUMzQixlQUF1QztRQU52QyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFDckIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUMzQixvQkFBZSxHQUFmLGVBQWUsQ0FBd0I7SUFDM0QsQ0FBQztJQUVE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QUFELGdDQUFDO0NBQUEsQUFwRUQsSUFvRUM7U0FwRVkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyLCBOYXZpZ2F0aW9uRW5kLCBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEludmVudG9yeUJpbmFyeVNlcnZpY2UsIEludmVudG9yeVNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UsIGdldHRleHQsIE1vZGFsU2VydmljZSwgU3RhdHVzIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBzYXZlQXMgfSBmcm9tICdmaWxlLXNhdmVyJztcbmltcG9ydCB7IGlzVW5kZWZpbmVkIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJpbmFyeUZpbGVEb3dubG9hZFNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgICAgICAgICAgIHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgICAgICAgICAgICBwcml2YXRlIGludmVudG9yeVNlcnZpY2U6IEludmVudG9yeVNlcnZpY2UsXG4gICAgICAgICAgICAgIHByaXZhdGUgYWxlcnRTZXJ2aWNlOiBBbGVydFNlcnZpY2UsXG4gICAgICAgICAgICAgIHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBNb2RhbFNlcnZpY2UsXG4gICAgICAgICAgICAgIHByaXZhdGUgdHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlLFxuICAgICAgICAgICAgICBwcml2YXRlIGludmVudG9yeUJpbmFyeTogSW52ZW50b3J5QmluYXJ5U2VydmljZSkge1xuICB9XG5cbiAgcnVuKCkge1xuICAgIHRoaXMucm91dGVyLmV2ZW50c1xuICAgICAgLnBpcGUoXG4gICAgICAgIGZpbHRlcigoZXZlbnQpID0+IHsgcmV0dXJuIGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZFxuICAgICAgICAgICYmIHRoaXMucm91dGUuc25hcHNob3QucXVlcnlQYXJhbXMuZG93bmxvYWQ7IH0pLFxuICAgICAgICBtYXAoKCkgPT4gdGhpcy5yb3V0ZS5zbmFwc2hvdC5xdWVyeVBhcmFtcy5kb3dubG9hZCkpXG4gICAgICAuc3Vic2NyaWJlKGFzeW5jIChkb3dubG9hZElkKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLmludmVudG9yeVNlcnZpY2UuZGV0YWlsKGRvd25sb2FkSWQpO1xuICAgICAgICAgIGlmICggIWlzVW5kZWZpbmVkKGRhdGEuYzh5X0lzQmluYXJ5KSApIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd0Rvd25sb2FkTW9kYWwoZGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGFsZXJ0TWVzc2FnZSA9IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoXG4gICAgICAgICAgICAgIGdldHRleHQoJ0NvdWxkIG5vdCBkb3dubG9hZCB0aGUgZmlsZTogb2JqZWN0IHdpdGggSUQgXCJ7eyBpZCB9fVwiIGlzIG5vdCBhIHZhbGlkIGJpbmFyeS4nKSxcbiAgICAgICAgICAgICAgeyBpZDogZGF0YS5pZCB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5hbGVydFNlcnZpY2UuZGFuZ2VyKGFsZXJ0TWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLmFkZFNlcnZlckZhaWx1cmUoZXgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHNob3dEb3dubG9hZE1vZGFsKGRhdGEpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbW9kYWxCb2R5ID0gdGhpcy50cmFuc2xhdGUuaW5zdGFudChcbiAgICAgICAgZ2V0dGV4dCgnWW91IGFyZSBhYm91dCB0byBkb3dubG9hZCBmaWxlIFwie3sgZmlsZU5hbWUgfX1cIi4gRG8geW91IHdhbnQgdG8gcHJvY2VlZD8nKSxcbiAgICAgICAgeyBmaWxlTmFtZTogZGF0YS5uYW1lIH1cbiAgICAgICk7XG4gICAgICBhd2FpdCB0aGlzLm1vZGFsU2VydmljZS5jb25maXJtKFxuICAgICAgICBnZXR0ZXh0KCdGaWxlIGRvd25sb2FkJyksXG4gICAgICAgIG1vZGFsQm9keSxcbiAgICAgICAgU3RhdHVzLklORk8sXG4gICAgICAgIHsgb2s6IGdldHRleHQoJ0Rvd25sb2FkJykgfVxuICAgICAgKTtcbiAgICAgIGNvbnN0IGJpbmFyeSA9IGF3YWl0IHRoaXMuZ2V0QmluYXJ5KGRhdGEuaWQpO1xuICAgICAgY29uc3QgZmlsZUJpbmFyeSA9IG5ldyBGaWxlKFtiaW5hcnldLCBkYXRhLm5hbWUsIHsgdHlwZTogZGF0YS5jb250ZW50VHlwZSB9KTtcbiAgICAgIHNhdmVBcyhmaWxlQmluYXJ5KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBlbXB0eSBib2R5IDooXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0QmluYXJ5KGJpbmFyeUlkKSB7XG4gICAgbGV0IGJpbmFyeTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5pbnZlbnRvcnlCaW5hcnkuZG93bmxvYWQoYmluYXJ5SWQpO1xuICAgICAgYmluYXJ5ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgY29uc3QgbXNnID0gZ2V0dGV4dCgnQ291bGQgbm90IGdldCB0aGUgYmluYXJ5LicpO1xuICAgICAgdGhpcy5hbGVydFNlcnZpY2UuZGFuZ2VyKG1zZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJpbmFyeTtcbiAgfVxuXG59XG4iXX0=