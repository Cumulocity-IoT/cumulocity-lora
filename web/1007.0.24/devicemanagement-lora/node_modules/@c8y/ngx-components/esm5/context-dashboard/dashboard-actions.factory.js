import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { gettext, ViewContext } from '@c8y/ngx-components';
import { ActivatedRoute, Router } from '@angular/router';
import { ContextDashboardService } from './context-dashboard.service';
import { BsModalService } from 'ngx-bootstrap/modal';
import { DashboardDetailComponent } from './dashboard-detail.component';
var DashboardActionsFactory = /** @class */ (function () {
    function DashboardActionsFactory(router, contextDashboardService, bsModal) {
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.bsModal = bsModal;
    }
    DashboardActionsFactory.prototype.get = function (activatedRoute) {
        var _this = this;
        var context = !activatedRoute.parent || activatedRoute.snapshot.data.context
            ? activatedRoute.snapshot.data
            : activatedRoute.parent.snapshot.data;
        return [
            {
                label: gettext('Add dashboard'),
                priority: 2500,
                action: function () { return _this.addDashboard(context); },
                disabled: !this.isEnabled(context)
            }
        ];
    };
    DashboardActionsFactory.prototype.addDashboard = function (context) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var initialState, modal, dashboardCfg, dashboardMO, ex_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (context.context === ViewContext.Device) {
                            initialState = {
                                deviceType: context.contextData.type
                            };
                        }
                        modal = this.bsModal.show(DashboardDetailComponent, {
                            class: 'modal-lg',
                            initialState: initialState,
                            ignoreBackdropClick: true
                        }).content;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        return [4 /*yield*/, modal.result];
                    case 2:
                        dashboardCfg = _a.sent();
                        return [4 /*yield*/, this.contextDashboardService.create(dashboardCfg, context)];
                    case 3:
                        dashboardMO = _a.sent();
                        return [4 /*yield*/, this.contextDashboardService.navigateToDashboard(dashboardMO)];
                    case 4:
                        _a.sent();
                        modal.close();
                        return [3 /*break*/, 6];
                    case 5:
                        ex_1 = _a.sent();
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    DashboardActionsFactory.prototype.isEnabled = function (context) {
        return (this.contextDashboardService.hasPermission() &&
            [ViewContext.Device, ViewContext.Group].includes(context.context));
    };
    DashboardActionsFactory.ctorParameters = function () { return [
        { type: Router },
        { type: ContextDashboardService },
        { type: BsModalService }
    ]; };
    DashboardActionsFactory = tslib_1.__decorate([
        Injectable()
    ], DashboardActionsFactory);
    return DashboardActionsFactory;
}());
export { DashboardActionsFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLWFjdGlvbnMuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvY29udGV4dC1kYXNoYm9hcmQvIiwic291cmNlcyI6WyJkYXNoYm9hcmQtYWN0aW9ucy5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBeUIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBSXhFO0lBQ0UsaUNBQ1UsTUFBYyxFQUNkLHVCQUFnRCxFQUNoRCxPQUF1QjtRQUZ2QixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtRQUNoRCxZQUFPLEdBQVAsT0FBTyxDQUFnQjtJQUM5QixDQUFDO0lBRUoscUNBQUcsR0FBSCxVQUFJLGNBQThCO1FBQWxDLGlCQWNDO1FBYkMsSUFBTSxPQUFPLEdBQ1gsQ0FBQyxjQUFjLENBQUMsTUFBTSxJQUFJLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU87WUFDNUQsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSTtZQUM5QixDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBRTFDLE9BQU87WUFDTDtnQkFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQztnQkFDL0IsUUFBUSxFQUFFLElBQUk7Z0JBQ2QsTUFBTSxFQUFFLGNBQU0sT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUExQixDQUEwQjtnQkFDeEMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7YUFDbkM7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUVLLDhDQUFZLEdBQWxCLFVBQW1CLE9BQU87Ozs7Ozt3QkFHeEIsSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLFdBQVcsQ0FBQyxNQUFNLEVBQUU7NEJBQzFDLFlBQVksR0FBRztnQ0FDYixVQUFVLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJOzZCQUNyQyxDQUFDO3lCQUNIO3dCQUVLLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRTs0QkFDeEQsS0FBSyxFQUFFLFVBQVU7NEJBQ2pCLFlBQVksY0FBQTs0QkFDWixtQkFBbUIsRUFBRSxJQUFJO3lCQUMxQixDQUFDLENBQUMsT0FBbUMsQ0FBQzs7Ozt3QkFFaEIscUJBQU0sS0FBSyxDQUFDLE1BQU0sRUFBQTs7d0JBQWpDLFlBQVksR0FBRyxTQUFrQjt3QkFDWSxxQkFBTSxJQUFJLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUMxRixZQUFZLEVBQ1osT0FBTyxDQUNSLEVBQUE7O3dCQUhLLFdBQVcsR0FBa0MsU0FHbEQ7d0JBQ0QscUJBQU0sSUFBSSxDQUFDLHVCQUF1QixDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxFQUFBOzt3QkFBbkUsU0FBbUUsQ0FBQzt3QkFDcEUsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDOzs7Ozs7Ozs7S0FJakI7SUFFTywyQ0FBUyxHQUFqQixVQUFrQixPQUFPO1FBQ3ZCLE9BQU8sQ0FDTCxJQUFJLENBQUMsdUJBQXVCLENBQUMsYUFBYSxFQUFFO1lBQzVDLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FDbEUsQ0FBQztJQUNKLENBQUM7O2dCQXJEaUIsTUFBTTtnQkFDVyx1QkFBdUI7Z0JBQ3ZDLGNBQWM7O0lBSnRCLHVCQUF1QjtRQURuQyxVQUFVLEVBQUU7T0FDQSx1QkFBdUIsQ0F3RG5DO0lBQUQsOEJBQUM7Q0FBQSxBQXhERCxJQXdEQztTQXhEWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3Rpb24sIEFjdGlvbkZhY3RvcnksIGdldHRleHQsIFZpZXdDb250ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRTZXJ2aWNlIH0gZnJvbSAnLi9jb250ZXh0LWRhc2hib2FyZC5zZXJ2aWNlJztcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9tb2RhbCc7XG5pbXBvcnQgeyBEYXNoYm9hcmREZXRhaWxDb21wb25lbnQgfSBmcm9tICcuL2Rhc2hib2FyZC1kZXRhaWwuY29tcG9uZW50JztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRNYW5hZ2VkT2JqZWN0IH0gZnJvbSAnLi9jb250ZXh0LWRhc2hib2FyZC5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEYXNoYm9hcmRBY3Rpb25zRmFjdG9yeSBpbXBsZW1lbnRzIEFjdGlvbkZhY3Rvcnkge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgY29udGV4dERhc2hib2FyZFNlcnZpY2U6IENvbnRleHREYXNoYm9hcmRTZXJ2aWNlLFxuICAgIHByaXZhdGUgYnNNb2RhbDogQnNNb2RhbFNlcnZpY2VcbiAgKSB7fVxuXG4gIGdldChhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUpOiBBY3Rpb25bXSB7XG4gICAgY29uc3QgY29udGV4dCA9XG4gICAgICAhYWN0aXZhdGVkUm91dGUucGFyZW50IHx8IGFjdGl2YXRlZFJvdXRlLnNuYXBzaG90LmRhdGEuY29udGV4dFxuICAgICAgICA/IGFjdGl2YXRlZFJvdXRlLnNuYXBzaG90LmRhdGFcbiAgICAgICAgOiBhY3RpdmF0ZWRSb3V0ZS5wYXJlbnQuc25hcHNob3QuZGF0YTtcblxuICAgIHJldHVybiBbXG4gICAgICB7XG4gICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdBZGQgZGFzaGJvYXJkJyksXG4gICAgICAgIHByaW9yaXR5OiAyNTAwLFxuICAgICAgICBhY3Rpb246ICgpID0+IHRoaXMuYWRkRGFzaGJvYXJkKGNvbnRleHQpLFxuICAgICAgICBkaXNhYmxlZDogIXRoaXMuaXNFbmFibGVkKGNvbnRleHQpXG4gICAgICB9XG4gICAgXTtcbiAgfVxuXG4gIGFzeW5jIGFkZERhc2hib2FyZChjb250ZXh0KSB7XG4gICAgbGV0IGluaXRpYWxTdGF0ZTogeyBkZXZpY2VUeXBlOiBzdHJpbmcgfTtcblxuICAgIGlmIChjb250ZXh0LmNvbnRleHQgPT09IFZpZXdDb250ZXh0LkRldmljZSkge1xuICAgICAgaW5pdGlhbFN0YXRlID0ge1xuICAgICAgICBkZXZpY2VUeXBlOiBjb250ZXh0LmNvbnRleHREYXRhLnR5cGVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgbW9kYWwgPSB0aGlzLmJzTW9kYWwuc2hvdyhEYXNoYm9hcmREZXRhaWxDb21wb25lbnQsIHtcbiAgICAgIGNsYXNzOiAnbW9kYWwtbGcnLFxuICAgICAgaW5pdGlhbFN0YXRlLFxuICAgICAgaWdub3JlQmFja2Ryb3BDbGljazogdHJ1ZVxuICAgIH0pLmNvbnRlbnQgYXMgRGFzaGJvYXJkRGV0YWlsQ29tcG9uZW50O1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXNoYm9hcmRDZmcgPSBhd2FpdCBtb2RhbC5yZXN1bHQ7XG4gICAgICBjb25zdCBkYXNoYm9hcmRNTzogQ29udGV4dERhc2hib2FyZE1hbmFnZWRPYmplY3QgPSBhd2FpdCB0aGlzLmNvbnRleHREYXNoYm9hcmRTZXJ2aWNlLmNyZWF0ZShcbiAgICAgICAgZGFzaGJvYXJkQ2ZnLFxuICAgICAgICBjb250ZXh0XG4gICAgICApO1xuICAgICAgYXdhaXQgdGhpcy5jb250ZXh0RGFzaGJvYXJkU2VydmljZS5uYXZpZ2F0ZVRvRGFzaGJvYXJkKGRhc2hib2FyZE1PKTtcbiAgICAgIG1vZGFsLmNsb3NlKCk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIC8vIGludGVuZGVkIGVtcHR5c1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaXNFbmFibGVkKGNvbnRleHQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5jb250ZXh0RGFzaGJvYXJkU2VydmljZS5oYXNQZXJtaXNzaW9uKCkgJiZcbiAgICAgIFtWaWV3Q29udGV4dC5EZXZpY2UsIFZpZXdDb250ZXh0Lkdyb3VwXS5pbmNsdWRlcyhjb250ZXh0LmNvbnRleHQpXG4gICAgKTtcbiAgfVxufVxuIl19