import * as tslib_1 from "tslib";
import { Component, HostBinding, Inject, Input, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { AlertService, DashboardChildChange, DashboardChildComponent, DashboardSettings, DynamicComponentDefinition, gettext, Widget, WidgetChange } from '@c8y/ngx-components';
import { cloneDeep, findIndex, get, keyBy, omit, values } from 'lodash-es';
import { BsModalService } from 'ngx-bootstrap/modal';
import { CONTEXT_DASHBOARD_CONFIG, WIDGET_HEADER_CLASSES } from './context-dashboard.model';
import { ContextDashboardService } from './context-dashboard.service';
import { DashboardDetailComponent } from './dashboard-detail.component';
import { WidgetConfigComponent } from './widget-config.component';
import { WidgetService } from './widget.service';
import { kebabCase } from 'lodash-es';
/**
 * The context dashboard is a dashboard which resolves it data from the current context (device or group)
 * it is displayed on. It usually uses the route.data for it, but you can pass
 * a different managedObject to the [mo] input parameter to change that behavior.
 */
var ContextDashboardComponent = /** @class */ (function () {
    function ContextDashboardComponent(route, router, contextDashboardService, alert, renderer, moduleConfig, widgetService, bsModal) {
        this.route = route;
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.alert = alert;
        this.renderer = renderer;
        this.moduleConfig = moduleConfig;
        this.widgetService = widgetService;
        this.bsModal = bsModal;
        this.childrenClasses = '';
        this.setTitle = false;
        this.disabled = false;
        this.defaultWidgets = [];
        this.canDelete = true;
        this.isLoading = true;
        this.class = '';
        this.widgets = [];
    }
    ContextDashboardComponent.prototype.ngOnInit = function () {
        if (!this.name) {
            this.loadContextDashboard();
            return;
        }
        this.loadNamedDashboard();
    };
    /**
     * Applies the current context to the widget
     * @param widget The widget to apply the context to.
     */
    ContextDashboardComponent.prototype.applyDeviceTarget = function (widget) {
        if (widget.config.device) {
            widget.config.device = { id: this.context.id, name: this.context.name };
        }
    };
    /**
     * Removes the route listener.
     */
    ContextDashboardComponent.prototype.ngOnDestroy = function () {
        if (this.dataSub) {
            this.dataSub.unsubscribe();
        }
    };
    /**
     * Restores the dashboard widgets to the default widgets.
     */
    ContextDashboardComponent.prototype.restore = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.isLoading = true;
                        this.mo.c8y_Dashboard.children = this.contextDashboardService.mapWidgets(this.defaultWidgets);
                        return [4 /*yield*/, this.contextDashboardService.update(this.mo)];
                    case 1:
                        _a.sent();
                        this.onLoad();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Updates all dashboards children's. Useful for position changes on the dashboard.
     * @param child The child to change.
     */
    ContextDashboardComponent.prototype.updateDashboardChildren = function (child) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var children, dashboardMO, mappedChildren;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                children = child.children;
                dashboardMO = this.mo;
                mappedChildren = keyBy(children.map(function (c) { return _this.componentToWidget(c); }), 'id');
                dashboardMO.c8y_Dashboard.children = mappedChildren;
                return [2 /*return*/, this.contextDashboardService.update(dashboardMO)];
            });
        });
    };
    /**
     * Remove the complete dashboard and navigate away.
     */
    ContextDashboardComponent.prototype.deleteDashboard = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var route;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contextDashboardService.delete(this.mo)];
                    case 1:
                        _a.sent();
                        if (this.route.parent) {
                            route = this.route.parent.snapshot.url.map(function (segment) { return segment.path; }).join('/');
                            this.router.navigateByUrl(route);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Edits the current dashboard
     */
    ContextDashboardComponent.prototype.editDashboard = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var initialState, modal, dashboardMO, _a, ex_1;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        initialState = {
                            dashboard: this.dashboard,
                            deviceType: this.context.type,
                            isNamedDashboard: this.contextDashboardService.isNamed(this.mo)
                        };
                        modal = this.bsModal.show(DashboardDetailComponent, {
                            class: 'modal-lg',
                            initialState: initialState,
                            ignoreBackdropClick: true
                        }).content;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 5, , 6]);
                        dashboardMO = cloneDeep(this.mo);
                        _a = dashboardMO;
                        return [4 /*yield*/, modal.result];
                    case 2:
                        _a.c8y_Dashboard = _b.sent();
                        return [4 /*yield*/, this.contextDashboardService.update(dashboardMO)];
                    case 3:
                        _b.sent();
                        return [4 /*yield*/, this.contextDashboardService.refreshTabs(dashboardMO)];
                    case 4:
                        _b.sent();
                        this.onLoad();
                        modal.close();
                        return [3 /*break*/, 6];
                    case 5:
                        ex_1 = _b.sent();
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Edits a widget on the dashboard.
     * @param change The widget change event.
     */
    ContextDashboardComponent.prototype.editWidget = function (change) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, x, y, width, height, component;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = change.source, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
                        return [4 /*yield*/, this.widgetService.getWidgetDefinition(change.widget.name || change.widget.componentId)];
                    case 1:
                        component = _b.sent();
                        if (!component) {
                            this.addWidget();
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.addWidget(tslib_1.__assign({}, component, { data: tslib_1.__assign({}, component.data, change.widget, { _x: x, _y: y, _width: width, _height: height }) }))];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Adds a widget to the dashboard.
     * @param selected Define a selected component to switch to edit mode directly.
     */
    ContextDashboardComponent.prototype.addWidget = function (selected) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var initialState, modal, newWidget, ex_2;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        initialState = {
                            mo: this.mo,
                            context: this.context,
                            selected: cloneDeep(selected)
                        };
                        modal = this.bsModal.show(WidgetConfigComponent, {
                            class: 'modal-lg',
                            initialState: initialState,
                            ignoreBackdropClick: true
                        }).content;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, modal.result];
                    case 2:
                        newWidget = _a.sent();
                        if (!this.mo.c8y_Dashboard.children) {
                            this.mo.c8y_Dashboard.children = {};
                        }
                        this.mo.c8y_Dashboard.children[newWidget.id] = newWidget;
                        this.contextDashboardService.update(this.mo);
                        newWidget.classes = this.mergeWidgetClasses(newWidget);
                        return [4 /*yield*/, this.updateWidget(newWidget)];
                    case 3:
                        _a.sent();
                        modal.close();
                        return [3 /*break*/, 5];
                    case 4:
                        ex_2 = _a.sent();
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Updates a widget or adds a new one if it doesn't exist on
     * the dashboard.
     * @param widget The new widget
     */
    ContextDashboardComponent.prototype.updateWidget = function (widget) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var index, isNew, mappedWidget;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        index = findIndex(this.widgets, { id: widget.id });
                        isNew = index === -1;
                        return [4 /*yield*/, this.mapLegacy(widget)];
                    case 1:
                        mappedWidget = _a.sent();
                        if (isNew) {
                            this.widgets.push(mappedWidget);
                        }
                        else {
                            this.widgets.splice(index, 1, mappedWidget);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Removes a widget and rearranges the remaining ones
     * if necessary.
     * @param change The change event.
     */
    ContextDashboardComponent.prototype.deleteWidget = function (change) {
        var _this = this;
        var widget = change.widget, source = change.source;
        delete this.mo.c8y_Dashboard.children[widget.id];
        var removed = this.widgets.find(function (_a) {
            var id = _a.id;
            return id === widget.id;
        });
        this.widgets.splice(this.widgets.indexOf(removed), 1);
        // using setTimeout to give the component the chance to remove it.
        setTimeout(function () {
            var child = new DashboardChildChange(source);
            child.collapseUpAll();
            _this.updateDashboardChildren(child);
        });
    };
    /**
     * This is a workaround to ensure that the dragged-element
     * (which is attached to the body) has the right styling.
     */
    ContextDashboardComponent.prototype.addDashboardClassToBody = function () {
        var _this = this;
        this.class.split(' ').forEach(function (cssClass) {
            _this.renderer.addClass(document.body, cssClass);
        });
    };
    /**
     * This is a workaround to ensure that the dragged-element
     * (which is attached to the body) has the right styling.
     */
    ContextDashboardComponent.prototype.removeDashboardClassFromBody = function () {
        var _this = this;
        this.class.split(' ').forEach(function (cssClass) {
            _this.renderer.removeClass(document.body, cssClass);
        });
    };
    /**
     * Changes the dashboard settings to frozen or vice versa.
     * @param settings The current settings of the dashboard.
     */
    ContextDashboardComponent.prototype.toggleFreeze = function (settings) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var ex_3;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.toggleIsFrozenFlag(settings);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.contextDashboardService.update(this.mo)];
                    case 2:
                        _a.sent();
                        if (this.dashboard.isFrozen) {
                            this.alert.success(gettext('Your dashboard is locked now.'));
                        }
                        else {
                            this.alert.success(gettext('Your dashboard is unlocked now.'));
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        ex_3 = _a.sent();
                        this.alert.addServerFailure(ex_3);
                        this.toggleIsFrozenFlag(settings);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ContextDashboardComponent.prototype.toggleIsFrozenFlag = function (settings) {
        settings.isFrozen = !settings.isFrozen;
        this.dashboard.isFrozen = settings.isFrozen;
    };
    ContextDashboardComponent.prototype.loadContextDashboard = function () {
        var _this = this;
        this.dataSub = this.route.data.subscribe(function (_a) {
            var dashboard = _a.dashboard;
            _this.context = _this.route.parent.snapshot.data.contextData;
            _this.mo = dashboard;
            _this.dashboard = _this.mo.c8y_Dashboard;
            _this.onLoad();
        });
    };
    ContextDashboardComponent.prototype.loadNamedDashboard = function () {
        var _this = this;
        this.dataSub = this.contextDashboardService
            .getNamedDashboardOrCreate(this.name, this.defaultWidgets)
            .subscribe(function (mo) {
            _this.context = _this.context || {};
            _this.mo = mo;
            _this.dashboard = _this.mo.c8y_Dashboard;
            _this.onLoad();
        });
    };
    ContextDashboardComponent.prototype.onLoad = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var dashboardChildren, isDeviceType, dashboardClasses, _a;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.disabled = !this.contextDashboardService.hasPermission();
                        dashboardChildren = cloneDeep(this.mo.c8y_Dashboard.children);
                        isDeviceType = this.contextDashboardService.isDeviceType(this.mo);
                        dashboardClasses = tslib_1.__assign({ 'c8y-grid-dashboard': true, dashboard: true }, this.dashboard.classes);
                        _a = this;
                        return [4 /*yield*/, Promise.all(values(dashboardChildren).map(function (widget) {
                                widget.classes = _this.mergeWidgetClasses(widget);
                                if (isDeviceType) {
                                    _this.applyDeviceTarget(widget);
                                }
                                return _this.mapLegacy(widget);
                            }))];
                    case 1:
                        _a.widgets = _b.sent();
                        this.class = Object.keys(dashboardClasses).join(' ');
                        this.disabled = !this.contextDashboardService.hasPermission();
                        this.isLoading = false;
                        return [2 /*return*/];
                }
            });
        });
    };
    ContextDashboardComponent.prototype.mergeWidgetClasses = function (widget) {
        var _a;
        var hasHeaderClass = WIDGET_HEADER_CLASSES.find(function (el) { return widget.classes && widget.classes[el.class]; });
        var widgetClasses = hasHeaderClass
            ? tslib_1.__assign({}, widget.classes) : tslib_1.__assign({}, this.dashboard.widgetClasses, widget.classes);
        return tslib_1.__assign((_a = { card: true, 'card-dashboard': true }, _a[kebabCase(widget.componentId || widget.name)] = true, _a), widgetClasses);
    };
    ContextDashboardComponent.prototype.componentToWidget = function (child) {
        return tslib_1.__assign({}, omit(child.data, ['componentTransformConfigWithContext', 'transformConfigWithContext']), {
            _x: child.x,
            _y: child.y,
            _width: child.width,
            _height: child.height
        });
    };
    ContextDashboardComponent.prototype.mapLegacy = function (widget) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var cmp;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.widgetService.getWidgetDefinition(widget.componentId || widget.name)];
                    case 1:
                        cmp = _a.sent();
                        if (get(cmp, 'data.settings.upgrade')) {
                            widget.widgetComponent = cmp.data.settings.widgetComponent;
                            widget.configComponent = cmp.data.settings.configComponent;
                            widget.templateUrl = cmp.data.settings.templateUrl;
                            widget.configTemplateUrl = cmp.data.settings.configTemplateUrl;
                            widget.transformConfigWithContext =
                                cmp.data.settings.componentTransformConfigWithContext ||
                                    cmp.data.settings.transformConfigWithContext;
                        }
                        else {
                            delete widget.templateUrl;
                            delete widget.configTemplateUrl;
                        }
                        return [2 /*return*/, widget];
                }
            });
        });
    };
    ContextDashboardComponent.ctorParameters = function () { return [
        { type: ActivatedRoute },
        { type: Router },
        { type: ContextDashboardService },
        { type: AlertService },
        { type: Renderer2 },
        { type: undefined, decorators: [{ type: Inject, args: [CONTEXT_DASHBOARD_CONFIG,] }] },
        { type: WidgetService },
        { type: BsModalService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], ContextDashboardComponent.prototype, "name", void 0);
    tslib_1.__decorate([
        Input()
    ], ContextDashboardComponent.prototype, "childrenClasses", void 0);
    tslib_1.__decorate([
        Input()
    ], ContextDashboardComponent.prototype, "context", void 0);
    tslib_1.__decorate([
        Input()
    ], ContextDashboardComponent.prototype, "setTitle", void 0);
    tslib_1.__decorate([
        Input()
    ], ContextDashboardComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        Input()
    ], ContextDashboardComponent.prototype, "defaultWidgets", void 0);
    tslib_1.__decorate([
        Input()
    ], ContextDashboardComponent.prototype, "canDelete", void 0);
    tslib_1.__decorate([
        Input()
    ], ContextDashboardComponent.prototype, "isLoading", void 0);
    tslib_1.__decorate([
        HostBinding('class')
    ], ContextDashboardComponent.prototype, "class", void 0);
    ContextDashboardComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-context-dashboard',
            template: "<c8y-action-bar-item [placement]=\"'more'\" *ngIf=\"defaultWidgets.length > 0\">\n  <button (click)=\"restore()\" [disabled]=\"dashboard?.isFrozen || disabled\">\n    <i c8yIcon=\"undo\"></i>&nbsp;<span translate>Restore dashboard</span>\n  </button>\n</c8y-action-bar-item>\n\n<c8y-widgets-dashboard\n  [context]=\"context\"\n  [contextDashboard]=\"dashboard\"\n  [widgets]=\"widgets\"\n  [settings]=\"{\n    isLoading: isLoading,\n    isFrozen: dashboard?.isFrozen,\n    isDisabled: disabled,\n    canDelete: canDelete,\n    translateWidgetTitle: dashboard?.translateWidgetTitle,\n    allowFullscreen: moduleConfig.allowFullscreen,\n    title: setTitle ? dashboard.name : undefined,\n    widgetMargin: dashboard?.widgetMargin\n  }\"\n  (onFreeze)=\"toggleFreeze($event)\"\n  (onChangeDashboard)=\"updateDashboardChildren($event)\"\n  (onAddWidget)=\"addWidget()\"\n  (onEditWidget)=\"editWidget($event)\"\n  (onDeleteWidget)=\"deleteWidget($event)\"\n  (onChangeStart)=\"addDashboardClassToBody()\"\n  (onChangeEnd)=\"removeDashboardClassFromBody()\"\n  (onEditDashboard)=\"editDashboard()\"\n  (onDeleteDashboard)=\"deleteDashboard()\"\n>\n</c8y-widgets-dashboard>\n",
            host: {
                style: "\n      display: block;\n    ",
                class: 'dashboard c8y-grid-dashboard'
            }
        }),
        tslib_1.__param(5, Inject(CONTEXT_DASHBOARD_CONFIG))
    ], ContextDashboardComponent);
    return ContextDashboardComponent;
}());
export { ContextDashboardComponent };
//# sourceMappingURL=data:application/json;base64,