import * as tslib_1 from "tslib";
import { ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { BulkOperationStepper } from './creation/bulk-operation-stepper.component';
var BaseStepperComponent = /** @class */ (function () {
    function BaseStepperComponent() {
        /**
         * A map holding step data. The order of properties need to match the order of
         * the steps they hold data for as the index of the property is used to clear
         * step data when navigating forth after changing data at an earlier step.
         */
        this.stepData = {};
        this.endSubscriptions = new Subject();
    }
    Object.defineProperty(BaseStepperComponent.prototype, "deviceTypes", {
        set: function (deviceTypes) {
            if (this.operationStepper) {
                this.operationStepper.changeDeviceTypes(deviceTypes);
            }
        },
        enumerable: true,
        configurable: true
    });
    BaseStepperComponent.prototype.ngOnInit = function () {
        this.operationStepper.retrieveOperationDetails = this.retrieveOperationPrototype.bind(this);
        this.operationStepper.selectionChange
            .pipe(takeUntil(this.endSubscriptions))
            .subscribe(this.onSelectionChange.bind(this));
    };
    BaseStepperComponent.prototype.ngOnDestroy = function () {
        this.endSubscriptions.next();
        this.endSubscriptions.complete();
    };
    BaseStepperComponent.prototype.onSelectionChange = function (event) {
        var selectedIndex = event.selectedIndex, previouslySelectedIndex = event.previouslySelectedIndex;
        if (selectedIndex > previouslySelectedIndex &&
            selectedIndex < Object.keys(this.stepData).length) {
            // TODO clear step data only if previous step is "dirty"
            this.stepData[this.getStepDataKeyByIndex(selectedIndex)] = undefined;
        }
    };
    BaseStepperComponent.prototype.getStepDataKeyByIndex = function (index) {
        return Object.keys(this.stepData)[index];
    };
    tslib_1.__decorate([
        ViewChild(BulkOperationStepper, { static: true })
    ], BaseStepperComponent.prototype, "operationStepper", void 0);
    return BaseStepperComponent;
}());
export { BaseStepperComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1zdGVwcGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy8iLCJzb3VyY2VzIjpbImJ1bGsvYmFzZS1zdGVwcGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFxQixTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFHbkY7SUFBQTtRQVNFOzs7O1dBSUc7UUFDSCxhQUFRLEdBQXNDLEVBQUUsQ0FBQztRQUV6QyxxQkFBZ0IsR0FBa0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQStCMUQsQ0FBQztJQTVDQyxzQkFBSSw2Q0FBVzthQUFmLFVBQWdCLFdBQThCO1lBQzVDLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO2dCQUN6QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDdEQ7UUFDSCxDQUFDOzs7T0FBQTtJQVdELHVDQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsd0JBQXdCLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU1RixJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZTthQUNsQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2FBQ3RDLFNBQVMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELDBDQUFXLEdBQVg7UUFDRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFJUyxnREFBaUIsR0FBM0IsVUFBNEIsS0FBNEI7UUFDOUMsSUFBQSxtQ0FBYSxFQUFFLHVEQUF1QixDQUFXO1FBQ3pELElBQ0UsYUFBYSxHQUFHLHVCQUF1QjtZQUN2QyxhQUFhLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUNqRDtZQUNBLHdEQUF3RDtZQUN4RCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztTQUN0RTtJQUNILENBQUM7SUFFTyxvREFBcUIsR0FBN0IsVUFBOEIsS0FBYTtRQUN6QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUE3Q2tEO1FBQWxELFNBQVMsQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztrRUFBd0M7SUE4QzVGLDJCQUFDO0NBQUEsQUEvQ0QsSUErQ0M7U0EvQ3FCLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0ZXBwZXJTZWxlY3Rpb25FdmVudCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9zdGVwcGVyJztcbmltcG9ydCB7IE9uRGVzdHJveSwgT25Jbml0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElNYW5hZ2VkT2JqZWN0IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQnVsa09wZXJhdGlvblN0ZXBwZXIgfSBmcm9tICcuL2NyZWF0aW9uL2J1bGstb3BlcmF0aW9uLXN0ZXBwZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE9wZXJhdGlvbkRldGFpbHMgfSBmcm9tICcuL29wZXJhdGlvbi1kZXRhaWxzLm1vZGVsJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VTdGVwcGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBAVmlld0NoaWxkKEJ1bGtPcGVyYXRpb25TdGVwcGVyLCB7IHN0YXRpYzogdHJ1ZSB9KSBvcGVyYXRpb25TdGVwcGVyOiBCdWxrT3BlcmF0aW9uU3RlcHBlcjtcblxuICBzZXQgZGV2aWNlVHlwZXMoZGV2aWNlVHlwZXM6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG4gICAgaWYgKHRoaXMub3BlcmF0aW9uU3RlcHBlcikge1xuICAgICAgdGhpcy5vcGVyYXRpb25TdGVwcGVyLmNoYW5nZURldmljZVR5cGVzKGRldmljZVR5cGVzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQSBtYXAgaG9sZGluZyBzdGVwIGRhdGEuIFRoZSBvcmRlciBvZiBwcm9wZXJ0aWVzIG5lZWQgdG8gbWF0Y2ggdGhlIG9yZGVyIG9mXG4gICAqIHRoZSBzdGVwcyB0aGV5IGhvbGQgZGF0YSBmb3IgYXMgdGhlIGluZGV4IG9mIHRoZSBwcm9wZXJ0eSBpcyB1c2VkIHRvIGNsZWFyXG4gICAqIHN0ZXAgZGF0YSB3aGVuIG5hdmlnYXRpbmcgZm9ydGggYWZ0ZXIgY2hhbmdpbmcgZGF0YSBhdCBhbiBlYXJsaWVyIHN0ZXAuXG4gICAqL1xuICBzdGVwRGF0YTogeyBba2V5OiBzdHJpbmddOiBJTWFuYWdlZE9iamVjdCB9ID0ge307XG5cbiAgcHJpdmF0ZSBlbmRTdWJzY3JpcHRpb25zOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3QoKTtcblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLm9wZXJhdGlvblN0ZXBwZXIucmV0cmlldmVPcGVyYXRpb25EZXRhaWxzID0gdGhpcy5yZXRyaWV2ZU9wZXJhdGlvblByb3RvdHlwZS5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5vcGVyYXRpb25TdGVwcGVyLnNlbGVjdGlvbkNoYW5nZVxuICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMuZW5kU3Vic2NyaXB0aW9ucykpXG4gICAgICAuc3Vic2NyaWJlKHRoaXMub25TZWxlY3Rpb25DaGFuZ2UuYmluZCh0aGlzKSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmVuZFN1YnNjcmlwdGlvbnMubmV4dCgpO1xuICAgIHRoaXMuZW5kU3Vic2NyaXB0aW9ucy5jb21wbGV0ZSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IHJldHJpZXZlT3BlcmF0aW9uUHJvdG90eXBlKCk6IE9wZXJhdGlvbkRldGFpbHMgfCBQcm9taXNlPE9wZXJhdGlvbkRldGFpbHM+O1xuXG4gIHByb3RlY3RlZCBvblNlbGVjdGlvbkNoYW5nZShldmVudDogU3RlcHBlclNlbGVjdGlvbkV2ZW50KSB7XG4gICAgY29uc3QgeyBzZWxlY3RlZEluZGV4LCBwcmV2aW91c2x5U2VsZWN0ZWRJbmRleCB9ID0gZXZlbnQ7XG4gICAgaWYgKFxuICAgICAgc2VsZWN0ZWRJbmRleCA+IHByZXZpb3VzbHlTZWxlY3RlZEluZGV4ICYmXG4gICAgICBzZWxlY3RlZEluZGV4IDwgT2JqZWN0LmtleXModGhpcy5zdGVwRGF0YSkubGVuZ3RoXG4gICAgKSB7XG4gICAgICAvLyBUT0RPIGNsZWFyIHN0ZXAgZGF0YSBvbmx5IGlmIHByZXZpb3VzIHN0ZXAgaXMgXCJkaXJ0eVwiXG4gICAgICB0aGlzLnN0ZXBEYXRhW3RoaXMuZ2V0U3RlcERhdGFLZXlCeUluZGV4KHNlbGVjdGVkSW5kZXgpXSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldFN0ZXBEYXRhS2V5QnlJbmRleChpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5zdGVwRGF0YSlbaW5kZXhdO1xuICB9XG59XG4iXX0=