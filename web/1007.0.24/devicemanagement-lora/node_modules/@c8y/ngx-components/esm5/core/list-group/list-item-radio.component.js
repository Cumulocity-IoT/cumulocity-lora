import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
var ListItemRadioComponent = /** @class */ (function () {
    function ListItemRadioComponent() {
        this.selected = false;
        this.name = 'list_item_radio';
        this.disabled = false;
        this.onSelect = new EventEmitter();
    }
    ListItemRadioComponent.prototype.ngOnChanges = function (changes) {
        if (changes.selected && !changes.selected.firstChange) {
            this.onSelect.emit(changes.selected.currentValue);
        }
    };
    ListItemRadioComponent.prototype.reset = function () {
        this.radio.nativeElement.checked = false;
    };
    tslib_1.__decorate([
        ViewChild('radio', { static: true })
    ], ListItemRadioComponent.prototype, "radio", void 0);
    tslib_1.__decorate([
        Input()
    ], ListItemRadioComponent.prototype, "selected", void 0);
    tslib_1.__decorate([
        Input()
    ], ListItemRadioComponent.prototype, "name", void 0);
    tslib_1.__decorate([
        Input()
    ], ListItemRadioComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        Output()
    ], ListItemRadioComponent.prototype, "onSelect", void 0);
    ListItemRadioComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-list-item-radio, c8y-li-radio',
            template: "<label class=\"c8y-radio\">\n  <input\n    #radio\n    type=\"radio\"\n    [name]=\"name\"\n    [checked]=\"selected\"\n    (change)=\"onSelect.emit($event.target.checked); (false)\"\n    [disabled]=\"disabled\"\n  />\n  <span></span>\n</label>\n<ng-content></ng-content>\n",
            host: {
                class: 'c8y-list__item__radio'
            }
        })
    ], ListItemRadioComponent);
    return ListItemRadioComponent;
}());
export { ListItemRadioComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1pdGVtLXJhZGlvLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2xpc3QtZ3JvdXAvbGlzdC1pdGVtLXJhZGlvLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFFTixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFTdkI7SUFQQTtRQVVFLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFakIsU0FBSSxHQUFHLGlCQUFpQixDQUFDO1FBRXpCLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFFMUIsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7SUFXekMsQ0FBQztJQVRDLDRDQUFXLEdBQVgsVUFBWSxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRTtZQUNyRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ25EO0lBQ0gsQ0FBQztJQUVELHNDQUFLLEdBQUw7UUFDRSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQzNDLENBQUM7SUFsQnFDO1FBQXJDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7eURBQW1CO0lBRXhEO1FBREMsS0FBSyxFQUFFOzREQUNTO0lBRWpCO1FBREMsS0FBSyxFQUFFO3dEQUNpQjtJQUV6QjtRQURDLEtBQUssRUFBRTs0REFDa0I7SUFFMUI7UUFEQyxNQUFNLEVBQUU7NERBQzhCO0lBVDVCLHNCQUFzQjtRQVBsQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsbUNBQW1DO1lBQzdDLDZSQUErQztZQUMvQyxJQUFJLEVBQUU7Z0JBQ0osS0FBSyxFQUFFLHVCQUF1QjthQUMvQjtTQUNGLENBQUM7T0FDVyxzQkFBc0IsQ0FvQmxDO0lBQUQsNkJBQUM7Q0FBQSxBQXBCRCxJQW9CQztTQXBCWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktbGlzdC1pdGVtLXJhZGlvLCBjOHktbGktcmFkaW8nLFxuICB0ZW1wbGF0ZVVybDogJy4vbGlzdC1pdGVtLXJhZGlvLmNvbXBvbmVudC5odG1sJyxcbiAgaG9zdDoge1xuICAgIGNsYXNzOiAnYzh5LWxpc3RfX2l0ZW1fX3JhZGlvJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIExpc3RJdGVtUmFkaW9Db21wb25lbnQge1xuICBAVmlld0NoaWxkKCdyYWRpbycsIHsgc3RhdGljOiB0cnVlIH0pIHJhZGlvOiBFbGVtZW50UmVmO1xuICBASW5wdXQoKVxuICBzZWxlY3RlZCA9IGZhbHNlO1xuICBASW5wdXQoKVxuICBuYW1lID0gJ2xpc3RfaXRlbV9yYWRpbyc7XG4gIEBJbnB1dCgpXG4gIGRpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XG4gIEBPdXRwdXQoKVxuICBvblNlbGVjdCA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMuc2VsZWN0ZWQgJiYgIWNoYW5nZXMuc2VsZWN0ZWQuZmlyc3RDaGFuZ2UpIHtcbiAgICAgIHRoaXMub25TZWxlY3QuZW1pdChjaGFuZ2VzLnNlbGVjdGVkLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5yYWRpby5uYXRpdmVFbGVtZW50LmNoZWNrZWQgPSBmYWxzZTtcbiAgfVxufVxuIl19