import * as tslib_1 from "tslib";
import { CommonModule as NgCommonModule } from '@angular/common';
import { APP_INITIALIZER, InjectionToken, NgModule } from '@angular/core';
import { DataModule } from '@c8y/ngx-components/api';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { distinctUntilChanged, filter, map, startWith, switchMap } from 'rxjs/operators';
import { I18nModule } from '../i18n/i18n.module';
import { TranslateService } from '../i18n/public-api';
import { DatePipe } from './date.pipe';
import { ForOfDirective } from './forOf.directive';
import { HumanizeAppNamePipe } from './humanize-app-name.pipe';
import { HumanizePipe } from './humanize.pipe';
import { IconDirective, ICONS } from './icon.directive';
import { LoadMoreComponent } from './load-more.component';
import { MapFunctionPipe } from './map-function.pipe';
import { HOOK_OPTIONS, OptionsService } from './options.service';
import { OutletDirective } from './outlet.directive';
import { ProgressBarComponent } from './progress-bar.component';
import { ShortenUserNamePipe } from './shorten-user-name.pipe';
import { SingleOperationComponent } from './single-operation.component';
import { AppStateService } from './ui-state.service';
import { UserPreferencesService } from './user-preferences/user-preferences.service';
export function initializeServices(translateService, state, userPreferences) {
    var initialize = function () {
        var queryStringLanguage = translateService.queryStringLang();
        var firstLanguage = translateService.firstSupportedLanguage();
        /*
          The ?lang parameter will prevent the user preference language from being activated
        */
        if (queryStringLanguage && translateService.isSupported(queryStringLanguage)) {
            translateService.switchToLanguage(queryStringLanguage);
        }
        else {
            state.currentUser
                .pipe(map(function (user) { return user && user.userName; }), filter(function (u) { return !!u; }), distinctUntilChanged(), switchMap(function () { return userPreferences.get('language'); }), startWith(firstLanguage), filter(function (lang) { return !!lang; }), distinctUntilChanged())
                .subscribe(function (lang) {
                translateService.switchToLanguage(lang);
            });
        }
    };
    return initialize;
}
export var ICON_LIST = new InjectionToken('iconList');
/**
 * Commonly used directives, data access and translation. This module is the shared
 * module across all core components. It should be imported by default.
 *
 * @exports IconDirective A directive to set a c8y icon with [c8yIcon]="'rocket'".
 * @exports OutletDirective A directive which allows to set DOM or Angular templates (used for upgrade).
 * @exports I18nModule Translation module.
 * @exports NgCommonModule Angular common module.
 * @exports DataModule The data layer to allow DI with @c8y/client
 * @exports HumanizeAppNamePipe Humanize an application name (e.g. in the app switcher)
 * @exports HumanizePipe Humanize a word. E.g. `device management` gets `Device management`
 * @exports ShortenUserNamePipe Allows a short name. E.g. `Foo Bar` gets `F. Bar`
 * @exports ForOfDirective A forOf directive like ngFor but with load-more function
 * @exports LoadMoreComponent A component to load more data from a certain data-source
 * @exports ProgressBarComponent Displays either defined or undefined progress.
 */
var CommonModule = /** @class */ (function () {
    function CommonModule() {
    }
    CommonModule_1 = CommonModule;
    CommonModule.providers = function () {
        return tslib_1.__spread(DataModule.providers(), [
            // TODO: maybe we can think of a way to remove this C8Y_APP global
            { provide: HOOK_OPTIONS, useValue: window.C8Y_APP || {}, multi: true },
            {
                provide: APP_INITIALIZER,
                useFactory: initializeServices,
                deps: [TranslateService, AppStateService, UserPreferencesService],
                multi: true
            },
            { provide: ICON_LIST, useValue: ICONS, multi: false }
        ], I18nModule.providers(), [
            UserPreferencesService,
            OptionsService,
            AppStateService
        ]);
    };
    CommonModule.forRoot = function () {
        return {
            ngModule: CommonModule_1,
            providers: CommonModule_1.providers()
        };
    };
    var CommonModule_1;
    CommonModule = CommonModule_1 = tslib_1.__decorate([
        NgModule({
            imports: [NgCommonModule, I18nModule, TooltipModule],
            exports: [
                IconDirective,
                OutletDirective,
                I18nModule,
                NgCommonModule,
                HumanizeAppNamePipe,
                HumanizePipe,
                ShortenUserNamePipe,
                ForOfDirective,
                LoadMoreComponent,
                MapFunctionPipe,
                ProgressBarComponent,
                SingleOperationComponent,
                DatePipe
            ],
            declarations: [
                IconDirective,
                OutletDirective,
                HumanizePipe,
                HumanizeAppNamePipe,
                ShortenUserNamePipe,
                ForOfDirective,
                LoadMoreComponent,
                MapFunctionPipe,
                ProgressBarComponent,
                SingleOperationComponent,
                DatePipe
            ],
            entryComponents: [LoadMoreComponent]
        })
    ], CommonModule);
    return CommonModule;
}());
export { CommonModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2NvbW1vbi9jb21tb24ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxJQUFJLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDckQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDdEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN2QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakUsT0FBTyxFQUFF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VUFBVSxFQUFFLGFBQWEsQ0FBQztZQUNwRCxPQUFPLEVBQUU7Z0JBQ1AsYUFBYTtnQkFDYixlQUFlO2dCQUNmLFVBQVU7Z0JBQ1YsY0FBYztnQkFDZCxtQkFBbUI7Z0JBQ25CLFlBQVk7Z0JBQ1osbUJBQW1CO2dCQUNuQixjQUFjO2dCQUNkLGlCQUFpQjtnQkFDakIsZUFBZTtnQkFDZixvQkFBb0I7Z0JBQ3BCLHdCQUF3QjtnQkFDeEIsUUFBUTthQUNUO1lBQ0QsWUFBWSxFQUFFO2dCQUNaLGFBQWE7Z0JBQ2IsZUFBZTtnQkFDZixZQUFZO2dCQUNaLG1CQUFtQjtnQkFDbkIsbUJBQW1CO2dCQUNuQixjQUFjO2dCQUNkLGlCQUFpQjtnQkFDakIsZUFBZTtnQkFDZixvQkFBb0I7Z0JBQ3BCLHdCQUF3QjtnQkFDeEIsUUFBUTthQUNUO1lBQ0QsZUFBZSxFQUFFLENBQUMsaUJBQWlCLENBQUM7U0FDckMsQ0FBQztPQUNXLFlBQVksQ0EwQnhCO0lBQUQsbUJBQUM7Q0FBQSxBQTFCRCxJQTBCQztTQTFCWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIGFzIE5nQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEFQUF9JTklUSUFMSVpFUiwgSW5qZWN0aW9uVG9rZW4sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRhTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9hcGknO1xuaW1wb3J0IHsgVG9vbHRpcE1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvdG9vbHRpcCc7XG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgZmlsdGVyLCBtYXAsIHN0YXJ0V2l0aCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSTE4bk1vZHVsZSB9IGZyb20gJy4uL2kxOG4vaTE4bi5tb2R1bGUnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJy4uL2kxOG4vcHVibGljLWFwaSc7XG5pbXBvcnQgeyBEYXRlUGlwZSB9IGZyb20gJy4vZGF0ZS5waXBlJztcbmltcG9ydCB7IEZvck9mRGlyZWN0aXZlIH0gZnJvbSAnLi9mb3JPZi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSHVtYW5pemVBcHBOYW1lUGlwZSB9IGZyb20gJy4vaHVtYW5pemUtYXBwLW5hbWUucGlwZSc7XG5pbXBvcnQgeyBIdW1hbml6ZVBpcGUgfSBmcm9tICcuL2h1bWFuaXplLnBpcGUnO1xuaW1wb3J0IHsgSWNvbkRpcmVjdGl2ZSwgSUNPTlMgfSBmcm9tICcuL2ljb24uZGlyZWN0aXZlJztcbmltcG9ydCB7IExvYWRNb3JlQ29tcG9uZW50IH0gZnJvbSAnLi9sb2FkLW1vcmUuY29tcG9uZW50JztcbmltcG9ydCB7IE1hcEZ1bmN0aW9uUGlwZSB9IGZyb20gJy4vbWFwLWZ1bmN0aW9uLnBpcGUnO1xuaW1wb3J0IHsgSE9PS19PUFRJT05TLCBPcHRpb25zU2VydmljZSB9IGZyb20gJy4vb3B0aW9ucy5zZXJ2aWNlJztcbmltcG9ydCB7IE91dGxldERpcmVjdGl2ZSB9IGZyb20gJy4vb3V0bGV0LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBQcm9ncmVzc0JhckNvbXBvbmVudCB9IGZyb20gJy4vcHJvZ3Jlc3MtYmFyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTaG9ydGVuVXNlck5hbWVQaXBlIH0gZnJvbSAnLi9zaG9ydGVuLXVzZXItbmFtZS5waXBlJztcbmltcG9ydCB7IFNpbmdsZU9wZXJhdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vc2luZ2xlLW9wZXJhdGlvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgQXBwU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi91aS1zdGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UgfSBmcm9tICcuL3VzZXItcHJlZmVyZW5jZXMvdXNlci1wcmVmZXJlbmNlcy5zZXJ2aWNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVTZXJ2aWNlcyhcbiAgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSxcbiAgc3RhdGU6IEFwcFN0YXRlU2VydmljZSxcbiAgdXNlclByZWZlcmVuY2VzOiBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlXG4pIHtcbiAgY29uc3QgaW5pdGlhbGl6ZSA9ICgpID0+IHtcbiAgICBjb25zdCBxdWVyeVN0cmluZ0xhbmd1YWdlID0gdHJhbnNsYXRlU2VydmljZS5xdWVyeVN0cmluZ0xhbmcoKTtcbiAgICBjb25zdCBmaXJzdExhbmd1YWdlID0gdHJhbnNsYXRlU2VydmljZS5maXJzdFN1cHBvcnRlZExhbmd1YWdlKCk7XG5cbiAgICAvKlxuICAgICAgVGhlID9sYW5nIHBhcmFtZXRlciB3aWxsIHByZXZlbnQgdGhlIHVzZXIgcHJlZmVyZW5jZSBsYW5ndWFnZSBmcm9tIGJlaW5nIGFjdGl2YXRlZFxuICAgICovXG4gICAgaWYgKHF1ZXJ5U3RyaW5nTGFuZ3VhZ2UgJiYgdHJhbnNsYXRlU2VydmljZS5pc1N1cHBvcnRlZChxdWVyeVN0cmluZ0xhbmd1YWdlKSkge1xuICAgICAgdHJhbnNsYXRlU2VydmljZS5zd2l0Y2hUb0xhbmd1YWdlKHF1ZXJ5U3RyaW5nTGFuZ3VhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5jdXJyZW50VXNlclxuICAgICAgICAucGlwZShcbiAgICAgICAgICBtYXAodXNlciA9PiB1c2VyICYmIHVzZXIudXNlck5hbWUpLFxuICAgICAgICAgIGZpbHRlcih1ID0+ICEhdSksXG4gICAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gdXNlclByZWZlcmVuY2VzLmdldCgnbGFuZ3VhZ2UnKSksXG4gICAgICAgICAgc3RhcnRXaXRoKGZpcnN0TGFuZ3VhZ2UpLFxuICAgICAgICAgIGZpbHRlcihsYW5nID0+ICEhbGFuZyksXG4gICAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKVxuICAgICAgICApXG4gICAgICAgIC5zdWJzY3JpYmUobGFuZyA9PiB7XG4gICAgICAgICAgdHJhbnNsYXRlU2VydmljZS5zd2l0Y2hUb0xhbmd1YWdlKGxhbmcpO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBpbml0aWFsaXplO1xufVxuXG5leHBvcnQgY29uc3QgSUNPTl9MSVNUID0gbmV3IEluamVjdGlvblRva2VuKCdpY29uTGlzdCcpO1xuXG4vKipcbiAqIENvbW1vbmx5IHVzZWQgZGlyZWN0aXZlcywgZGF0YSBhY2Nlc3MgYW5kIHRyYW5zbGF0aW9uLiBUaGlzIG1vZHVsZSBpcyB0aGUgc2hhcmVkXG4gKiBtb2R1bGUgYWNyb3NzIGFsbCBjb3JlIGNvbXBvbmVudHMuIEl0IHNob3VsZCBiZSBpbXBvcnRlZCBieSBkZWZhdWx0LlxuICpcbiAqIEBleHBvcnRzIEljb25EaXJlY3RpdmUgQSBkaXJlY3RpdmUgdG8gc2V0IGEgYzh5IGljb24gd2l0aCBbYzh5SWNvbl09XCIncm9ja2V0J1wiLlxuICogQGV4cG9ydHMgT3V0bGV0RGlyZWN0aXZlIEEgZGlyZWN0aXZlIHdoaWNoIGFsbG93cyB0byBzZXQgRE9NIG9yIEFuZ3VsYXIgdGVtcGxhdGVzICh1c2VkIGZvciB1cGdyYWRlKS5cbiAqIEBleHBvcnRzIEkxOG5Nb2R1bGUgVHJhbnNsYXRpb24gbW9kdWxlLlxuICogQGV4cG9ydHMgTmdDb21tb25Nb2R1bGUgQW5ndWxhciBjb21tb24gbW9kdWxlLlxuICogQGV4cG9ydHMgRGF0YU1vZHVsZSBUaGUgZGF0YSBsYXllciB0byBhbGxvdyBESSB3aXRoIEBjOHkvY2xpZW50XG4gKiBAZXhwb3J0cyBIdW1hbml6ZUFwcE5hbWVQaXBlIEh1bWFuaXplIGFuIGFwcGxpY2F0aW9uIG5hbWUgKGUuZy4gaW4gdGhlIGFwcCBzd2l0Y2hlcilcbiAqIEBleHBvcnRzIEh1bWFuaXplUGlwZSBIdW1hbml6ZSBhIHdvcmQuIEUuZy4gYGRldmljZSBtYW5hZ2VtZW50YCBnZXRzIGBEZXZpY2UgbWFuYWdlbWVudGBcbiAqIEBleHBvcnRzIFNob3J0ZW5Vc2VyTmFtZVBpcGUgQWxsb3dzIGEgc2hvcnQgbmFtZS4gRS5nLiBgRm9vIEJhcmAgZ2V0cyBgRi4gQmFyYFxuICogQGV4cG9ydHMgRm9yT2ZEaXJlY3RpdmUgQSBmb3JPZiBkaXJlY3RpdmUgbGlrZSBuZ0ZvciBidXQgd2l0aCBsb2FkLW1vcmUgZnVuY3Rpb25cbiAqIEBleHBvcnRzIExvYWRNb3JlQ29tcG9uZW50IEEgY29tcG9uZW50IHRvIGxvYWQgbW9yZSBkYXRhIGZyb20gYSBjZXJ0YWluIGRhdGEtc291cmNlXG4gKiBAZXhwb3J0cyBQcm9ncmVzc0JhckNvbXBvbmVudCBEaXNwbGF5cyBlaXRoZXIgZGVmaW5lZCBvciB1bmRlZmluZWQgcHJvZ3Jlc3MuXG4gKi9cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtOZ0NvbW1vbk1vZHVsZSwgSTE4bk1vZHVsZSwgVG9vbHRpcE1vZHVsZV0sXG4gIGV4cG9ydHM6IFtcbiAgICBJY29uRGlyZWN0aXZlLFxuICAgIE91dGxldERpcmVjdGl2ZSxcbiAgICBJMThuTW9kdWxlLFxuICAgIE5nQ29tbW9uTW9kdWxlLFxuICAgIEh1bWFuaXplQXBwTmFtZVBpcGUsXG4gICAgSHVtYW5pemVQaXBlLFxuICAgIFNob3J0ZW5Vc2VyTmFtZVBpcGUsXG4gICAgRm9yT2ZEaXJlY3RpdmUsXG4gICAgTG9hZE1vcmVDb21wb25lbnQsXG4gICAgTWFwRnVuY3Rpb25QaXBlLFxuICAgIFByb2dyZXNzQmFyQ29tcG9uZW50LFxuICAgIFNpbmdsZU9wZXJhdGlvbkNvbXBvbmVudCxcbiAgICBEYXRlUGlwZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBJY29uRGlyZWN0aXZlLFxuICAgIE91dGxldERpcmVjdGl2ZSxcbiAgICBIdW1hbml6ZVBpcGUsXG4gICAgSHVtYW5pemVBcHBOYW1lUGlwZSxcbiAgICBTaG9ydGVuVXNlck5hbWVQaXBlLFxuICAgIEZvck9mRGlyZWN0aXZlLFxuICAgIExvYWRNb3JlQ29tcG9uZW50LFxuICAgIE1hcEZ1bmN0aW9uUGlwZSxcbiAgICBQcm9ncmVzc0JhckNvbXBvbmVudCxcbiAgICBTaW5nbGVPcGVyYXRpb25Db21wb25lbnQsXG4gICAgRGF0ZVBpcGVcbiAgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbTG9hZE1vcmVDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIENvbW1vbk1vZHVsZSB7XG4gIHN0YXRpYyBwcm92aWRlcnMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIC4uLkRhdGFNb2R1bGUucHJvdmlkZXJzKCksXG4gICAgICAvLyBUT0RPOiBtYXliZSB3ZSBjYW4gdGhpbmsgb2YgYSB3YXkgdG8gcmVtb3ZlIHRoaXMgQzhZX0FQUCBnbG9iYWxcbiAgICAgIHsgcHJvdmlkZTogSE9PS19PUFRJT05TLCB1c2VWYWx1ZTogKHdpbmRvdyBhcyBhbnkpLkM4WV9BUFAgfHwge30sIG11bHRpOiB0cnVlIH0sXG4gICAgICB7XG4gICAgICAgIHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUixcbiAgICAgICAgdXNlRmFjdG9yeTogaW5pdGlhbGl6ZVNlcnZpY2VzLFxuICAgICAgICBkZXBzOiBbVHJhbnNsYXRlU2VydmljZSwgQXBwU3RhdGVTZXJ2aWNlLCBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlXSxcbiAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgIH0sXG4gICAgICB7IHByb3ZpZGU6IElDT05fTElTVCwgdXNlVmFsdWU6IElDT05TLCBtdWx0aTogZmFsc2UgfSxcbiAgICAgIC4uLkkxOG5Nb2R1bGUucHJvdmlkZXJzKCksXG4gICAgICBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlLFxuICAgICAgT3B0aW9uc1NlcnZpY2UsXG4gICAgICBBcHBTdGF0ZVNlcnZpY2VcbiAgICBdO1xuICB9XG5cbiAgc3RhdGljIGZvclJvb3QoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBDb21tb25Nb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IENvbW1vbk1vZHVsZS5wcm92aWRlcnMoKVxuICAgIH07XG4gIH1cbn1cbiJdfQ==