import * as tslib_1 from "tslib";
import { Injector, Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivate, Router } from '@angular/router';
import { from, isObservable, of } from 'rxjs';
import { every, filter, map, mergeMap, toArray, tap } from 'rxjs/operators';
var RouterTabsResolver = /** @class */ (function () {
    function RouterTabsResolver(injector, router) {
        this.injector = injector;
        this.router = router;
    }
    Object.defineProperty(RouterTabsResolver.prototype, "routerStateSnapshot", {
        get: function () {
            return this.router.routerState.snapshot;
        },
        enumerable: true,
        configurable: true
    });
    RouterTabsResolver.prototype.resolve = function (route) {
        var _this = this;
        var latestChildren = this.router.config.find(function (r) { return route.routeConfig.path === r.path; }).children;
        return from(latestChildren || []).pipe(mergeMap(function (child) {
            return from(_this.getGuards(child)).pipe(map(function (guard) { return guard.canActivate(route, _this.routerStateSnapshot); }), mergeMap(function (result) {
                if (isObservable(result)) {
                    return result;
                }
                if (result && typeof result.then === 'function') {
                    return from(result);
                }
                return of(result);
            }), tap(function (result) {
                if (Array.isArray(result)) {
                    child.tabs = result;
                }
            }), every(function (result) { return !!result; }), filter(function (result) { return result; }), mergeMap(function () { return (Array.isArray(child.tabs) ? from(child.tabs) : of(child)); }), map(function (result) {
                return result.label
                    ? {
                        label: result.label,
                        icon: result.icon,
                        path: route.url.join('/') + "/" + result.path,
                        priority: result.priority
                    }
                    : undefined;
            }));
        }), filter(function (tabs) { return !!tabs; }), toArray());
    };
    RouterTabsResolver.prototype.getGuards = function (child) {
        var _this = this;
        var guards = (child.canActivate || []).map(function (guard) {
            return _this.injector.get(guard);
        });
        if (child.data && child.data.showIf) {
            guards.push({ canActivate: child.data.showIf });
        }
        return guards;
    };
    RouterTabsResolver.ctorParameters = function () { return [
        { type: Injector },
        { type: Router }
    ]; };
    RouterTabsResolver = tslib_1.__decorate([
        Injectable()
    ], RouterTabsResolver);
    return RouterTabsResolver;
}());
export { RouterTabsResolver };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLXRhYnMucmVzb2x2ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9yb3V0ZXIvcm91dGVyLXRhYnMucmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUUsT0FBTyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQzFELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBZ0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUsxRjtJQUNFLDRCQUFvQixRQUFrQixFQUFVLE1BQWM7UUFBMUMsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVE7SUFBRyxDQUFDO0lBRWxFLHNCQUFJLG1EQUFtQjthQUF2QjtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDO1FBQzFDLENBQUM7OztPQUFBO0lBRUQsb0NBQU8sR0FBUCxVQUFRLEtBQTZCO1FBQXJDLGlCQXNDQztRQXJDQyxJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFqQyxDQUFpQyxDQUFDLENBQUMsUUFBUSxDQUFDO1FBQ2hHLE9BQU8sSUFBSSxDQUFDLGNBQWMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ3BDLFFBQVEsQ0FBQyxVQUFDLEtBQVk7WUFDcEIsT0FBQSxJQUFJLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDOUIsR0FBRyxDQUFDLFVBQUMsS0FBa0IsSUFBSyxPQUFBLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEtBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFsRCxDQUFrRCxDQUFDLEVBQy9FLFFBQVEsQ0FBQyxVQUFDLE1BQVc7Z0JBQ25CLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFO29CQUN4QixPQUFPLE1BQU0sQ0FBQztpQkFDZjtnQkFDRCxJQUFJLE1BQU0sSUFBSSxPQUFPLE1BQU0sQ0FBQyxJQUFJLEtBQUssVUFBVSxFQUFFO29CQUMvQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDckI7Z0JBQ0QsT0FBTyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDcEIsQ0FBQyxDQUFDLEVBQ0YsR0FBRyxDQUFDLFVBQUEsTUFBTTtnQkFDUixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQ3pCLEtBQUssQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO2lCQUNyQjtZQUNILENBQUMsQ0FBQyxFQUNGLEtBQUssQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLENBQUMsQ0FBQyxNQUFNLEVBQVIsQ0FBUSxDQUFDLEVBQ3pCLE1BQU0sQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sRUFBTixDQUFNLENBQUMsRUFDeEIsUUFBUSxDQUFDLGNBQU0sT0FBQSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBWSxDQUFDLENBQUMsRUFBakUsQ0FBaUUsQ0FBQyxFQUNqRixHQUFHLENBQUMsVUFBQSxNQUFNO2dCQUNSLE9BQUEsTUFBTSxDQUFDLEtBQUs7b0JBQ1YsQ0FBQyxDQUFFO3dCQUNDLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSzt3QkFDbkIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO3dCQUNqQixJQUFJLEVBQUssS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQUksTUFBTSxDQUFDLElBQU07d0JBQzdDLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUTtxQkFDbEI7b0JBQ1gsQ0FBQyxDQUFDLFNBQVM7WUFQYixDQU9hLENBQ2QsQ0FDRjtRQTdCRCxDQTZCQyxDQUNGLEVBQ0QsTUFBTSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsQ0FBQyxDQUFDLElBQUksRUFBTixDQUFNLENBQUMsRUFDdEIsT0FBTyxFQUFFLENBQ1csQ0FBQztJQUN6QixDQUFDO0lBRU8sc0NBQVMsR0FBakIsVUFBa0IsS0FBWTtRQUE5QixpQkFRQztRQVBDLElBQU0sTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxLQUFLO1lBQ2hELE9BQU8sS0FBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDbkMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLFdBQVcsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDakQ7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztnQkF0RDZCLFFBQVE7Z0JBQWtCLE1BQU07O0lBRG5ELGtCQUFrQjtRQUQ5QixVQUFVLEVBQUU7T0FDQSxrQkFBa0IsQ0F3RDlCO0lBQUQseUJBQUM7Q0FBQSxBQXhERCxJQXdEQztTQXhEWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgQ2FuQWN0aXZhdGUsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBmcm9tLCBpc09ic2VydmFibGUsIG9mLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBldmVyeSwgZmlsdGVyLCBtYXAsIG1lcmdlTWFwLCB0b0FycmF5LCB0YXAsIGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFRhYiB9IGZyb20gJy4uL3RhYnMvdGFiLm1vZGVsJztcbmltcG9ydCB7IFJvdXRlIH0gZnJvbSAnLi9yb3V0ZXIubW9kZWxzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJvdXRlclRhYnNSZXNvbHZlciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIHJvdXRlcjogUm91dGVyKSB7fVxuXG4gIGdldCByb3V0ZXJTdGF0ZVNuYXBzaG90KCkge1xuICAgIHJldHVybiB0aGlzLnJvdXRlci5yb3V0ZXJTdGF0ZS5zbmFwc2hvdDtcbiAgfVxuXG4gIHJlc29sdmUocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpIHtcbiAgICBjb25zdCBsYXRlc3RDaGlsZHJlbiA9IHRoaXMucm91dGVyLmNvbmZpZy5maW5kKHIgPT4gcm91dGUucm91dGVDb25maWcucGF0aCA9PT0gci5wYXRoKS5jaGlsZHJlbjtcbiAgICByZXR1cm4gZnJvbShsYXRlc3RDaGlsZHJlbiB8fCBbXSkucGlwZShcbiAgICAgIG1lcmdlTWFwKChjaGlsZDogUm91dGUpID0+XG4gICAgICAgIGZyb20odGhpcy5nZXRHdWFyZHMoY2hpbGQpKS5waXBlKFxuICAgICAgICAgIG1hcCgoZ3VhcmQ6IENhbkFjdGl2YXRlKSA9PiBndWFyZC5jYW5BY3RpdmF0ZShyb3V0ZSwgdGhpcy5yb3V0ZXJTdGF0ZVNuYXBzaG90KSksXG4gICAgICAgICAgbWVyZ2VNYXAoKHJlc3VsdDogYW55KSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNPYnNlcnZhYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmcm9tKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb2YocmVzdWx0KTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB0YXAocmVzdWx0ID0+IHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgY2hpbGQudGFicyA9IHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBldmVyeShyZXN1bHQgPT4gISFyZXN1bHQpLFxuICAgICAgICAgIGZpbHRlcihyZXN1bHQgPT4gcmVzdWx0KSxcbiAgICAgICAgICBtZXJnZU1hcCgoKSA9PiAoQXJyYXkuaXNBcnJheShjaGlsZC50YWJzKSA/IGZyb20oY2hpbGQudGFicykgOiBvZihjaGlsZCBhcyBUYWIpKSksXG4gICAgICAgICAgbWFwKHJlc3VsdCA9PlxuICAgICAgICAgICAgcmVzdWx0LmxhYmVsXG4gICAgICAgICAgICAgID8gKHtcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiByZXN1bHQubGFiZWwsXG4gICAgICAgICAgICAgICAgICBpY29uOiByZXN1bHQuaWNvbixcbiAgICAgICAgICAgICAgICAgIHBhdGg6IGAke3JvdXRlLnVybC5qb2luKCcvJyl9LyR7cmVzdWx0LnBhdGh9YCxcbiAgICAgICAgICAgICAgICAgIHByaW9yaXR5OiByZXN1bHQucHJpb3JpdHlcbiAgICAgICAgICAgICAgICB9IGFzIFRhYilcbiAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICksXG4gICAgICBmaWx0ZXIodGFicyA9PiAhIXRhYnMpLFxuICAgICAgdG9BcnJheSgpXG4gICAgKSBhcyBPYnNlcnZhYmxlPFRhYltdPjtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0R3VhcmRzKGNoaWxkOiBSb3V0ZSkge1xuICAgIGNvbnN0IGd1YXJkcyA9IChjaGlsZC5jYW5BY3RpdmF0ZSB8fCBbXSkubWFwKGd1YXJkID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmluamVjdG9yLmdldChndWFyZCk7XG4gICAgfSk7XG4gICAgaWYgKGNoaWxkLmRhdGEgJiYgY2hpbGQuZGF0YS5zaG93SWYpIHtcbiAgICAgIGd1YXJkcy5wdXNoKHsgY2FuQWN0aXZhdGU6IGNoaWxkLmRhdGEuc2hvd0lmIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZ3VhcmRzO1xuICB9XG59XG4iXX0=