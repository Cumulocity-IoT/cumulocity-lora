import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, HostBinding, Input, Output, TemplateRef } from '@angular/core';
var LoadMoreComponent = /** @class */ (function () {
    function LoadMoreComponent(element) {
        this.element = element;
        this.useIntersection = true;
        this.hidden = false;
        this.class = 'c8y-list__item bg-transparent';
        this.maxIterations = 10;
        this.onLoad = new EventEmitter();
        this.isLoading = false;
        this.counter = 0;
        this.showNoMoreDataHint = false;
        this.LOAD_SAME_PAGE_THRESHOLD = 50;
    }
    Object.defineProperty(LoadMoreComponent.prototype, "hostClass", {
        get: function () {
            return this.hidden || (!this.hasMore && !this.showNoMoreDataHint) ? '' : this.class;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadMoreComponent.prototype, "hasMore", {
        get: function () {
            return (this.paging && (this.paging.totalPages > this.paging.currentPage || !!this.paging.nextPage));
        },
        enumerable: true,
        configurable: true
    });
    LoadMoreComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.useIntersection && 'IntersectionObserver' in window) {
            this.intersectionObserver = new IntersectionObserver(function (event) { return _this.buttonInView(event[0]); }, {
                root: this.container ? this.container.nativeElement : null
            });
            this.intersectionObserver.observe(this.element.nativeElement);
        }
        this.showNoMoreDataHint = this.shouldShowNoMoreDataHint();
    };
    LoadMoreComponent.prototype.ngOnDestroy = function () {
        if (this.intersectionObserver) {
            this.intersectionObserver.disconnect();
        }
    };
    LoadMoreComponent.prototype.loadMore = function (event) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.isLoading = true;
                        if (event) {
                            event.stopPropagation();
                        }
                        if (!this.hasMore) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.paging.next()];
                    case 1:
                        result = _a.sent();
                        this.counter++;
                        this.paging = result.paging;
                        this.onLoad.emit(result.data);
                        this.intersectionLoading();
                        this.showNoMoreDataHint = this.shouldShowNoMoreDataHint();
                        return [3 /*break*/, 3];
                    case 2:
                        this.counter = 0;
                        this.isLoading = false;
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    LoadMoreComponent.prototype.intersectionLoading = function () {
        var _this = this;
        if (this.useIntersection && this.hasMore && this.loadUntilIntersected !== null) {
            this.loadUntilIntersected = setTimeout(function () { return _this.loadMore(); }, this.getLoadingThreshold());
            this.useIntersection = this.shouldSwitchMode();
        }
        else {
            this.isLoading = false;
            this.loadUntilIntersected = undefined;
        }
    };
    LoadMoreComponent.prototype.getLoadingThreshold = function () {
        return this.LOAD_SAME_PAGE_THRESHOLD * this.counter;
    };
    LoadMoreComponent.prototype.shouldShowNoMoreDataHint = function () {
        return (this.counter !== 0 || this.noMoreDataHint) && !this.hasMore && !this.hidden;
    };
    LoadMoreComponent.prototype.shouldSwitchMode = function () {
        return this.counter < this.maxIterations || this.hidden;
    };
    LoadMoreComponent.prototype.buttonInView = function (event) {
        if (event.isIntersecting) {
            this.loadMore();
        }
        else if (this.loadUntilIntersected) {
            clearTimeout(this.loadUntilIntersected);
            this.loadUntilIntersected = null;
            this.isLoading = false;
        }
        else {
            // avoiding a race condition when timeout is faster
            // cleared then set
            this.loadUntilIntersected = null;
        }
    };
    LoadMoreComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    tslib_1.__decorate([
        Input()
    ], LoadMoreComponent.prototype, "paging", void 0);
    tslib_1.__decorate([
        Input()
    ], LoadMoreComponent.prototype, "useIntersection", void 0);
    tslib_1.__decorate([
        Input()
    ], LoadMoreComponent.prototype, "hidden", void 0);
    tslib_1.__decorate([
        Input()
    ], LoadMoreComponent.prototype, "container", void 0);
    tslib_1.__decorate([
        Input()
    ], LoadMoreComponent.prototype, "class", void 0);
    tslib_1.__decorate([
        Input()
    ], LoadMoreComponent.prototype, "maxIterations", void 0);
    tslib_1.__decorate([
        Input()
    ], LoadMoreComponent.prototype, "noMoreDataHint", void 0);
    tslib_1.__decorate([
        Input()
    ], LoadMoreComponent.prototype, "loadNextLabel", void 0);
    tslib_1.__decorate([
        Input()
    ], LoadMoreComponent.prototype, "loadingLabel", void 0);
    tslib_1.__decorate([
        Output()
    ], LoadMoreComponent.prototype, "onLoad", void 0);
    tslib_1.__decorate([
        HostBinding('class')
    ], LoadMoreComponent.prototype, "hostClass", null);
    LoadMoreComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-load-more',
            template: "<button\n  class=\"btn btn-default btn-block text-center\"\n  (click)=\"loadMore($event)\"\n  [ngClass]=\"{ 'btn-pending': isLoading }\"\n  *ngIf=\"hasMore\"\n  [style.visibility]=\"hidden ? 'hidden' : 'visible'\"\n  [style.height]=\"hidden ? '1px' : null\"\n  title=\"{{ 'Load more' | translate }}\"\n>\n  <ng-container *ngIf=\"!isLoading\">\n    <span *ngIf=\"loadNextLabel; else loadPage\" [innerHTML]=\"loadNextLabel | translate\"></span>\n    <ng-template #loadPage>\n      <span translate ngNonBindable [translateParams]=\"{ pageNo: paging.currentPage + 1 }\">\n        Load page {{ pageNo }}</span\n      >\n    </ng-template>\n  </ng-container>\n  <ng-container *ngIf=\"isLoading\">\n    <span *ngIf=\"loadingLabel; else loading\" [innerHTML]=\"loadingLabel | translate\"></span>\n    <ng-template #loading>\n      <span translate ngNonBindable [translateParams]=\"{ pageNo: paging.currentPage + 1 }\">\n        Page {{ pageNo }} is loading\u2026\n      </span>\n    </ng-template>\n  </ng-container>\n</button>\n\n<ng-container *ngIf=\"showNoMoreDataHint\">\n  <ng-container *ngTemplateOutlet=\"noMoreDataHint || finishHint\"></ng-container>\n</ng-container>\n\n<ng-template #finishHint>\n  <div class=\"legend form-block center\">\n    <i [c8yIcon]=\"'flag-checkered'\" class=\"m-r-4\"></i>\n    {{ 'Last record' | translate }}\n  </div>\n</ng-template>\n"
        })
    ], LoadMoreComponent);
    return LoadMoreComponent;
}());
export { LoadMoreComponent };
//# sourceMappingURL=data:application/json;base64,