import * as tslib_1 from "tslib";
import { CdkHeaderCell } from '@angular/cdk/table';
import { AfterViewInit, ChangeDetectorRef, Component, ComponentFactory, ComponentFactoryResolver, ContentChildren, ElementRef, EventEmitter, Input, OnChanges, Output, QueryList, ViewChild, ViewChildren, ViewContainerRef } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { flow, get, parseInt as _parseInt, union, without } from 'lodash-es';
import { combineLatest, Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, first, mergeMap, take, takeUntil, tap } from 'rxjs/operators';
import { LoadMoreComponent } from '../common/load-more.component';
import { gettext } from '../i18n/gettext';
import { ColumnDirective } from './column/column.directive';
import { FilteringActionType, minColumnGridTrackSize, ratiosByColumnTypes } from './data-grid.model';
import { GridDataSource } from './grid-data-source';
var DataGridComponent = /** @class */ (function () {
    function DataGridComponent(sanitizer, hostRef, cd, cfr) {
        this.sanitizer = sanitizer;
        this.hostRef = hostRef;
        this.cd = cd;
        this.cfr = cfr;
        this.title = gettext('Items');
        this.loadMoreItemsLabel = gettext('Load more items');
        this.loadingItemsLabel = gettext('Loading itemsâ€¦');
        this.noMatchingItemsLabel = gettext('No matching items.');
        this.dataSource = new GridDataSource();
        this.filteringLabelsParams = {
            filteredItemsCount: 0,
            allItemsCount: 0
        };
        this.paginationLabelParams = {
            pageFirstItemIdx: 0,
            pageLastItemIdx: 0,
            itemsTotal: 0
        };
        this.possiblePageSizes = [10, 15, 20, 30, 50];
        this.minPossiblePageSize = Math.min.apply(Math, tslib_1.__spread(this.possiblePageSizes));
        this.selectable = false;
        this.selectionPrimaryKey = 'id';
        this.displayOptions = {
            striped: true,
            bordered: false,
            gridHeader: true
        };
        this.rowMouseOver = new EventEmitter();
        this.rowMouseLeave = new EventEmitter();
        this.rowClick = new EventEmitter();
        this.itemsSelect = new EventEmitter();
        this.columnNames = [];
        this.styles = {
            tableCursor: 'auto',
            gridTemplateColumns: undefined,
            gridInfiniteScrollColumn: undefined
        };
        this.searchText$ = new EventEmitter();
        this.searchText = '';
        this.filteringApplied = false;
        this.totalPagesCount = Infinity;
        this.selectedItemIds = [];
        this.currentPageSelectionState = {
            allSelected: false,
            allDeselected: true
        };
        this.builtInActionType = {
            Edit: "EDIT" /* Edit */,
            Delete: "DELETE" /* Delete */,
            Export: "EXPORT" /* Export */
        };
        this.resizeHandleMouseDown$ = new EventEmitter();
        this.resizeHandleContainerMouseMove$ = new EventEmitter();
        this.resizeHandleContainerMouseUp$ = new EventEmitter();
        this.unsubscribe$ = new Subject();
    }
    Object.defineProperty(DataGridComponent.prototype, "_columns", {
        set: function (columns) {
            this.columns = columns || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_rows", {
        set: function (rows) {
            this.rows = rows || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_pagination", {
        set: function (pagination) {
            this.pagination = pagination;
            var pageSize = get(this.pagination, 'pageSize');
            if (pageSize &&
                !this.possiblePageSizes.find(function (possiblePageSize) { return possiblePageSize === pageSize; })) {
                this.pagination = tslib_1.__assign({}, this.pagination, { pageSize: 10 });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_infiniteScroll", {
        set: function (infiniteScroll) {
            this.infiniteScroll = infiniteScroll;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_serverSideDataCallback", {
        set: function (serverSideDataCallback) {
            this.serverSideDataCallback = serverSideDataCallback;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_selectable", {
        set: function (selectable) {
            this.selectable = selectable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_selectionPrimaryKey", {
        set: function (selectionPrimaryKey) {
            this.selectionPrimaryKey = selectionPrimaryKey;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_displayOptions", {
        set: function (displayOptions) {
            this.displayOptions = tslib_1.__assign({}, this.displayOptions, displayOptions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_actionControls", {
        set: function (actionControls) {
            this.actionControls = actionControls || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_bulkActionControls", {
        set: function (bulkActionControls) {
            this.bulkActionControls = bulkActionControls || [];
        },
        enumerable: true,
        configurable: true
    });
    DataGridComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.searchText$
            .pipe(takeUntil(this.unsubscribe$), debounceTime(300), distinctUntilChanged(), tap(function (searchText) {
            _this.searchText = searchText;
        }))
            .subscribe(function () {
            _this.reload();
        });
        if (this.selectable) {
            combineLatest(this.dataSource.data$, this.itemsSelect.asObservable())
                .pipe(takeUntil(this.unsubscribe$))
                .subscribe(function (_a) {
                var _b = tslib_1.__read(_a, 1), data = _b[0];
                var currentPageEmpty = data.length === 0;
                _this.currentPageSelectionState = {
                    allSelected: currentPageEmpty ? false : data.every(function (item) { return _this.isItemSelected(item); }),
                    allDeselected: currentPageEmpty ? true : data.every(function (item) { return !_this.isItemSelected(item); })
                };
            });
        }
        this.dataSource.stats$.pipe(takeUntil(this.unsubscribe$)).subscribe(function (stats) {
            _this.createLoadMoreComponent(stats);
            _this.updateFilteringLabelsParams(stats);
            _this.updatePaginationLabelParams(stats);
        });
    };
    DataGridComponent.prototype.ngOnChanges = function () {
        this.updateColumns();
        this.loadData();
    };
    DataGridComponent.prototype.ngAfterViewInit = function () {
        this.updateGridColumnsSize();
        this.thEls = this.thRefs.toArray().map(function (_a) {
            var nativeElement = _a.nativeElement;
            return nativeElement;
        });
        this.setupResizeHandle();
    };
    DataGridComponent.prototype.ngOnDestroy = function () {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    };
    DataGridComponent.prototype.trackByName = function (index, item) {
        return item.name;
    };
    DataGridComponent.prototype.resolveCellValue = function (row, path) {
        var _this = this;
        return flow([
            function (x) { return _this.dataSource.resolveValue(x, path); },
            this.dataSource.resolveFunction,
            this.dataSource.normalizeNil
        ])(row);
    };
    DataGridComponent.prototype.changeSortOrder = function (columnName) {
        var column = this.columns.find(function (_a) {
            var name = _a.name;
            return name === columnName;
        });
        if (column) {
            var sortOrder = column.sortOrder;
            if (!sortOrder) {
                this.updateSorting([columnName], 'asc');
            }
            else if (sortOrder === 'asc') {
                this.updateSorting([columnName], 'desc');
            }
            else {
                this.updateSorting([columnName], '');
            }
        }
    };
    DataGridComponent.prototype.updateSorting = function (columnNames, sortOrder) {
        this.columns = this.columns.map(function (column) {
            if (columnNames.includes(column.name)) {
                return tslib_1.__assign({}, column, { sortOrder: sortOrder });
            }
            return column;
        });
        this.reload();
    };
    DataGridComponent.prototype.applyFilter = function (columnName, dropdown, filteringModifier) {
        this.updateFiltering([columnName], {
            type: FilteringActionType.ApplyFilter,
            payload: { filteringModifier: filteringModifier }
        });
        dropdown.hide();
    };
    DataGridComponent.prototype.resetFilter = function (columnName, dropdown) {
        this.updateFiltering([columnName], { type: FilteringActionType.ResetFilter });
        dropdown.hide();
    };
    DataGridComponent.prototype.clearFilters = function () {
        this.updateFiltering(this.columns.map(function (_a) {
            var name = _a.name;
            return name;
        }), {
            type: FilteringActionType.ResetFilter
        });
    };
    DataGridComponent.prototype.updateFiltering = function (columnNames, action) {
        this.columns = this.columns.map(function (column) {
            if (columnNames.includes(column.name)) {
                return tslib_1.__assign({}, column, (action.type === FilteringActionType.ApplyFilter
                    ? action.payload.filteringModifier
                    : { filterPredicate: undefined, externalFilterQuery: undefined }));
            }
            return column;
        });
        this.updateFilteringApplied();
        this.reload();
    };
    DataGridComponent.prototype.updateFilteringApplied = function () {
        this.filteringApplied = this.columns.some(this.isColumnFilteringApplied);
    };
    DataGridComponent.prototype.isColumnFilteringApplied = function (column) {
        var filterable = column.filterable, filterPredicate = column.filterPredicate, externalFilterQuery = column.externalFilterQuery;
        return !!(filterable && (filterPredicate || externalFilterQuery));
    };
    DataGridComponent.prototype.updatePagination = function (_a) {
        var itemsPerPage = _a.itemsPerPage, page = _a.page;
        this.pagination = tslib_1.__assign({}, this.pagination, { pageSize: itemsPerPage, currentPage: page });
        this.loadData();
    };
    DataGridComponent.prototype.reload = function () {
        this.pagination = tslib_1.__assign({}, this.pagination, { currentPage: 1 });
        this.recreateLoadMoreComponent = true;
        this.loadData(true);
        this.scrollToTop();
    };
    DataGridComponent.prototype.loadNextPage = function () {
        var _this = this;
        this.pagination = tslib_1.__assign({}, this.pagination, { currentPage: this.pagination.nextPage });
        this.loadData();
        return this.dataSource.resultList$
            .pipe(take(1)) // in order for `toPromise` to work, the observable needs to complete
            .toPromise()
            .then(function (result) {
            return tslib_1.__assign({}, result, { paging: tslib_1.__assign({}, result.paging, { next: _this.loadNextPage.bind(_this) }) });
        });
    };
    DataGridComponent.prototype.getCellRendererSpec = function (_a) {
        var value = _a.value, row = _a.row, columnName = _a.columnName;
        return this._getCellRendererSpec({ type: 'CELL', value: value, row: row, columnName: columnName });
    };
    DataGridComponent.prototype.getHeaderCellRendererSpec = function (_a) {
        var value = _a.value, columnName = _a.columnName;
        return this._getCellRendererSpec({ type: 'HEADER', value: value, row: undefined, columnName: columnName });
    };
    DataGridComponent.prototype.getFilteringFormRendererSpec = function (_a) {
        var column = _a.column, dropdown = _a.dropdown;
        return {
            renderer: get(this.getColumnRenderer(column), 'filteringFormRendererDef.template') ||
                column.filteringFormRendererComponent,
            context: {
                property: column,
                applyFilter: this.applyFilter.bind(this, column.name, dropdown),
                resetFilter: this.resetFilter.bind(this, column.name, dropdown)
            }
        };
    };
    DataGridComponent.prototype.setAllItemsSelected = function (selected) {
        var _this = this;
        this.dataSource.selection$
            .pipe(first())
            .subscribe(function (_a) {
            var filteredDataIds = _a.filteredDataIds;
            return _this.setItemsSelected(filteredDataIds, selected);
        });
    };
    DataGridComponent.prototype.setAllItemsInCurrentPageSelected = function (selected) {
        var _this = this;
        this.dataSource.data$.pipe(first()).subscribe(function (data) { return _this.setItemsSelected(data, selected); });
    };
    DataGridComponent.prototype.setItemsSelected = function (items, selected) {
        var _this = this;
        var itemIds = items.map(function (item) {
            return typeof item === 'object' ? item[_this.selectionPrimaryKey] : item;
        });
        this.selectedItemIds = selected
            ? union(this.selectedItemIds, itemIds)
            : without.apply(void 0, tslib_1.__spread([this.selectedItemIds], itemIds));
        this.itemsSelect.emit(this.selectedItemIds);
    };
    DataGridComponent.prototype.isItemSelected = function (item) {
        return this.selectedItemIds.includes(item[this.selectionPrimaryKey]);
    };
    DataGridComponent.prototype.onColumnDrop = function (_a) {
        var previousIndex = _a.previousIndex, currentIndex = _a.currentIndex;
        var differentIndex = previousIndex !== currentIndex;
        if (differentIndex) {
            var column = this.columns.splice(previousIndex, 1);
            this.columns.splice(currentIndex, 0, column[0]);
        }
        this.updateColumnNames();
        this.updateGridColumnsSize();
    };
    DataGridComponent.prototype.updateGridColumnsSize = function () {
        this.styles = tslib_1.__assign({}, this.styles, { gridTemplateColumns: this.sanitizer.bypassSecurityTrustStyle(this.columns
                .filter(function (column) { return column.visible; })
                .map(function (_a) {
                var gridTrackSize = _a.gridTrackSize;
                return gridTrackSize;
            })
                .join(' ')), gridInfiniteScrollColumn: this.sanitizer.bypassSecurityTrustStyle("1 / span " + this.columns.length) });
    };
    DataGridComponent.prototype.updateColumns = function () {
        var specialColumn = {
            gridTrackSize: '42px',
            sortable: false,
            positionFixed: true
        };
        this.columns = tslib_1.__spread([
            this.selectable ? tslib_1.__assign({}, specialColumn, { name: "checkbox" /* Checkbox */ }) : undefined
        ], this.columns, [
            this.actionControls.length > 0
                ? tslib_1.__assign({}, specialColumn, { name: "actions" /* Actions */ }) : undefined
        ]).filter(Boolean)
            .map(this.withColumnDefaults);
        this.updateColumnNames();
        this.updateGridColumnsSize();
        this.updateFilteringApplied();
    };
    DataGridComponent.prototype.withColumnDefaults = function (column) {
        var dataType = column.dataType || "text-short" /* TextShort */;
        var headerCSSClassName = column.headerCSSClassName, cellCSSClassName = column.cellCSSClassName;
        return tslib_1.__assign({ visible: true, positionFixed: false, sortable: true, sortOrder: '', filterable: false }, column, { dataType: dataType, gridTrackSize: column.gridTrackSize ||
                "minmax(" + minColumnGridTrackSize + "px, " + ratiosByColumnTypes[dataType] + "fr)", headerCSSClassName: (typeof headerCSSClassName === 'string'
                ? headerCSSClassName.split(' ')
                : headerCSSClassName) || [], cellCSSClassName: (typeof cellCSSClassName === 'string' ? cellCSSClassName.split(' ') : cellCSSClassName) ||
                [] });
    };
    DataGridComponent.prototype.updateColumnNames = function () {
        this.columnNames = this.columns.map(function (_a) {
            var name = _a.name;
            return name;
        });
    };
    DataGridComponent.prototype.setupResizeHandle = function () {
        var _this = this;
        var resizeHandleDrag$ = this.resizeHandleMouseDown$.pipe(takeUntil(this.unsubscribe$), tap(function () { return _this.clearMouseHighlights(); }), mergeMap(function (_a) {
            var event = _a.event, targetColumnName = _a.targetColumnName;
            _this.columns = _this.columns.map(function (column) {
                if (column.name === targetColumnName) {
                    return tslib_1.__assign({}, column, { headerCSSClassName: union(column.headerCSSClassName, ['header--being-resized']) });
                }
                return column;
            });
            _this.headerBeingResized = {
                columnName: targetColumnName,
                el: event.target.parentNode
            };
            _this.styles = tslib_1.__assign({}, _this.styles, { tableCursor: 'col-resize' });
            return _this.resizeHandleContainerMouseMove$.pipe(tap(function () { return _this.clearMouseHighlights(); }), takeUntil(_this.resizeHandleContainerMouseUp$));
        }));
        resizeHandleDrag$.subscribe(function (event) {
            requestAnimationFrame(function () {
                _this.columns = _this.columns.map(function (column, i) {
                    if (column.name === _this.headerBeingResized.columnName) {
                        var wrapper = _this.hostRef.nativeElement;
                        // Read wrapper's offset left relative to the document.
                        var horizontalOffset = wrapper.getBoundingClientRect().left;
                        // Adjust with the wrapper horizontal scroll position.
                        var horizontalScrollOffset = wrapper.scrollLeft - horizontalOffset;
                        // Calculate the desired width.
                        var width = horizontalScrollOffset + event.clientX - (_this.headerBeingResized.el.offsetLeft || 0);
                        return tslib_1.__assign({}, column, { 
                            // Update the column object with the new size value, enforce our minimum size.
                            gridTrackSize: Math.max(minColumnGridTrackSize, width) + "px" });
                    }
                    // For the other headers which don't have a set width, fix it to their computed width.
                    if (column.gridTrackSize.startsWith('minmax')) {
                        return tslib_1.__assign({}, column, { 
                            // isn't fixed yet (it would be a px value)
                            gridTrackSize: _parseInt(_this.thEls[i].clientWidth) + "px" });
                    }
                    return column;
                });
                /*
                 * Update the column sizes.
                 * Note: grid-template-columns sets the width for all columns in one value.
                 */
                _this.updateGridColumnsSize();
            });
        });
        this.resizeHandleContainerMouseUp$.pipe(takeUntil(this.unsubscribe$)).subscribe(function () {
            if (_this.headerBeingResized) {
                _this.columns = _this.columns.map(function (column) {
                    if (column.name === _this.headerBeingResized.columnName) {
                        return tslib_1.__assign({}, column, { headerCSSClassName: without(column.headerCSSClassName, 'header--being-resized') });
                    }
                    return column;
                });
                _this.headerBeingResized = undefined;
                _this.styles = tslib_1.__assign({}, _this.styles, { tableCursor: 'auto' });
            }
        });
    };
    DataGridComponent.prototype.clearMouseHighlights = function () {
        if (window.getSelection) {
            window.getSelection().removeAllRanges();
        }
    };
    DataGridComponent.prototype._getCellRendererSpec = function (_a) {
        var type = _a.type, value = _a.value, row = _a.row, columnName = _a.columnName;
        var column = this.columns.find(function (_a) {
            var name = _a.name;
            return name === columnName;
        });
        var columnRenderer = this.getColumnRenderer(column);
        var rendererTemplate = get(columnRenderer, (type === 'HEADER' ? 'headerCellRendererDef' : 'cellRendererDef') + ".template");
        var cellRendererComponent = column.cellRendererComponent, headerCellRendererComponent = column.headerCellRendererComponent;
        var rendererComponent = type === 'HEADER' ? headerCellRendererComponent : cellRendererComponent;
        return {
            renderer: rendererTemplate || rendererComponent,
            context: {
                value: value,
                item: row,
                property: column
            }
        };
    };
    DataGridComponent.prototype.getColumnRenderer = function (column) {
        return this.columnRenderers.toArray().find(function (_a) {
            var name = _a.name;
            return name === column.name;
        });
    };
    DataGridComponent.prototype.loadData = function (reload) {
        if (reload === void 0) { reload = false; }
        var _a = this, rows = _a.rows, columns = _a.columns, pagination = _a.pagination, searchText = _a.searchText, serverSideDataCallback = _a.serverSideDataCallback, selectable = _a.selectable, selectionPrimaryKey = _a.selectionPrimaryKey, infiniteScroll = _a.infiniteScroll;
        this.dataSource.loadData({
            rows: rows,
            columns: columns,
            pagination: pagination,
            searchText: searchText,
            serverSideDataCallback: serverSideDataCallback,
            selectable: selectable,
            selectionPrimaryKey: selectionPrimaryKey,
            infiniteScroll: infiniteScroll,
            reload: reload
        });
    };
    DataGridComponent.prototype.updateFilteringLabelsParams = function (stats) {
        this.filteringLabelsParams = {
            filteredItemsCount: stats.filteredSize,
            allItemsCount: stats.size
        };
    };
    DataGridComponent.prototype.updatePaginationLabelParams = function (stats) {
        this.pagination.nextPage = stats.nextPage;
        var pageFirstItemIdx = (stats.currentPage - 1) * stats.firstPageSize + 1;
        this.paginationLabelParams = {
            pageFirstItemIdx: pageFirstItemIdx,
            pageLastItemIdx: pageFirstItemIdx + (stats.currentPageSize - 1),
            itemsTotal: stats.filteredSize
        };
    };
    DataGridComponent.prototype.createLoadMoreComponent = function (stats) {
        if (this.infiniteScroll &&
            stats &&
            stats.nextPage &&
            (!this.loadMoreComponent || this.recreateLoadMoreComponent)) {
            this.recreateLoadMoreComponent = false;
            this.infiniteScrollContainer.clear();
            var componentFactory = this.cfr.resolveComponentFactory(LoadMoreComponent);
            var componentRef = this.infiniteScrollContainer.createComponent(componentFactory);
            var instance = componentRef.instance;
            instance.useIntersection = this.infiniteScroll === 'auto' || this.infiniteScroll === 'hidden';
            instance.hidden = this.infiniteScroll === 'hidden';
            instance.paging = {
                nextPage: stats.nextPage,
                next: this.loadNextPage.bind(this)
            };
            instance.loadNextLabel = this.loadMoreItemsLabel;
            instance.loadingLabel = this.loadingItemsLabel;
            this.loadMoreComponent = instance;
        }
        else if (this.loadMoreComponent && !stats.nextPage) {
            this.loadMoreComponent.paging = {
                nextPage: null
            };
        }
    };
    DataGridComponent.prototype.scrollToTop = function () {
        if (this.infiniteScroll) {
            this.scrollContainer.nativeElement.scrollTop = 0;
        }
    };
    DataGridComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver }
    ]; };
    tslib_1.__decorate([
        Input()
    ], DataGridComponent.prototype, "title", void 0);
    tslib_1.__decorate([
        Input()
    ], DataGridComponent.prototype, "loadMoreItemsLabel", void 0);
    tslib_1.__decorate([
        Input()
    ], DataGridComponent.prototype, "loadingItemsLabel", void 0);
    tslib_1.__decorate([
        Input()
    ], DataGridComponent.prototype, "noMatchingItemsLabel", void 0);
    tslib_1.__decorate([
        Input('columns')
    ], DataGridComponent.prototype, "_columns", null);
    tslib_1.__decorate([
        Input('rows')
    ], DataGridComponent.prototype, "_rows", null);
    tslib_1.__decorate([
        Input('pagination')
    ], DataGridComponent.prototype, "_pagination", null);
    tslib_1.__decorate([
        Input('infiniteScroll')
    ], DataGridComponent.prototype, "_infiniteScroll", null);
    tslib_1.__decorate([
        Input('serverSideDataCallback')
    ], DataGridComponent.prototype, "_serverSideDataCallback", null);
    tslib_1.__decorate([
        Input('selectable')
    ], DataGridComponent.prototype, "_selectable", null);
    tslib_1.__decorate([
        Input('selectionPrimaryKey')
    ], DataGridComponent.prototype, "_selectionPrimaryKey", null);
    tslib_1.__decorate([
        Input('displayOptions')
    ], DataGridComponent.prototype, "_displayOptions", null);
    tslib_1.__decorate([
        Input('actionControls')
    ], DataGridComponent.prototype, "_actionControls", null);
    tslib_1.__decorate([
        Input('bulkActionControls')
    ], DataGridComponent.prototype, "_bulkActionControls", null);
    tslib_1.__decorate([
        Output()
    ], DataGridComponent.prototype, "rowMouseOver", void 0);
    tslib_1.__decorate([
        Output()
    ], DataGridComponent.prototype, "rowMouseLeave", void 0);
    tslib_1.__decorate([
        Output()
    ], DataGridComponent.prototype, "rowClick", void 0);
    tslib_1.__decorate([
        Output()
    ], DataGridComponent.prototype, "itemsSelect", void 0);
    tslib_1.__decorate([
        ContentChildren(ColumnDirective)
    ], DataGridComponent.prototype, "columnRenderers", void 0);
    tslib_1.__decorate([
        ViewChild('scroll', { static: true })
    ], DataGridComponent.prototype, "scrollContainer", void 0);
    tslib_1.__decorate([
        ViewChild('infiniteScrollContainer', { static: false, read: ViewContainerRef })
    ], DataGridComponent.prototype, "infiniteScrollContainer", void 0);
    tslib_1.__decorate([
        ViewChildren(CdkHeaderCell, { read: ElementRef })
    ], DataGridComponent.prototype, "thRefs", void 0);
    DataGridComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-data-grid',
            template: "<div class=\"table-data-grid-scroll\" #scroll>\n  <div *ngIf=\"displayOptions.gridHeader\" class=\"table-data-grid-header separator\">\n    <h4 class=\"m-r-16\">{{ title | translate }}</h4>\n    <span *ngIf=\"!filteringApplied\">\n      <span class=\"label label-warning m-r-4\" translate>No filters</span>\n      <small\n        *ngIf=\"!!filteringLabelsParams.allItemsCount\"\n        class=\"m-r-4\"\n        ngNonBindable\n        translate\n        [translateParams]=\"filteringLabelsParams\"\n        >{{ filteredItemsCount }} of {{ allItemsCount }} items</small\n      >\n    </span>\n    <span *ngIf=\"filteringApplied\">\n      <ng-container *ngIf=\"!!filteringLabelsParams.allItemsCount\">\n        <span class=\"badge badge-info m-r-4\">\n          {{ (dataSource.stats$ | async).filteredSize }}\n        </span>\n        <small ngNonBindable translate [translateParams]=\"filteringLabelsParams\"\n          >of {{ allItemsCount }} items</small\n        >\n      </ng-container>\n      <button class=\"m-l-8 btn btn-xs btn-default m-r-4\" (click)=\"clearFilters()\" translate>\n        Clear filters\n      </button>\n    </span>\n    <span class=\"hidden-xs hidden-sm\">\n      <button\n        class=\"btn-clean text-primary\"\n        popover=\"{{ 'Click the column headers to apply filters.' | translate }}\"\n        placement=\"right\"\n        triggers=\"focus\"\n      >\n        <i c8yIcon=\"question-circle-o\"></i>\n      </button>\n    </span>\n\n    <div class=\"flex-item-right\">\n      <div class=\"btnbar flex-row\">\n        <div class=\"dropdown\" dropdown [insideClick]=\"true\">\n          <button class=\"btnbar-btn c8y-dropdown\" dropdownToggle>\n            <i c8yIcon=\"columns\" class=\"m-r-4\"></i> <span translate>Configure columns</span>\n          </button>\n\n          <ul\n            *dropdownMenu\n            class=\"dropdown-menu\"\n            (click)=\"$event.stopPropagation()\"\n          >\n            <li class=\"bg-white\">\n              <div cdkDropList (cdkDropListDropped)=\"onColumnDrop($event)\" class=\"list-group m-0\">\n                <div *ngFor=\"let column of columns\" cdkDrag cdkDragLockAxis=\"y\">\n                  <ng-container *ngIf=\"!column.positionFixed\">\n                    <div class=\"list-group-item draggable-after\">\n                      <label class=\"c8y-checkbox\">\n                        <input\n                          type=\"checkbox\"\n                          [(ngModel)]=\"column.visible\"\n                          (change)=\"updateGridColumnsSize()\"\n                        />\n                        <span></span>&nbsp;\n                        {{ (column.header | translate) || column.name }}\n                      </label>\n                    </div>\n                  </ng-container>\n                </div>\n              </div>\n            </li>\n          </ul>\n        </div>\n\n        <button\n          class=\"btnbar-btn\"\n          [disabled]=\"dataSource.loading$ | async\"\n          (click)=\"searchText = ''; reload()\"\n        >\n          <i c8yIcon=\"refresh\"></i> <span translate> Reload</span>\n        </button>\n\n        <div *ngIf=\"!serverSideDataCallback\" class=\"input-group input-group-search\">\n          <input\n            type=\"search\"\n            class=\"form-control\"\n            placeholder=\"{{ 'Search\u2026' | translate }}\"\n            [ngModel]=\"searchText\"\n            (input)=\"searchText$.emit($event.target.value)\"\n          />\n          <div class=\"input-group-addon\">\n            <i c8yIcon=\"search\" *ngIf=\"searchText.length === 0\"></i>\n            <i\n              c8yIcon=\"times\"\n              class=\"pointer\"\n              *ngIf=\"searchText.length > 0\"\n              (click)=\"searchText = ''; searchText$.emit('')\"\n            ></i>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"table-data-grid-header-bulk-actions animated slideInDown fast\"\n      *ngIf=\"selectedItemIds.length !== 0\"\n    >\n      <h4>\n        <span ngNonBindable translate [translateParams]=\"{ count: selectedItemIds.length }\">\n          {{ count }} selected items.\n        </span>\n        <br class=\"visible-xs\" />\n        <small *ngIf=\"selectedItemIds.length >= pagination.pageSize\">\n          <a (click)=\"setAllItemsSelected(true)\" style=\"cursor: pointer\">\n            <span\n              ngNonBindable\n              translate\n              [translateParams]=\"{ count: (dataSource.stats$ | async).filteredSize }\"\n            >\n              Select all {{ count }} items\n            </span>\n          </a>\n        </small>\n      </h4>\n      <div class=\"flex-item-right\">\n        <div class=\"btnbar flex-row\">\n          <ng-container\n            *ngFor=\"let bulkActionControl of bulkActionControls\"\n            [ngSwitch]=\"bulkActionControl.type\"\n          >\n            <button\n              *ngSwitchCase=\"builtInActionType.Export\"\n              class=\"btnbar-btn\"\n              (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n            >\n              <i c8yIcon=\"sign-out\"></i> <span translate>Export</span>\n            </button>\n\n            <button\n              *ngSwitchCase=\"builtInActionType.Delete\"\n              class=\"btnbar-btn\"\n              (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n            >\n              <i c8yIcon=\"trash\"></i> <span translate>Delete</span>\n            </button>\n\n            <button\n              *ngSwitchDefault\n              class=\"btnbar-btn\"\n              (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n            >\n              <i c8yIcon=\"{{ bulkActionControl.icon }}\"></i>\n              {{ bulkActionControl.text | translate }}\n            </button>\n          </ng-container>\n\n          <button class=\"btnbar-btn\" (click)=\"setAllItemsSelected(false)\">\n            <i c8yIcon=\"times\"></i> <span translate>Cancel</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <table\n    class=\"table table-hover table-filtered-sorted table-data-grid\"\n    cdk-table\n    [dataSource]=\"dataSource\"\n    [trackBy]=\"trackByName\"\n    [class.table-striped]=\"displayOptions.striped\"\n    [class.table-bordered]=\"displayOptions.bordered\"\n    [class.table-data-grid-with-checkboxes]=\"selectable\"\n    [class.table-data-grid-with-actions]=\"actionControls.length > 0\"\n    [style.grid-template-columns]=\"styles.gridTemplateColumns\"\n    (mousemove)=\"resizeHandleContainerMouseMove$.emit($event)\"\n    (mouseup)=\"resizeHandleContainerMouseUp$.emit($event)\"\n  >\n    <ng-container *ngFor=\"let column of columns; trackBy: trackByName\" [cdkColumnDef]=\"column.name\">\n      <ng-container [ngSwitch]=\"column.name\">\n        <ng-container *ngSwitchCase=\"'checkbox'\">\n          <th cdk-header-cell *cdkHeaderCellDef data-type=\"icon\">\n            <div>\n              <label class=\"c8y-checkbox\">\n                <input\n                  type=\"checkbox\"\n                  [checked]=\"currentPageSelectionState.allSelected\"\n                  [indeterminate]=\"\n                    !(\n                      currentPageSelectionState.allSelected ||\n                      currentPageSelectionState.allDeselected\n                    )\n                  \"\n                  (change)=\"setAllItemsInCurrentPageSelected($event.target.checked)\"\n                />\n                <span></span>\n              </label>\n            </div>\n          </th>\n\n          <td cdk-cell *cdkCellDef=\"let row\">\n            <label class=\"c8y-checkbox\">\n              <input\n                type=\"checkbox\"\n                [checked]=\"isItemSelected(row)\"\n                (change)=\"setItemsSelected([row], $event.target.checked)\"\n              />\n              <span></span>\n            </label>\n          </td>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"'actions'\">\n          <th cdk-header-cell *cdkHeaderCellDef data-type=\"icon\"></th>\n\n          <td cdk-cell *cdkCellDef=\"let row\">\n            <ng-container *ngIf=\"actionControls.length <= 2\">\n              <ng-container\n                *ngFor=\"let actionControl of actionControls\"\n                [ngSwitch]=\"actionControl.type\"\n              >\n                <button\n                  *ngSwitchCase=\"builtInActionType.Edit\"\n                  class=\"btn btn-icon btn-xs btn-primary\"\n                  title=\"{{ 'Edit' | translate }}\"\n                  (click)=\"actionControl.callback(row, reload.bind(this))\"\n                >\n                  <i c8yIcon=\"pencil\"></i>\n                </button>\n                <button\n                  *ngSwitchCase=\"builtInActionType.Delete\"\n                  class=\"btn btn-dot showOnHover\"\n                  title=\"{{ 'Delete' | translate }}\"\n                  (click)=\"actionControl.callback(row, reload.bind(this))\"\n                >\n                  <i class=\"text-danger\" c8yIcon=\"minus-circle\"></i>\n                </button>\n                <button\n                  *ngSwitchDefault\n                  class=\"btn btn-icon btn-xs btn-primary\"\n                  title=\"{{ actionControl.text | translate }}\"\n                  (click)=\"actionControl.callback(row, reload.bind(this))\"\n                >\n                  <i c8yIcon=\"{{ actionControl.icon }}\"></i>\n                </button>\n              </ng-container>\n            </ng-container>\n\n            <div *ngIf=\"actionControls.length > 2\" class=\"dropdown\" dropdown>\n              <button\n                class=\"dropdown-toggle c8y-dropdown\"\n                title=\"{{ 'Actions' | translate }}\"\n                dropdownToggle\n              >\n                <i c8yIcon=\"ellipsis-v\"></i>\n              </button>\n              <ul class=\"dropdown-menu dropdown-menu-right\" *dropdownMenu>\n                <li *ngFor=\"let actionControl of actionControls\" [ngSwitch]=\"actionControl.type\">\n                  <button\n                    *ngSwitchCase=\"builtInActionType.Edit\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                  >\n                    <i c8yIcon=\"pencil\"></i> {{ 'Edit' | translate }}\n                  </button>\n                  <button\n                    *ngSwitchCase=\"builtInActionType.Delete\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                  >\n                    <i c8yIcon=\"trash\"></i> {{ 'Delete' | translate }}\n                  </button>\n                  <button\n                    *ngSwitchCase=\"builtInActionType.Export\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                  >\n                    <i c8yIcon=\"download\"></i> {{ 'Export' | translate }}\n                  </button>\n                  <button *ngSwitchDefault (click)=\"actionControl.callback(row, reload.bind(this))\">\n                    <i c8yIcon=\"{{ actionControl.icon }}\"></i> {{ actionControl.text | translate }}\n                  </button>\n                </li>\n              </ul>\n            </div>\n          </td>\n        </ng-container>\n\n        <ng-container *ngSwitchDefault>\n          <th\n            cdk-header-cell\n            *cdkHeaderCellDef\n            [ngClass]=\"column.headerCSSClassName\"\n            [attr.data-type]=\"column.dataType\"\n            [class.sorted]=\"column.sortOrder\"\n            [class.filtered]=\"column | map: isColumnFilteringApplied\"\n            [class.hidden]=\"!column.visible\"\n          >\n            <div *ngIf=\"!column.filterable\" [title]=\"(column.header | translate) || column.name\">\n              <ng-container\n                *ngIf=\"\n                  (\n                    [{\n                      columnName: column.name,\n                      value: ((column.header | translate) || column.name)\n                    }]\n                      | map:getHeaderCellRendererSpec:this\n                  ) as cellRendererSpec\n                \"\n              >\n                <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n              </ng-container>\n            </div>\n            <div\n              *ngIf=\"column.filterable\"\n              class=\"dropdown\"\n              dropdown\n              #dropdown=\"bs-dropdown\"\n              [insideClick]=\"true\"\n              container=\"body\"\n            >\n              <button\n                class=\"btn-header c8y-dropdown\"\n                dropdownToggle\n                [title]=\"(column.header | translate) || column.name\"\n              >\n                <ng-container\n                  *ngIf=\"\n                    (\n                      [{\n                        columnName: column.name,\n                        value: ((column.header | translate) || column.name)\n                      }]\n                        | map:getHeaderCellRendererSpec:this\n                    ) as cellRendererSpec\n                  \"\n                >\n                  <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n                </ng-container>\n                <i c8yIcon=\"filter\" title=\"{{ 'Filter' | translate }}\"></i>\n              </button>\n\n              <ul *dropdownMenu class=\"dropdown-menu \" (click)=\"$event.stopPropagation()\">\n                <li class=\"data-grid__dropdown\">\n                  <ng-container\n                    *ngIf=\"\n                      (\n                        [{\n                          column: column,\n                          dropdown: dropdown\n                        }]\n                          | map:getFilteringFormRendererSpec:this\n                      ) as filteringFormRendererSpec\n                    \"\n                  >\n                    <c8y-filtering-form-renderer [spec]=\"filteringFormRendererSpec\">\n                    </c8y-filtering-form-renderer>\n                  </ng-container>\n                </li>\n              </ul>\n            </div>\n\n            <button\n              *ngIf=\"column.sortable\"\n              class=\"btn-sort\"\n              title=\"{{ 'Sort' | translate }}\"\n              (click)=\"changeSortOrder(column.name)\"\n            >\n              <ng-container [ngSwitch]=\"column.sortOrder\">\n                <i *ngSwitchCase=\"'asc'\" c8yIcon=\"long-arrow-up\"></i>\n                <i *ngSwitchCase=\"'desc'\" c8yIcon=\"long-arrow-down\"></i>\n                <i *ngSwitchDefault c8yIcon=\"exchange\"></i>\n              </ng-container>\n            </button>\n\n            <span\n              class=\"resize-handle\"\n              (mousedown)=\"\n                resizeHandleMouseDown$.emit({ event: $event, targetColumnName: column.name })\n              \"\n            >\n            </span>\n          </th>\n\n          <td\n            cdk-cell\n            *cdkCellDef=\"let row\"\n            [ngClass]=\"column.cellCSSClassName\"\n            [attr.data-cell-title]=\"column.header | translate\"\n            [class.hidden]=\"!column.visible\"\n          >\n            <ng-container\n              *ngIf=\"\n                (\n                  [{\n                    value: resolveCellValue(row, column.path),\n                    row: row,\n                    columnName: column.name\n                  }]\n                    | map:getCellRendererSpec:this\n                ) as cellRendererSpec\n              \"\n            >\n              <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n            </ng-container>\n          </td>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n\n    <ng-container cdkColumnDef=\"infiniteScrollFooter\">\n      <td cdk-footer-cell *cdkFooterCellDef [style.grid-column]=\"styles.gridInfiniteScrollColumn\">\n        <template #infiniteScrollContainer></template>\n      </td>\n    </ng-container>\n\n    <tr cdk-header-row *cdkHeaderRowDef=\"columnNames\"></tr>\n\n    <tr\n      cdk-row\n      *cdkRowDef=\"let row; columns: columnNames\"\n      (mouseover)=\"rowMouseOver.emit(row)\"\n      (mouseleave)=\"rowMouseLeave.emit(row)\"\n      (click)=\"rowClick.emit(row)\"\n    ></tr>\n\n    <ng-container *ngIf=\"infiniteScroll\">\n      <tr cdk-footer-row *cdkFooterRowDef=\"['infiniteScrollFooter']\"></tr>\n    </ng-container>\n  </table>\n\n  <div *ngIf=\"(dataSource.loading$ | async) && !loadMoreComponent\" class=\"text-center\">\n    <c8y-progress-bar [message]=\"loadingItemsLabel\"></c8y-progress-bar>\n  </div>\n\n  <div\n    class=\"row m-0 p-t-40 p-b-40\"\n    *ngIf=\"!(dataSource.loading$ | async) && (dataSource.stats$ | async).filteredSize === 0\"\n  >\n    <div class=\"col-md-4 col-md-offset-4\">\n      <div class=\"c8y-empty-state\">\n        <h1 c8yIcon=\"search\"></h1>\n        <div>\n          <p>\n            <strong>{{ noMatchingItemsLabel | translate }}</strong>\n          </p>\n          <small>{{ 'Refine your search terms' | translate }}</small>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"pagination && !infiniteScroll\" class=\"table-data-grid-footer separator\">\n    <div class=\"col-sm-4 no-gutter\">\n      <div *ngIf=\"(dataSource.stats$ | async).currentPageSize > 0\" class=\"counter\">\n        <span class=\"text-muted\" ngNonBindable translate [translateParams]=\"paginationLabelParams\"\n          >{{ pageFirstItemIdx }} - {{ pageLastItemIdx }} of {{ itemsTotal }}</span\n        >\n      </div>\n    </div>\n\n    <div class=\"col-sm-4 no-gutter text-center\">\n      <div\n        *ngIf=\"(dataSource.stats$ | async).filteredSize > minPossiblePageSize\"\n        class=\"form-group form-inline\"\n      >\n        <label class=\"m-r-4\" translate>Items per page</label>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"form-control\"\n            [ngModel]=\"pagination.pageSize\"\n            (ngModelChange)=\"\n              updatePagination({ itemsPerPage: $event, page: pagination.currentPage })\n            \"\n          >\n            <option *ngFor=\"let pageSize of possiblePageSizes\" [ngValue]=\"pageSize\">\n              {{ pageSize }}\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-sm-4 no-gutter text-right\">\n      <pagination\n        [class.hidden]=\"totalPagesCount <= 1\"\n        [ngModel]=\"pagination.currentPage\"\n        (pageChanged)=\"updatePagination($event)\"\n        [totalItems]=\"(dataSource.stats$ | async).filteredSize\"\n        [itemsPerPage]=\"pagination.pageSize\"\n        (numPages)=\"totalPagesCount = $event\"\n        [maxSize]=\"5\"\n        [boundaryLinks]=\"false\"\n        previousText=\" \"\n        nextText=\" \"\n      ></pagination>\n    </div>\n  </div>\n</div>\n"
        })
    ], DataGridComponent);
    return DataGridComponent;
}());
export { DataGridComponent };
//# sourceMappingURL=data:application/json;base64,