"use strict";function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}function asyncGeneratorStep(e,t,r,n,a,o,i){try{var c=e[o](i),s=c.value}catch(e){return void r(e)}c.done?t(s):Promise.resolve(s).then(n,a)}function _asyncToGenerator(c){return function(){var e=this,i=arguments;return new Promise(function(t,r){var n=c.apply(e,i);function a(e){asyncGeneratorStep(n,t,r,a,o,"next",e)}function o(e){asyncGeneratorStep(n,t,r,a,o,"throw",e)}a(void 0)})}}!function(){function e(r,t,n,a,o,i,c,s,u,p){var l=this;function e(){return(e=_asyncToGenerator(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return i.changeTitle({title:u("Device database")}),e.t0=b,e.next=4,m();case 4:e.t1=e.sent,(0,e.t0)(e.t1),r.$apply();case 7:case"end":return e.stop()}},e)}))).apply(this,arguments)}function y(e){var t=_.get(e,"id","new");n.path("/device-types/".concat(t))}function d(){return(d=_asyncToGenerator(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,o.importDeviceTypeWithUI();case 3:return s.success(u("New device type imported.")),e.next=6,f();case 6:e.next=11;break;case 8:e.prev=8,e.t0=e.catch(0),v(e.t0);case 11:r.$apply();case 12:case"end":return e.stop()}},e,null,[[0,8]])}))).apply(this,arguments)}function v(e){if(_.isObjectLike(e)){var t=e.errorMessage;t?s.danger(p.getString('Could not import device type due to: "{{errorMessage | translate}}".',{errorMessage:t})):s.danger(u("Could not import device type."))}}function f(){return g.apply(this,arguments)}function g(){return(g=_asyncToGenerator(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return l.deviceTypes=void 0,t.refreshLoading=!0,e.prev=2,e.t0=b,e.next=6,m();case 6:e.t1=e.sent,(0,e.t0)(e.t1);case 8:return e.prev=8,t.refreshLoading=!1,e.finish(8);case 11:r.$apply();case 12:case"end":return e.stop()}},e,null,[[2,,8,11]])}))).apply(this,arguments)}function h(){return(h=_asyncToGenerator(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t.paging.loading=!0,e.prev=1,e.t0=b,e.next=5,m();case 5:e.t1=e.sent,(0,e.t0)(e.t1);case 7:return e.prev=7,t.paging.loading=!1,e.finish(7);case 10:r.$apply();case 11:case"end":return e.stop()}},e,null,[[1,,7,10]])}))).apply(this,arguments)}function m(){return o.getAvailableDeviceTypes()}function b(e){l.deviceTypes||(l.deviceTypes=[]),l.deviceTypes=[].concat(_toConsumableArray(l.deviceTypes),_toConsumableArray(e)),t.paging=e.paging||{refresh:!0},r.$apply()}function T(){return(T=_asyncToGenerator(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,c({title:u("Delete device type"),body:p.getString('You are about to delete device type "{{name}}". Connected devices of this type will become unavailable. Do you want to proceed?',t),status:"danger",labels:{ok:u("Delete")}});case 3:return e.next=5,a.remove(t);case 5:l.deviceTypes=_.without(l.deviceTypes,t),s.success(u("Device type deleted.")),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(0),e.t0&&s.danger(e.t0);case 12:r.$apply();case 13:case"end":return e.stop()}},e,null,[[0,9]])}))).apply(this,arguments)}_.assign(l,{$onInit:function(){return e.apply(this,arguments)},addDeviceType:y,importDeviceType:function(){return d.apply(this,arguments)},navigateToDetails:y,onClickExport:function(e){return o.exportDeviceTypeAndSaveAs(e)},onClickDelete:function(e){return T.apply(this,arguments)},getFieldbusTypeLabel:function(e){return _.get(o.getDeviceTypeFeatures(e),"label",e.fieldbusType)},getFieldbusVersion:o.getFieldbusVersion}),t.paging={},t.loadNext=function(){return h.apply(this,arguments)},t.refresh=f}e.$inject=["$rootScope","$scope","$location","c8yInventory","c8yDeviceDatabase","c8yTitle","c8yModal","c8yAlert","gettext","gettextCatalog"],angular.module("c8y.deviceDatabase4").component("c8yDeviceTypeList",{templateUrl:":::PLUGIN_PATH:::/device-type-list.html",bindings:{},controllerAs:"vm",controller:e})}();