"use strict";function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(e,t){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var n=[],r=!0,a=!1,i=void 0;try{for(var o,s=e[Symbol.iterator]();!(r=(o=s.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){a=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(a)throw i}}return n}}function _arrayWithHoles(e){if(Array.isArray(e))return e}!function(){function e(e,a){var i=this,o={BOTH:e("{{protocolName | translate}} devices can send messages of different types with different encodings per type.\n        Depending on the device, the type can be determined by looking either\n        at the FPort parameter of a message (<b>Source</b>: <i>FPort</i>)\n        or at the subset of the message payload itself (<b>Source</b>: <i>Payload</i>).\n        Indicate where the type information starts in the payload (<b>Start bit</b>)\n        and how long this information is (<b>Number of bits</b>)."),FPORT:e("{{protocolName | translate}} devices can send messages of different types with different encodings per type.\n        Type can be determined by looking at the FPort parameter of a message (<b>Source</b>: <i>FPort</i>)."),PAYLOAD:e("{{protocolName | translate}} devices can send messages of different types with different encodings per type.\n        Type can be determined by looking at the subset of the message payload (<b>Source</b>: <i>Payload</i>).\n        Indicate where the type information starts in the payload (<b>Start bit</b>)\n        and how long this information is (<b>Number of bits</b>).")};_.assign(i,{$onChanges:function(e){if(e.featureLabel){var t=o.BOTH;if(1===_.get(i,"messageIdConfiguration.length")){var n=_slicedToArray(i.messageIdConfiguration,1),r=n[0];t=o[r.name]}i.description=a.getString(t,{protocolName:i.featureLabel})}},descriptionTemplates:o})}e.$inject=["gettext","gettextCatalog"],angular.module("c8y.deviceDatabase4").component("c8yMessageIdConfigurationDescription",{bindings:{featureLabel:"<",messageIdConfiguration:"<"},template:'\n        <div ng-bind-html="vm.description">\n        </div>\n      ',controller:e,controllerAs:"vm"})}();