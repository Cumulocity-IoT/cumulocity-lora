import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { PasswordService } from './password.service';
import { LoginService } from '../login/login.service';
import { assign, map } from 'lodash-es';
import { gettext } from '../i18n/gettext';
let PasswordCheckListComponent = class PasswordCheckListComponent {
    constructor(loginService, passwordStrengthChecker) {
        this.loginService = loginService;
        this.passwordStrengthChecker = passwordStrengthChecker;
        this.minGreenLength = 0;
        this.checklist = [
            {
                label: gettext('Include lowercase characters (e.g. abcdef)'),
                check: this.passwordStrengthChecker.hasLowerCase,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include uppercase characters (e.g. ABCDEF)'),
                check: this.passwordStrengthChecker.hasUpperCase,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include numbers (e.g. 123456)'),
                check: this.passwordStrengthChecker.hasNumbers,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include symbols (e.g. !@#$%^)'),
                check: this.passwordStrengthChecker.hasSpecialChars,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Must have at least {{length}} characters'),
                check: (password) => password.length >= this.minGreenLength,
                icon: '',
                contextualColor: ''
            }
        ];
    }
    set password(password) {
        if (typeof password === 'string') {
            this.onPasswordChange(password);
        }
    }
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.minGreenLength = yield this.loginService.getGreenMinLength();
        });
    }
    get translateParams() {
        return {
            length: this.minGreenLength
        };
    }
    onPasswordChange(password) {
        this.checklist = map(this.checklist, (requirement) => {
            const checked = requirement.check(password);
            assign(requirement, {
                icon: checked ? 'check' : '',
                contextualColor: checked ? '' : 'text-muted'
            });
            return requirement;
        });
    }
};
PasswordCheckListComponent.ctorParameters = () => [
    { type: LoginService },
    { type: PasswordService }
];
tslib_1.__decorate([
    Input('password')
], PasswordCheckListComponent.prototype, "password", null);
PasswordCheckListComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-password-check-list',
        template: "<div>\n    <span class=\"small\">{{'Please meet 4 out of 5 the conditions below' | translate}}:</span>\n    <ul class=\"list-unstyled\">\n        <li class=\"small\" *ngFor=\"let requirement of checklist\">\n            <i style=\"color:lightgreen;\" [c8yIcon]=\"requirement.icon\"></i>&nbsp;\n            <span\n              [translate]=\"requirement.label\"\n              [translateParams]=\"this.translateParams\"\n              class=\"small {{requirement.contextualColor}}\"\n            ></span>\n        </li>\n    </ul>\n</div>\n"
    })
], PasswordCheckListComponent);
export { PasswordCheckListComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtY2hlY2stbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9hdXRoZW50aWNhdGlvbi9wYXNzd29yZC1jaGVjay1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFRMUMsSUFBYSwwQkFBMEIsR0FBdkMsTUFBYSwwQkFBMEI7SUE2Q3JDLFlBQW1CLFlBQTBCLEVBQ3pCLHVCQUF3QztRQUR6QyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUN6Qiw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQWlCO1FBckM1RCxtQkFBYyxHQUFXLENBQUMsQ0FBQztRQUUzQixjQUFTLEdBQUc7WUFDVjtnQkFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLDRDQUE0QyxDQUFDO2dCQUM1RCxLQUFLLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFlBQVk7Z0JBQ2hELElBQUksRUFBRSxFQUFFO2dCQUNSLGVBQWUsRUFBRSxFQUFFO2FBRXBCO1lBQ0Q7Z0JBQ0UsS0FBSyxFQUFFLE9BQU8sQ0FBQyw0Q0FBNEMsQ0FBQztnQkFDNUQsS0FBSyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZO2dCQUNoRCxJQUFJLEVBQUUsRUFBRTtnQkFDUixlQUFlLEVBQUUsRUFBRTthQUNwQjtZQUNEO2dCQUNFLEtBQUssRUFBRSxPQUFPLENBQUMsK0JBQStCLENBQUM7Z0JBQy9DLEtBQUssRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsVUFBVTtnQkFDOUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ1IsZUFBZSxFQUFFLEVBQUU7YUFDcEI7WUFDRDtnQkFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLCtCQUErQixDQUFDO2dCQUMvQyxLQUFLLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLGVBQWU7Z0JBQ25ELElBQUksRUFBRSxFQUFFO2dCQUNSLGVBQWUsRUFBRSxFQUFFO2FBQ3BCO1lBQ0Q7Z0JBQ0UsS0FBSyxFQUFFLE9BQU8sQ0FBQywwQ0FBMEMsQ0FBQztnQkFDMUQsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxjQUFjO2dCQUMzRCxJQUFJLEVBQUUsRUFBRTtnQkFDUixlQUFlLEVBQUUsRUFBRTthQUNwQjtTQUNGLENBQUM7SUFJRixDQUFDO0lBNUNELElBQUksUUFBUSxDQUFDLFFBQWdCO1FBQzNCLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNqQztJQUNILENBQUM7SUEwQ0ssUUFBUTs7WUFDWixJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3BFLENBQUM7S0FBQTtJQUVELElBQUksZUFBZTtRQUNqQixPQUFPO1lBQ0wsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjO1NBQzVCLENBQUM7SUFDSixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsUUFBUTtRQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDbkQsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM1QyxNQUFNLENBQUMsV0FBVyxFQUFFO2dCQUNsQixJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzVCLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWTthQUM3QyxDQUFDLENBQUM7WUFDSCxPQUFPLFdBQVcsQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRixDQUFBOztZQXhCa0MsWUFBWTtZQUNBLGVBQWU7O0FBM0M1RDtJQURDLEtBQUssQ0FBQyxVQUFVLENBQUM7MERBS2pCO0FBUFUsMEJBQTBCO0lBTnRDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSx5QkFBeUI7UUFDbkMsdWlCQUFtRDtLQUVwRCxDQUFDO0dBRVcsMEJBQTBCLENBcUV0QztTQXJFWSwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFBhc3N3b3JkU2VydmljZSB9IGZyb20gJy4vcGFzc3dvcmQuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dpblNlcnZpY2UgfSBmcm9tICcuLi9sb2dpbi9sb2dpbi5zZXJ2aWNlJztcbmltcG9ydCB7IGFzc2lnbiwgbWFwIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktcGFzc3dvcmQtY2hlY2stbGlzdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9wYXNzd29yZC1jaGVjay1saXN0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVzOiBbXVxufSlcblxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkQ2hlY2tMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXQoJ3Bhc3N3b3JkJylcbiAgc2V0IHBhc3N3b3JkKHBhc3N3b3JkOiBzdHJpbmcpIHtcbiAgICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5vblBhc3N3b3JkQ2hhbmdlKHBhc3N3b3JkKTtcbiAgICB9XG4gIH1cblxuICBtaW5HcmVlbkxlbmd0aDogbnVtYmVyID0gMDtcblxuICBjaGVja2xpc3QgPSBbXG4gICAge1xuICAgICAgbGFiZWw6IGdldHRleHQoJ0luY2x1ZGUgbG93ZXJjYXNlIGNoYXJhY3RlcnMgKGUuZy4gYWJjZGVmKScpLFxuICAgICAgY2hlY2s6IHRoaXMucGFzc3dvcmRTdHJlbmd0aENoZWNrZXIuaGFzTG93ZXJDYXNlLFxuICAgICAgaWNvbjogJycsXG4gICAgICBjb250ZXh0dWFsQ29sb3I6ICcnXG5cbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdJbmNsdWRlIHVwcGVyY2FzZSBjaGFyYWN0ZXJzIChlLmcuIEFCQ0RFRiknKSxcbiAgICAgIGNoZWNrOiB0aGlzLnBhc3N3b3JkU3RyZW5ndGhDaGVja2VyLmhhc1VwcGVyQ2FzZSxcbiAgICAgIGljb246ICcnLFxuICAgICAgY29udGV4dHVhbENvbG9yOiAnJ1xuICAgIH0sXG4gICAge1xuICAgICAgbGFiZWw6IGdldHRleHQoJ0luY2x1ZGUgbnVtYmVycyAoZS5nLiAxMjM0NTYpJyksXG4gICAgICBjaGVjazogdGhpcy5wYXNzd29yZFN0cmVuZ3RoQ2hlY2tlci5oYXNOdW1iZXJzLFxuICAgICAgaWNvbjogJycsXG4gICAgICBjb250ZXh0dWFsQ29sb3I6ICcnXG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogZ2V0dGV4dCgnSW5jbHVkZSBzeW1ib2xzIChlLmcuICFAIyQlXiknKSxcbiAgICAgIGNoZWNrOiB0aGlzLnBhc3N3b3JkU3RyZW5ndGhDaGVja2VyLmhhc1NwZWNpYWxDaGFycyxcbiAgICAgIGljb246ICcnLFxuICAgICAgY29udGV4dHVhbENvbG9yOiAnJ1xuICAgIH0sXG4gICAge1xuICAgICAgbGFiZWw6IGdldHRleHQoJ011c3QgaGF2ZSBhdCBsZWFzdCB7e2xlbmd0aH19IGNoYXJhY3RlcnMnKSxcbiAgICAgIGNoZWNrOiAocGFzc3dvcmQpID0+IHBhc3N3b3JkLmxlbmd0aCA+PSB0aGlzLm1pbkdyZWVuTGVuZ3RoLFxuICAgICAgaWNvbjogJycsXG4gICAgICBjb250ZXh0dWFsQ29sb3I6ICcnXG4gICAgfVxuICBdO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBsb2dpblNlcnZpY2U6IExvZ2luU2VydmljZSxcbiAgICAgICAgICAgICAgcHJpdmF0ZSBwYXNzd29yZFN0cmVuZ3RoQ2hlY2tlcjogUGFzc3dvcmRTZXJ2aWNlKSB7XG4gIH1cblxuICBhc3luYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm1pbkdyZWVuTGVuZ3RoID0gYXdhaXQgdGhpcy5sb2dpblNlcnZpY2UuZ2V0R3JlZW5NaW5MZW5ndGgoKTtcbiAgfVxuXG4gIGdldCB0cmFuc2xhdGVQYXJhbXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlbmd0aDogdGhpcy5taW5HcmVlbkxlbmd0aFxuICAgIH07XG4gIH1cblxuICBvblBhc3N3b3JkQ2hhbmdlKHBhc3N3b3JkKSB7XG4gICAgdGhpcy5jaGVja2xpc3QgPSBtYXAodGhpcy5jaGVja2xpc3QsIChyZXF1aXJlbWVudCkgPT4ge1xuICAgICAgY29uc3QgY2hlY2tlZCA9IHJlcXVpcmVtZW50LmNoZWNrKHBhc3N3b3JkKTtcbiAgICAgIGFzc2lnbihyZXF1aXJlbWVudCwge1xuICAgICAgICBpY29uOiBjaGVja2VkID8gJ2NoZWNrJyA6ICcnLFxuICAgICAgICBjb250ZXh0dWFsQ29sb3I6IGNoZWNrZWQgPyAnJyA6ICd0ZXh0LW11dGVkJ1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVxdWlyZW1lbnQ7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==