import * as tslib_1 from "tslib";
import { Component, Output, EventEmitter, ViewChild } from '@angular/core';
import { UserService, ICredentials, FetchClient, Client, BasicAuth } from '@c8y/client';
import { AppStateService } from '../common/ui-state.service';
import { AlertService } from '../alert/alert.service';
import { LoginService } from '../login/public-api';
import { clone } from 'lodash-es';
import { gettext } from '../i18n/gettext';
let PasswordConfirmModalComponent = class PasswordConfirmModalComponent {
    constructor(user, ui, client, alert, loginService) {
        this.user = user;
        this.ui = ui;
        this.client = client;
        this.alert = alert;
        this.loginService = loginService;
        this.passwordConfirmedEmitter = new EventEmitter();
        this.loading = false;
    }
    passwordConfirm() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.password) {
                const credentials = {
                    password: this.password,
                    user: this.ui.currentUser.value.id,
                    tenant: this.client.tenant
                };
                try {
                    this.loading = true;
                    const strategy = clone(this.loginService.useBasicAuth({}));
                    delete credentials.tfa;
                    strategy.updateCredentials(credentials);
                    const newClient = new Client(strategy, this.client.baseUrl);
                    yield newClient.user.current();
                    this.emitSuccessAndClose();
                }
                catch (e) {
                    if (e.res && e.res.status === 401 && e.data && (/pin|totp/i).test(e.data.message)) {
                        this.emitSuccessAndClose();
                    }
                    else {
                        this.alert.danger(gettext('Provided password doesn\'t match your current one.'));
                    }
                }
                finally {
                    this.loading = false;
                }
            }
        });
    }
    cancel() {
        this.passwordConfirmedEmitter.emit(false);
        this.modal._dismiss();
    }
    emitSuccessAndClose() {
        this.passwordConfirmedEmitter.emit(true);
        this.modal._dismiss();
    }
};
PasswordConfirmModalComponent.ctorParameters = () => [
    { type: UserService },
    { type: AppStateService },
    { type: FetchClient },
    { type: AlertService },
    { type: LoginService }
];
tslib_1.__decorate([
    Output()
], PasswordConfirmModalComponent.prototype, "passwordConfirmedEmitter", void 0);
tslib_1.__decorate([
    ViewChild('modal', { static: false })
], PasswordConfirmModalComponent.prototype, "modal", void 0);
PasswordConfirmModalComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-password-confirm-modal',
        template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Confirm password' | translate\" #modal>\r\n  <form #confirmForm=\"ngForm\" (ngSubmit)=\"confirmForm.form.valid && passwordConfirm()\">\r\n    <c8y-form-group>\r\n      <label translate for=\"currentPassword\">Current password</label>\r\n      <input\r\n        id=\"currentPassword\"\r\n        [(ngModel)]=\"password\"\r\n        type=\"password\"\r\n        name=\"password\"\r\n        class=\"form-control\"\r\n        placeholder=\"{{ 'Current password' | translate }}\"\r\n        required\r\n      />\r\n    </c8y-form-group>\r\n\r\n    <div class=\"modal-footer\">\r\n      <button\r\n        title=\"{{ 'Cancel' | translate }}\"\r\n        class=\"btn btn-default\"\r\n        type=\"button\"\r\n        (click)=\"cancel()\"\r\n        translate\r\n      >\r\n        Cancel\r\n      </button>\r\n      <button\r\n        title=\"{{ 'Save' | translate }}\"\r\n        class=\"btn btn-primary\"\r\n        type=\"submit\"\r\n        [disabled]=\"!confirmForm.form.valid || loading\"\r\n        translate\r\n      >\r\n        Save\r\n      </button>\r\n    </div>\r\n  </form>\r\n</c8y-modal>\r\n"
    })
], PasswordConfirmModalComponent);
export { PasswordConfirmModalComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtY29uZmlybS1tb2RhbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9hdXRoZW50aWNhdGlvbi9wYXNzd29yZC1jb25maXJtLW1vZGFsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN4RixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXRELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQU0xQyxJQUFhLDZCQUE2QixHQUExQyxNQUFhLDZCQUE2QjtJQVF4QyxZQUNTLElBQWlCLEVBQ2pCLEVBQW1CLEVBQ2xCLE1BQW1CLEVBQ25CLEtBQW1CLEVBQ25CLFlBQTBCO1FBSjNCLFNBQUksR0FBSixJQUFJLENBQWE7UUFDakIsT0FBRSxHQUFGLEVBQUUsQ0FBaUI7UUFDbEIsV0FBTSxHQUFOLE1BQU0sQ0FBYTtRQUNuQixVQUFLLEdBQUwsS0FBSyxDQUFjO1FBQ25CLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBWDFCLDZCQUF3QixHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFDakUsWUFBTyxHQUFHLEtBQUssQ0FBQztJQVdaLENBQUM7SUFFQyxlQUFlOztZQUNuQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2pCLE1BQU0sV0FBVyxHQUFpQjtvQkFDaEMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO29CQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ2xDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07aUJBQzNCLENBQUM7Z0JBQ0YsSUFBSTtvQkFDRixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztvQkFDcEIsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQzNELE9BQU8sV0FBVyxDQUFDLEdBQUcsQ0FBQztvQkFDdkIsUUFBUSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO29CQUN4QyxNQUFNLFNBQVMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDNUQsTUFBTSxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO29CQUMvQixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztpQkFDNUI7Z0JBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ1YsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7d0JBQ2pGLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO3FCQUM1Qjt5QkFBTTt3QkFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsb0RBQW9ELENBQUMsQ0FBQyxDQUFDO3FCQUNsRjtpQkFDRjt3QkFBUztvQkFDUixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztpQkFDdEI7YUFDRjtRQUNILENBQUM7S0FBQTtJQUVELE1BQU07UUFDSixJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVPLG1CQUFtQjtRQUN6QixJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDeEIsQ0FBQztDQUNGLENBQUE7O1lBM0NnQixXQUFXO1lBQ2IsZUFBZTtZQUNWLFdBQVc7WUFDWixZQUFZO1lBQ0wsWUFBWTs7QUFYMUI7SUFBVCxNQUFNLEVBQUU7K0VBQXdEO0FBSTVCO0lBQXBDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFDLENBQUM7NERBQStCO0FBTnhELDZCQUE2QjtJQUp6QyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsNEJBQTRCO1FBQ3RDLDBvQ0FBc0Q7S0FDdkQsQ0FBQztHQUNXLDZCQUE2QixDQW9EekM7U0FwRFksNkJBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBVc2VyU2VydmljZSwgSUNyZWRlbnRpYWxzLCBGZXRjaENsaWVudCwgQ2xpZW50LCBCYXNpY0F1dGggfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBcHBTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vdWktc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UgfSBmcm9tICcuLi9hbGVydC9hbGVydC5zZXJ2aWNlJztcbmltcG9ydCB7IE1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi4vbW9kYWwvbW9kYWwuY29tcG9uZW50JztcbmltcG9ydCB7IExvZ2luU2VydmljZSB9IGZyb20gJy4uL2xvZ2luL3B1YmxpYy1hcGknO1xuaW1wb3J0IHsgY2xvbmUgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4vZ2V0dGV4dCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1wYXNzd29yZC1jb25maXJtLW1vZGFsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3Bhc3N3b3JkLWNvbmZpcm0tbW9kYWwuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkQ29uZmlybU1vZGFsQ29tcG9uZW50IHtcblxuICBAT3V0cHV0KCkgcGFzc3dvcmRDb25maXJtZWRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuICBsb2FkaW5nID0gZmFsc2U7XG4gIHBhc3N3b3JkOiBzdHJpbmc7XG5cbiAgQFZpZXdDaGlsZCgnbW9kYWwnLCB7c3RhdGljOiBmYWxzZX0pIHByaXZhdGUgbW9kYWw6IE1vZGFsQ29tcG9uZW50O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyB1c2VyOiBVc2VyU2VydmljZSxcbiAgICBwdWJsaWMgdWk6IEFwcFN0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIGNsaWVudDogRmV0Y2hDbGllbnQsXG4gICAgcHJpdmF0ZSBhbGVydDogQWxlcnRTZXJ2aWNlLFxuICAgIHByaXZhdGUgbG9naW5TZXJ2aWNlOiBMb2dpblNlcnZpY2VcbiAgKSB7IH1cblxuICBhc3luYyBwYXNzd29yZENvbmZpcm0oKSB7XG4gICAgaWYgKHRoaXMucGFzc3dvcmQpIHtcbiAgICAgIGNvbnN0IGNyZWRlbnRpYWxzOiBJQ3JlZGVudGlhbHMgPSB7XG4gICAgICAgIHBhc3N3b3JkOiB0aGlzLnBhc3N3b3JkLFxuICAgICAgICB1c2VyOiB0aGlzLnVpLmN1cnJlbnRVc2VyLnZhbHVlLmlkLFxuICAgICAgICB0ZW5hbnQ6IHRoaXMuY2xpZW50LnRlbmFudFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gICAgICAgIGNvbnN0IHN0cmF0ZWd5ID0gY2xvbmUodGhpcy5sb2dpblNlcnZpY2UudXNlQmFzaWNBdXRoKHt9KSk7XG4gICAgICAgIGRlbGV0ZSBjcmVkZW50aWFscy50ZmE7XG4gICAgICAgIHN0cmF0ZWd5LnVwZGF0ZUNyZWRlbnRpYWxzKGNyZWRlbnRpYWxzKTtcbiAgICAgICAgY29uc3QgbmV3Q2xpZW50ID0gbmV3IENsaWVudChzdHJhdGVneSwgdGhpcy5jbGllbnQuYmFzZVVybCk7XG4gICAgICAgIGF3YWl0IG5ld0NsaWVudC51c2VyLmN1cnJlbnQoKTtcbiAgICAgICAgdGhpcy5lbWl0U3VjY2Vzc0FuZENsb3NlKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlLnJlcyAmJiBlLnJlcy5zdGF0dXMgPT09IDQwMSAmJiBlLmRhdGEgJiYgKC9waW58dG90cC9pKS50ZXN0KGUuZGF0YS5tZXNzYWdlKSkge1xuICAgICAgICAgIHRoaXMuZW1pdFN1Y2Nlc3NBbmRDbG9zZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuYWxlcnQuZGFuZ2VyKGdldHRleHQoJ1Byb3ZpZGVkIHBhc3N3b3JkIGRvZXNuXFwndCBtYXRjaCB5b3VyIGN1cnJlbnQgb25lLicpKTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY2FuY2VsKCkge1xuICAgIHRoaXMucGFzc3dvcmRDb25maXJtZWRFbWl0dGVyLmVtaXQoZmFsc2UpO1xuICAgIHRoaXMubW9kYWwuX2Rpc21pc3MoKTtcbiAgfVxuXG4gIHByaXZhdGUgZW1pdFN1Y2Nlc3NBbmRDbG9zZSgpIHtcbiAgICB0aGlzLnBhc3N3b3JkQ29uZmlybWVkRW1pdHRlci5lbWl0KHRydWUpO1xuICAgIHRoaXMubW9kYWwuX2Rpc21pc3MoKTtcbiAgfVxufVxuIl19