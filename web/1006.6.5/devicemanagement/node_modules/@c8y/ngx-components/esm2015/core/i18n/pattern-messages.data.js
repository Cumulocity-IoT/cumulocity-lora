/* tslint:disable:max-line-length */
import { gettext } from './gettext';
export const MESSAGES = {
    '^Access is denied$': {
        gettext: gettext('Access denied.')
    },
    '^Alarm created$': {
        gettext: gettext('Alarm created')
    },
    '^Alarm updated$': {
        gettext: gettext('Alarm updated')
    },
    '^API is not available with the new domain$': {
        gettext: gettext('Could not activate custom domain. DNS setup is incorrect.')
    },
    '^Application with given name already exist$': {
        gettext: gettext('Application with given name already exists.')
    },
    '^Application with id (.+?) is already assigned to the tenant (.+?)$': {
        gettext: gettext('This application is already assigned to tenant "{{tenant}}".'),
        placeholders: {
            tenant: '$2'
        }
    },
    '^(.+)pplication for tenant (.+) with properties \\( (.+?) \\) already exists$': {
        gettext: gettext('Application for tenant "{{tenant}}" with the following values ({{valuesList}}) already exists.'),
        placeholders: {
            tenant: '$2',
            valuesList: '$3'
        }
    },
    '^Authentication failed! : User account is locked$': {
        gettext: gettext('Authentication failed due to: user account is locked.')
    },
    '^Availability monitoring record$': {
        gettext: gettext('Availability monitoring record')
    },
    '^Can not activate a certificate which is either expired or not yet valid$': {
        gettext: gettext('Cannot activate a certificate which is either expired or not yet valid.')
    },
    '^Cannot add certificate - certificate with (.+?) fingerprint already exists. : Certificate with (.+?) fingerprint already exists.': {
        gettext: gettext('Could not add certificate. Certificate with {{fingerprint}} fingerprint already exists.'),
        placeholders: {
            fingerprint: '$1'
        }
    },
    '^Cannot change password. : Provided token does not exist.$': {
        gettext: gettext('Cannot change password: provided token is invalid.')
    },
    '^Cannot deploy module (.*)$': {
        gettext: gettext('Cannot deploy module due to error: "{{ errorMessage | translate }}".'),
        placeholders: {
            errorMessage: '$1'
        }
    },
    '^Cannot deploy module (.+?)! : Compilation failed in module \'(.+?)\' in expression \'(.+?)\' : Incorrect syntax near \'(.+?)\' at line (\\d+) column (\\d+) \\[([\\S\\s]+?)\\]$': {
        gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": incorrect syntax near "{{incorrectExpression}}" at line {{line}} column {{column}}.'),
        placeholders: {
            moduleName: '$1',
            expression: '$3',
            incorrectExpression: '$4',
            line: '$5',
            column: '$6'
        }
    },
    '^Cannot deploy module (.+?)! : Compilation failed in module \'(.+?)\' in expression \'(.+?)\' : Incorrect syntax near \'(.+?)\' at line (\\d+) column (\\d+) near reserved keyword \'(.+?)\' \\[([\\S\\s]+?)\\]$': {
        gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": incorrect syntax near "{{incorrectExpression}}" at line {{line}} column {{column}} near reserved keyword "{{keyword}}".'),
        placeholders: {
            moduleName: '$1',
            expression: '$3',
            incorrectExpression: '$4',
            line: '$5',
            column: '$6',
            keyword: '$7'
        }
    },
    '^Cannot deploy module (.+?)! : Compilation failed in module \'(.+?)\' in expression \'(.+?)\' : Incorrect syntax near \'(.+?)\' at line (\\d+) column (\\d+), please check the where clause \\[([\\S\\s]+?)\\]$': {
        gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": incorrect syntax near "{{incorrectExpression}}" at line {{line}} column {{column}}, check "where" clause.'),
        placeholders: {
            moduleName: '$1',
            expression: '$3',
            incorrectExpression: '$4',
            line: '$5',
            column: '$6'
        }
    },
    '^Cannot deploy module (.+?)! : Deployment failed in module \'(.+?)\' in expression \'(.+?)\' : Exception compiling script \'(.+?)\' of dialect \'(.+?)\': missing (.+?) before statement \\((.+?)\\) \\[([\\S\\s]+?)\\]$': {
        gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": exception compiling script "{{scriptName}}" of dialect "{{scriptDialect}}": missing "{{missingSyntax}}" before statement "{{affectedStatement}}".'),
        placeholders: {
            moduleName: '$1',
            expression: '$3',
            scriptName: '$4',
            scriptDialect: '$5',
            missingSyntax: '$6',
            affectedStatement: '$7'
        }
    },
    '^Cannot execute bulk operation on empty group. Group with id=\'(\\d+?)\' doesn\'t have child assets.$': {
        gettext: gettext('Could not execute bulk operation on an empty group. Group with ID "{{groupId}}" has no child assets.'),
        placeholders: {
            groupId: '$1'
        }
    },
    '^Cannot execute bulk operation on empty group. DynamicGroup with id=\'(\\d+?)\' doesn\'t have child assets$': {
        gettext: gettext('Could not execute bulk operation on an empty group. Smart group with ID "{{groupId}}" has no child assets.'),
        placeholders: {
            groupId: '$1'
        }
    },
    '^Cannot parse X509 certificate. : Could not parse certificate: (.+?)$': {
        gettext: gettext('Could not parse X.509 certificate: {{ failureReason | translate }}.'),
        placeholders: {
            failureReason: '$1'
        }
    },
    '^Cannot reschedule bulk operation. All its operations are successful$': {
        gettext: gettext('Cannot reschedule bulk operation. All its operations are already successful.')
    },
    '^Cannot reset user password : Cannot find user with such email.$': {
        gettext: gettext('Cannot reset password for user with such email: email not found.')
    },
    '^Cannot update/delete application binary via this endpoint$': {
        gettext: gettext('Cannot update/delete application binary via this endpoint')
    },
    '^Can\'t delete user because it is used by another managed object$': {
        gettext: gettext('Cannot delete device with associated device owner because this owner is still assigned to other device(s). Try to remove only the device.')
    },
    '^Cep module created$': {
        gettext: gettext('CEP module created')
    },
    '^Cep module updated$': {
        gettext: gettext('CEP module updated')
    },
    '^Cep module deleted$': {
        gettext: gettext('CEP module deleted')
    },
    '^Cep module "(.+?)" created$': {
        gettext: gettext('CEP module "{{name}}" created'),
        placeholders: {
            name: '$1'
        }
    },
    '^Cep module "(.+?)" updated$': {
        gettext: gettext('CEP module "{{name}}" updated'),
        placeholders: {
            name: '$1'
        }
    },
    '^Cep module "(.+?)" deleted$': {
        gettext: gettext('CEP module "{{name}}" deleted'),
        placeholders: {
            name: '$1'
        }
    },
    '^Command state is invalid: (.+)$': {
        gettext: gettext('Command state is invalid: {{violations}}'),
        placeholders: {
            violations: {
                capture: '$1',
                translate: {
                    '(\\w+?) - may not be null': {
                        gettext: gettext('"{{field}}" must not be null'),
                        placeholders: {
                            field: '$1'
                        }
                    }
                }
            }
        }
    },
    '^Could not connect to endpoint (.+)\\. Could not verify `(.+)` host key with fingerprint `(.+)` for `(.+)` on port (.+)\\. If you expected that key, please remove the previous one from configuration to allow for connection\\.$': {
        gettext: gettext('Could not connect to endpoint "{{endpointName}}". Could not verify {{keyType}} host key with fingerprint {{fingerprint}} for host {{host}} on port {{port}}. If you expected this key, please remove the previous one from configuration to allow for connection.'),
        placeholders: {
            endpointName: '$1',
            keyType: '$2',
            fingerprint: '$3',
            host: '$4',
            port: '$5'
        }
    },
    '^Could not login to ssh server on endpoint "(.+)"\\. Provided credential for user "(.+)" is incorrect\\.$': {
        gettext: gettext('Could not access SSH server on endpoint "{{endpointName}}". Provided credentials for user "{{userName}}" are incorrect.'),
        placeholders: {
            endpointName: '$1',
            userName: '$2'
        }
    },
    '^Could not save object remoteAccessUpdate: (.+)$': {
        gettext: '{{errorMessages}}',
        placeholders: {
            errorMessages: {
                capture: '$1',
                translate: {
                    'Could not recognize host-key format': {
                        gettext: gettext('Could not recognize "Host key" format')
                    },
                    'Could not recognize key-pair format': {
                        gettext: gettext('Could not recognize the format of "Public key" or "Private key"')
                    }
                }
            }
        }
    },
    '^Could not update user. : Error persisting user (.+?)!$': {
        gettext: gettext('Could not update user "{{username}}".'),
        placeholders: {
            username: '$1'
        }
    },
    '^Creation ramp must be greater than (\\d+?)$': {
        gettext: gettext('Bulk operation delay must be greater than {{minSeconds}} seconds.'),
        placeholders: {
            minSeconds: '$1'
        }
    },
    '^Created container$': {
        gettext: gettext('Container created.')
    },
    '^Created pod: (.+)$': {
        gettext: gettext('Pod "{{imageName}}" created.'),
        placeholders: {
            imageName: '$1'
        }
    },
    '^CSV file contained empty dataset$': {
        gettext: gettext('No entries found in uploaded CSV file.')
    },
    '^Cycle detected for route (.+?)!$': {
        gettext: gettext('Cycle detected for route {{route}}.'),
        placeholders: {
            route: '$1'
        }
    },
    '^Data broker processing is currently overloaded and may stop forwarding your data\\. Please contact support\\.$': {
        gettext: gettext('Data broker processing is currently overloaded and may stop forwarding your data. Please contact support.')
    },
    '^Data broker processing is not able to connect do destination tenant, thus data forwarding is not working\\. Please contact support\\.$': {
        gettext: gettext('Data broker processing is not able to connect to destination tenant, thus data forwarding is not working. Please contact support.')
    },
    '^Device id \'(.+?)\' contains \'(.+?)\' character which is not permitted.$': {
        gettext: gettext('ID "{{deviceId}}" contains invalid character: "{{invalidCharacter}}".'),
        placeholders: {
            deviceId: '$1',
            invalidCharacter: '$2'
        }
    },
    '^Device name: \'(.+?)\', alarm text: \'(.+?)\'$': {
        gettext: gettext('Device name: "{{deviceName}}", alarm text: "{{alarmText | translate}}"'),
        placeholders: {
            deviceName: '$1',
            alarmText: '$2'
        }
    },
    '^Display name$': {
        gettext: gettext('Login alias')
    },
    '^Domain name in uploaded certificate differs from the one in use$': {
        gettext: gettext('Domain name in uploaded certificate differs from the one in use. Please deactivate the custom domain before uploading new certificate.')
    },
    '^Domain name is already in use by another tenant!$': {
        gettext: gettext('Domain name is already used by another tenant.')
    },
    '^Duplicated connector for instanceUrl (.+?)!$': {
        gettext: gettext('Target URL {{targetUrl}} already used by another connector.'),
        placeholders: {
            targetUrl: '$1'
        }
    },
    '^Duplicated connector for name (.+?)!$': {
        gettext: gettext('Connector name "{{name}}" already used by another connector.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Entry is outside of the target dir: (.+)$': {
        gettext: gettext('File entry outside of the target directory: "{{path}}".'),
        placeholders: {
            path: '$1'
        }
    },
    '^Error during password validation. : Password must have at least (\\d+?) characters and no more than (\\d+?) and must contain only Latin1 characters.$': {
        gettext: gettext('Password is invalid. It must have at least {{minCharactersCount}} and no more than {{maxCharactersCount}} characters.'),
        placeholders: {
            minCharactersCount: '$1',
            maxCharactersCount: '$2'
        }
    },
    '^Error during password validation. : Your password has been used already. Choose another.$': {
        gettext: gettext('This password has already been used earlier. Use a different one.')
    },
    '^Error in statement (.+?):(.+?)! : Incorrect syntax near \'(.+?)\' near reserved keyword \'(.+?)\' \\[([\\S\\s]+?)\\]$': {
        gettext: gettext('Error in statement {{moduleName}}:{{statementNumber}}. Incorrect syntax near expression "{{expression}}" near reserved keyword "{{keyword}}".'),
        placeholders: {
            moduleName: '$1',
            statementNumber: '$2',
            expression: '$3',
            keyword: '$4'
        }
    },
    '^External id not found; external id = ID \\[type=(.+?), value=(.+?)\\]$': {
        gettext: gettext('External ID not found for type "{{type}}" and value "{{value}}".'),
        placeholders: {
            type: '$1',
            value: '$2'
        }
    },
    '^Error occurred when trying to find an Application for id ID (.+) : Could not find application by ID (\\d+)$': {
        gettext: gettext('Could not find application by ID {{applicationId}}.'),
        placeholders: {
            applicationId: '$2'
        }
    },
    '^Http status code: 404\n{error="options/Not Found",message="Unable to find option by given key: sigfox-agent/provider.token",info="https://www.cumulocity.com/guides/reference-guide/#error_reporting",details="null"}': {
        gettext: gettext('Unable to find option by given key: sigfox-agent/provider.token')
    },
    '^Failed to delete application.  : Cannot remove application assigned to other tenants.$': {
        gettext: gettext('Could not delete application assigned to other tenants.')
    },
    '^Failed to extract certificate from PKCS12$': {
        gettext: gettext('Failed to extract certificate from PKCS12.')
    },
    '^Failed to update domain at the platform$': {
        gettext: gettext('Failed to update domain at the platform.')
    },
    '^Finding device data from database failed : No managedObject for id \'(.+?)\'!$': {
        gettext: gettext('Could not find managed object with ID "{{deviceId}}".'),
        placeholders: {
            deviceId: '$1'
        }
    },
    '^Following mandatory fields should be included: (.+?)$': {
        gettext: gettext('Following mandatory fields should be included: {{fields}}'),
        placeholders: {
            fields: '$1'
        }
    },
    '^Global Role updated$': {
        gettext: gettext('Global role updated')
    },
    '^Global Role (.+?) updated$': {
        gettext: gettext('Global role "{{name}}" updated'),
        placeholders: {
            name: '$1'
        }
    },
    '^Global Role (.+?) updated: (.+)$': {
        gettext: gettext('Global role "{{name}}" updated: {{updatesList}}'),
        placeholders: {
            name: '$1',
            updatesList: {
                capture: '$2',
                translate: {
                    'applications \\[([^\\]]+?)\\] added': {
                        gettext: gettext('applications {{list}} added'),
                        placeholders: {
                            list: '$1'
                        }
                    },
                    'applications \\[([^\\]]+?)\\] removed': {
                        gettext: gettext('applications {{list}} removed'),
                        placeholders: {
                            list: '$1'
                        }
                    },
                    'roles \\[([^\\]]+?)\\] added': {
                        gettext: gettext('roles {{list}} added'),
                        placeholders: {
                            list: '$1'
                        }
                    },
                    'roles \\[([^\\]]+?)\\] removed': {
                        gettext: gettext('roles {{list}} removed'),
                        placeholders: {
                            list: '$1'
                        }
                    }
                }
            }
        }
    },
    '^Global Roles$': {
        gettext: gettext('Global roles')
    },
    '^Operation updated: (.+)$': {
        gettext: gettext('Operation updated: {{updatesList}}'),
        placeholders: {
            updatesList: {
                capture: '$1',
                translate: {
                    'status=\'(.+?)\'': {
                        gettext: gettext('status="{{status | translate}}"'),
                        placeholders: {
                            status: '$1'
                        }
                    },
                    'description=\'(.+?)\'': {
                        gettext: gettext('description="{{description | translate}}"'),
                        placeholders: {
                            description: '$1'
                        }
                    },
                    'device name=\'(.+?)\'': {
                        gettext: gettext('device name="{{deviceName}}"'),
                        placeholders: {
                            deviceName: '$1'
                        }
                    },
                    'failure reason=\'(.+?)\'': {
                        gettext: gettext('failure reason="{{failureReason | translate}}"'),
                        placeholders: {
                            failureReason: '$1'
                        }
                    }
                }
            }
        }
    },
    '^ID \\[type=(.+?), value=(.+?)\\] was already bound to different Global ID.$': {
        gettext: gettext('External ID "{{value}}" of the type "{{type}}" already exists.'),
        placeholders: {
            type: '$1',
            value: '$2'
        }
    },
    '^Invalid credentials! : Bad credentials$': {
        gettext: gettext('Invalid credentials.')
    },
    '^Invalid credentials! : No phone number provided$': {
        gettext: gettext('Log into the management tenant first and enter your phone number.')
    },
    '^Inventory Role removed$': {
        gettext: gettext('Inventory role removed')
    },
    '^Inventory Role (.+?) removed': {
        gettext: gettext('Inventory role "{{name}}" deleted.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Inventory Role updated$': {
        gettext: gettext('Inventory role updated')
    },
    '^Inventory Role (.+?) updated': {
        gettext: gettext('Inventory role "{{name}}" updated.'),
        placeholders: {
            name: '$1'
        }
    },
    '^I/O error: Connection refused; nested exception is Connection refused : Connection refused': {
        gettext: gettext('Connection refused')
    },
    '^I/O error: Read timed out; nested exception is Read timed out : Read timed out': {
        gettext: gettext('Read timed out')
    },
    '^Log file requested$': {
        gettext: gettext('Log file requested.')
    },
    '^Managed object deleted$': {
        gettext: gettext('Managed object deleted')
    },
    '^Managed object "(.+?)" deleted$': {
        gettext: gettext('Managed object "{{name}}" deleted'),
        placeholders: {
            name: '$1'
        }
    },
    '^Maximum file size exceeded$': {
        gettext: gettext('Maximum file size exceeded.')
    },
    '^Message with ID (.+?) doesn\'t exist in smart rest template (.+?)$': {
        gettext: gettext('Message with ID "{{messageId}}" doesn\'t exist in SmartREST template with ID "{{templateId}}"'),
        placeholders: {
            messageId: '$1',
            templateId: '$2'
        }
    },
    '^NewDeviceRequest for id = (.+?) already exists.$': {
        gettext: gettext('Device registration request with ID {{id}} already exists.'),
        placeholders: {
            id: '$1'
        }
    },
    '^No communication with device since (.+?)$': {
        gettext: gettext('No communication with device since {{timestamp | absoluteDate}}.'),
        placeholders: {
            timestamp: '$1'
        }
    },
    '^No data received from device within required interval.$': {
        gettext: gettext('No data received from device within required interval.')
    },
    '^No LoRa provider settings are found. Please configure the connectivity settings.$': {
        gettext: gettext('No LoRa provider settings are found. Please configure the connectivity settings.')
    },
    '^Not within any context!$': {
        gettext: gettext('A problem occurred with microservice subscription.')
    },
    '^Maximum age cannot be bigger than 10 years.$': {
        gettext: gettext('Maximum age cannot be bigger than 10 years.')
    },
    '^Microservice application name incorrect. Please use only lower-case letters, digits and dashes. Maximum length is (\\d+) characters.$': {
        gettext: gettext('Microservice application name is incorrect: only lower case letters, digits and dashes allowed. Maximum length: {{maxLength}}.'),
        placeholders: {
            maxLength: '$1'
        }
    },
    '^Microservice not available.*$': {
        gettext: gettext('Microservice is not available.')
    },
    '^Operation created$': {
        gettext: gettext('Operation created.')
    },
    '^Operation updated$': {
        gettext: gettext('Operation updated.')
    },
    '^Operation created: status=\'(.+?)\'.': {
        gettext: gettext('Operation created: status="{{status | translate}}".'),
        placeholders: {
            status: '$1'
        }
    },
    '^Option created$': {
        gettext: gettext('Option created.')
    },
    '^Option "(.+?)" created$': {
        gettext: gettext('Option "{{option}}" created.'),
        placeholders: {
            option: '$1'
        }
    },
    '^Option deleted$': {
        gettext: gettext('Option deleted.')
    },
    '^Option "(.+?)" deleted$': {
        gettext: gettext('Option "{{option}}" deleted.'),
        placeholders: {
            option: '$1'
        }
    },
    '^Owner field error. : Cannot introduce cyclic dependency.': {
        gettext: gettext('Could not introduce cyclic ownership dependency.')
    },
    '^Password change is temporary blocked.$': {
        gettext: gettext('Password change is temporarily blocked.')
    },
    '^Password cipher does not match': {
        gettext: gettext('Password cipher does not match.')
    },
    '^Platform application cannot be added to, nor removed from any tenant.$': {
        gettext: gettext('Platform application cannot be added to, nor removed from any tenant.')
    },
    '^Private key must be provided in KEY_PAIR credentials$': {
        gettext: gettext('Private key must be provided when "Public / private keys" option is selected.')
    },
    '^Private key cipher does not match': {
        gettext: gettext('Private key cipher does not match')
    },
    '^Protocol "(.+?)" does not support "(.+?)" credentials type$': {
        gettext: gettext('Protocol "{{protocol}}" does not support "{{credentialsType}}" credentials type.'),
        placeholders: {
            protocol: '$1',
            credentialsType: '$2'
        }
    },
    '^pulling image "(.+)"$': {
        gettext: gettext('Pulling image: "{{imageName}}".'),
        placeholders: {
            imageName: '$1'
        }
    },
    '^Real-time event processing is currently overloaded and may stop processing your events\\. Please contact support\\.$': {
        gettext: gettext('Real-time event processing is currently overloaded and may stop processing your events. Please contact support.')
    },
    '^Resource ID \\[type=com_cumulocity_model_idtype_GId, value=(.+?)\\] for this request not found.$': {
        gettext: gettext('Could not find the resource with ID "{{id}}".'),
        placeholders: {
            id: '$1'
        }
    },
    '^Scaled up replica set (.+) to (\\d+)$': {
        gettext: gettext('Replica set "{{replicaSetName}}" scaled up to "{{scaleNumber}}".'),
        placeholders: {
            replicaSetName: '$1',
            scaleNumber: '$2'
        }
    },
    '^Simulator state is invalid: (.+)$': {
        gettext: gettext('Simulator state is invalid: {{violations}}'),
        placeholders: {
            violations: {
                capture: '$1',
                translate: {
                    '(\\w+?) - may not be null': {
                        gettext: gettext('"{{field}}" should not be null'),
                        placeholders: {
                            field: '$1'
                        }
                    },
                    '(\\w+?) - must be less than or equal to (\\d+)': {
                        gettext: gettext('"{{field}}" must be less than or equal to {{maxValue}}'),
                        placeholders: {
                            field: '$1',
                            maxValue: '$2'
                        }
                    },
                    '(\\w+?) - should not contain null values': {
                        gettext: gettext('"{{field}}" should not contain null values'),
                        placeholders: {
                            field: '$1'
                        }
                    }
                }
            }
        }
    },
    '^Smart rest template (.+?) doesn\'t exist$': {
        gettext: gettext('SmartREST template with id "{{templateId}}" doesn\'t exist'),
        placeholders: {
            templateId: '$1'
        }
    },
    '^Smart rule created$': {
        gettext: gettext('Smart rule created.')
    },
    '^Smart rule updated$': {
        gettext: gettext('Smart rule updated.')
    },
    '^Smart rule enabled$': {
        gettext: gettext('Smart rule activated.')
    },
    '^Smart rule disabled$': {
        gettext: gettext('Smart rule deactivated.')
    },
    '^Smart rule deleted$': {
        gettext: gettext('Smart rule deleted.')
    },
    '^Smart rule "(.+?)" created$': {
        gettext: gettext('Smart rule "{{name}}" created.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Smart rule "(.+?)" updated$': {
        gettext: gettext('Smart rule "{{name}}" updated.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Smart rule "(.+?)" enabled$': {
        gettext: gettext('Smart rule "{{name}}" activated.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Smart rule "(.+?)" disabled$': {
        gettext: gettext('Smart rule "{{name}}" deactivated.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Smart rule "(.+?)" deleted$': {
        gettext: gettext('Smart rule "{{name}}" deleted.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Started container$': {
        gettext: gettext('Container started.')
    },
    '^Successfully assigned (.+) to (.+)$': {
        gettext: gettext('"{{imageName}}" assigned to "{{address}}".'),
        placeholders: {
            imageName: '$1',
            address: '$2'
        }
    },
    '^Successfully pulled image "(.+)"$': {
        gettext: gettext('Image "{{imageName}}" pulled.'),
        placeholders: {
            imageName: '$1'
        }
    },
    '^Tenant creation failed. : Tenant with given id already exists.$': {
        gettext: gettext('Could not create a tenant. Tenant with given domain/URL already exists.')
    },
    '^Tenant id cannot be a reserved sql keyword "(.+?)".$': {
        gettext: gettext('Could not use a reserved SQL keyword "{{tenantId}}" as a domain name.'),
        placeholders: {
            tenantId: '$1'
        }
    },
    '^Tenant "(.+?)" activated$': {
        gettext: gettext('Tenant "{{tenant}}" activated.'),
        placeholders: {
            tenant: '$1'
        }
    },
    '^Tenant (.+?) has sub-tenants, please remove them first!$': {
        gettext: gettext('Could not remove tenant "{{tenant}}". Remove its subtenants first.'),
        placeholders: {
            tenant: '$1'
        }
    },
    '^Tenant activated$': {
        gettext: gettext('Tenant activated')
    },
    '^Tenant "(.+?)" created$': {
        gettext: gettext('Tenant "{{tenant}}" created.'),
        placeholders: {
            tenant: '$1'
        }
    },
    '^Tenant created$': {
        gettext: gettext('Tenant created')
    },
    '^Tenant "(.+?)" deleted$': {
        gettext: gettext('Tenant "{{tenant}}" deleted.'),
        placeholders: {
            tenant: '$1'
        }
    },
    '^Tenant deleted$': {
        gettext: gettext('Tenant deleted')
    },
    '^Tenant "(.+?)" suspended$': {
        gettext: gettext('Tenant "{{tenant}}" suspended.'),
        placeholders: {
            tenant: '$1'
        }
    },
    '^Tenant suspended$': {
        gettext: gettext('Tenant suspended')
    },
    '^Tenant "(.+?)" updated: (.+?)$': {
        gettext: gettext('Tenant "{{tenant}}" updated: {{properties}}.'),
        placeholders: {
            tenant: '$1',
            properties: '$2'
        }
    },
    '^Tenant updated$': {
        gettext: gettext('Tenant updated')
    },
    '^Too Many Requests$': {
        gettext: gettext('Too many requests. Try again later.')
    },
    '^User alias equals username \'(.+)\'$': {
        gettext: gettext('Username and login alias must be different.')
    },
    '^User created$': {
        gettext: gettext('User created')
    },
    '^User (.+?) created$': {
        gettext: gettext('User "{{name}}" created'),
        placeholders: {
            name: '$1'
        }
    },
    '^User deleted$': {
        gettext: gettext('User deleted')
    },
    '^User (.+?) deleted$': {
        gettext: gettext('User "{{name}}" deleted'),
        placeholders: {
            name: '$1'
        }
    },
    '^User updated$': {
        gettext: gettext('User updated')
    },
    '^User (.+?) updated: (.+)$': {
        gettext: gettext('User "{{name}}" updated: {{updatesList}}'),
        placeholders: {
            name: '$1',
            updatesList: {
                capture: '$2',
                translate: {
                    'delegatedBy=\'(.+?)\'': {
                        gettext: gettext('delegated by: "{{delegate}}"'),
                        placeholders: {
                            delegate: '$1'
                        }
                    },
                    'owner=\'(.+?)\'': {
                        gettext: gettext('owner: "{{owner}}"'),
                        placeholders: {
                            owner: '$1'
                        }
                    },
                    'inventory assignment \\[(.+?)\\] added': {
                        gettext: gettext('inventory assignment [{{inventoryAssignment}}] added'),
                        placeholders: {
                            inventoryAssignment: '$1'
                        }
                    },
                    'inventory assignment \\[(.+?)\\] removed': {
                        gettext: gettext('inventory assignment [{{inventoryAssignment}}] removed'),
                        placeholders: {
                            inventoryAssignment: '$1'
                        }
                    },
                    'applications \\[(.+?)\\] added$': {
                        gettext: gettext('applications [{{applicationsList}}] added'),
                        placeholders: {
                            applicationsList: '$1'
                        }
                    },
                    'applications \\[(.+?)\\] removed$': {
                        gettext: gettext('applications [{{applicationsList}}] removed'),
                        placeholders: {
                            applicationsList: '$1'
                        }
                    },
                    'global roles \\[(.+?)\\] added$': {
                        gettext: gettext('global roles [{{globalRolesList}}] added'),
                        placeholders: {
                            globalRolesList: '$1'
                        }
                    },
                    'global roles \\[(.+?)\\] removed$': {
                        gettext: gettext('global roles [{{globalRolesList}}] removed'),
                        placeholders: {
                            globalRolesList: '$1'
                        }
                    }
                }
            }
        }
    },
    '^User with username \'(.+?)\' already exists! : Duplicated: (.+?)$': {
        gettext: gettext('User "{{username}}" already exists.'),
        placeholders: {
            username: '$1'
        }
    },
    '^User with username or alias \'(.+)\' already exists! : Duplicated: (.+)$': {
        gettext: gettext('User with username or login alias "{{usernameOrAlias}}" already exists.'),
        placeholders: {
            usernameOrAlias: '$1'
        }
    },
    '^User with email \'(.+?)\' already exists! : Duplicated: (.+?)$': {
        gettext: gettext('User with email "{{email}}" already exists.'),
        placeholders: {
            email: '$1'
        }
    },
    '^unable to find option with given key (.+?) : Could not find entity Option by ID (.+?)!$': {
        gettext: gettext('Unable to get tenant option: "{{option}}".'),
        placeholders: {
            option: '$2'
        }
    },
    '^unable to find option with given key (.+?) : There is no system property for key (.+?)$': {
        gettext: gettext('Unable to get system option: "{{option}}".'),
        placeholders: {
            option: '$2'
        }
    },
    '^Write failed with error code 16733 and error message \'trying to index text where term list is too big, max is 4mb _id: "(.+?)"\'$': {
        gettext: gettext('The uploaded image cannot be bigger than 4 MB. Please upload a smaller one.')
    },
    '^Write failed with error code 17280 and error message \'WiredTigerIndex::insert: key too large to index, failing (.+?) { : "(.+?)" }\'$': {
        gettext: gettext('The chosen name is too long. Please try a shorter one.')
    },
    '^You have reached devices limit. No more devices can be registered.$': {
        gettext: gettext('You reached devices limit. No more devices can be registered.')
    },
    '^(.+) succeeded for volume "(.+)"': {
        gettext: gettext('Operation "{{operation}}" succeeded for volume "{{volume}}".'),
        placeholders: {
            operation: '$1',
            volume: '$2'
        }
    },
    '^Exception on tenant (.+) in statement \'(.+)\': Invocation exception when invoking method \'(.+)\' of class \'(.+)\' passing parameters \\[(.+)\\] for statement \'(.+)\': (.+) : (.+)$': {
        gettext: gettext('Exception on tenant {{tenantId}} in statement "{{moduleName}}": Invocation exception when invoking method "{{methodName}}" of class "{{classPath}}" passing parameters [{{parameters}}] for statement "{{statement}}": {{exceptionType}} : {{exceptionMessage}}.'),
        placeholders: {
            tenantId: '$1',
            moduleName: '$2',
            methodName: '$3',
            classPath: '$4',
            parameters: '$5',
            statement: '$6',
            exceptionType: '$7',
            exceptionMessage: '$8'
        }
    },
    '^No nodes are available that match all of the predicates: (.+).$': {
        gettext: gettext('No nodes are available that match all of the predicates: [{{predicates}}].'),
        placeholders: {
            predicates: '$1'
        }
    },
    '^Readiness probe failed: (.+) (.+): (.+): request canceled while waiting for connection \\(Client.Timeout exceeded while awaiting headers\\)$': {
        gettext: gettext('Readiness probe failed: {{requestMethod}} {{uri}}: {{protocol}}: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers).'),
        placeholders: {
            requestMethod: '$1',
            uri: '$2',
            protocol: '$3'
        }
    },
    '^Liveness probe failed: (.+) (.+): (.+): request canceled while waiting for connection \\(Client.Timeout exceeded while awaiting headers\\)$': {
        gettext: gettext('Liveness probe failed: {{requestMethod}} {{uri}}: {{protocol}}: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers).'),
        placeholders: {
            requestMethod: '$1',
            uri: '$2',
            protocol: '$3'
        }
    },
    '^Error syncing pod$': {
        gettext: gettext('Pod synchronization error.')
    },
    '^Failed create pod sandbox.$': {
        gettext: gettext('Pod sandbox creation failed.')
    },
    '^Exception on tenant (.+) in statement \'(.+)\': Http status code: (\\d+) \\{error="alarm/Unprocessable Entity",message="(.+)",info="https://www.cumulocity.com/guides/reference-guide/#error_reporting",details="null"\\}$': {
        gettext: gettext('Exception on tenant {{tenantId}} in statement "{{statement}}": HTTP status code: {{httpStatusCode}} : {{message | translate}}'),
        placeholders: {
            tenantId: '$1',
            statement: '$2',
            httpStatusCode: '$3',
            message: '$4'
        }
    },
    '^User \'(.+)\' is managed by a remote identity management service defined by an administrator, direct update is forbidden$': {
        gettext: gettext('User "{{userName}}" is managed by a remote identity management service defined by an administrator, direct update is forbidden.'),
        placeholders: {
            userName: '$1'
        }
    },
    '^Added new child device to "(.+)" \\(ID: (.+)\\).$': {
        gettext: gettext('Added new child device to "{{parentDeviceName}}" (ID: {{parentDeviceId}}).'),
        placeholders: {
            parentDeviceName: '$1',
            parentDeviceId: '$2'
        }
    },
    '^Updated child device of "(.+)" \\(ID: (.+)\\).$': {
        gettext: gettext('Updated child device of "{{parentDeviceName}}" (ID: {{parentDeviceId}}).'),
        placeholders: {
            parentDeviceName: '$1',
            parentDeviceId: '$2'
        }
    },
    '^Added child device "(.+)" \\(ID: (.+)\\).$': {
        gettext: gettext('Added child device "{{name}}" (ID: {{id}}).'),
        placeholders: {
            name: '$1',
            id: '$2'
        }
    },
    '^Removed child device "(.+)" \\(ID: (.+)\\).$': {
        gettext: gettext('Removed child device "{{name}}" (ID: {{id}}).'),
        placeholders: {
            name: '$1',
            id: '$2'
        }
    },
    '^Change value of "(.+)" to (.+) (.+).$': {
        gettext: gettext('Change value of "{{name}}" to {{value}}{{unit}}.'),
        placeholders: {
            name: '$1',
            value: '$2',
            unit: '$3'
        }
    },
    '^Change value of "(.+)" to (.+).$': {
        gettext: gettext('Change value of "{{name}}" to {{value}}.'),
        placeholders: {
            name: '$1',
            value: '$2'
        }
    },
    '^Change status of "(.+)" to "(.+)".$': {
        gettext: gettext('Change status of "{{name}}" to "{{label}}".'),
        placeholders: {
            name: '$1',
            label: '$2'
        }
    },
    '^Send message "(.+)".$': {
        gettext: gettext('Send message "{{str}}".'),
        placeholders: {
            str: '$1'
        }
    },
    '^Close relay (.+).$': {
        gettext: gettext('Close relay {{number}}.'),
        placeholders: {
            number: '$1'
        }
    },
    '^Open relay (.+).$': {
        gettext: gettext('Open relay {{number}}.'),
        placeholders: {
            number: '$1'
        }
    },
    '^Change trace status to (.+).$': {
        gettext: gettext('Change trace status to {{state | translate}}.'),
        placeholders: {
            state: '$1'
        }
    },
    '^Change relay status to (.+).$': {
        gettext: gettext('Change relay status to {{status | translate}}.'),
        placeholders: {
            status: '$1'
        }
    },
    '^Closing relay (.+).$': {
        gettext: gettext('Closing relay {{number}}.'),
        placeholders: {
            number: '$1'
        }
    },
    '^Opening relay (.+).$': {
        gettext: gettext('Opening relay {{number}}.'),
        placeholders: {
            number: '$1'
        }
    },
    '^Update firmware to: (.+) \\(version: (.+)\\).$': {
        gettext: gettext('Update firmware to: {{name}} (version: {{version}}).'),
        placeholders: {
            name: '$1',
            version: '$2'
        }
    },
    '^Execute generic command: (.+).$': {
        gettext: gettext('Execute generic command: {{command}}.'),
        placeholders: {
            command: '$1'
        }
    },
    '^Failed to refresh application. : Cannot refresh non local-hosted application.$': {
        gettext: gettext('Could not reactivate the application as it is not hosted locally.')
    },
    '^Failed to refresh application. : Cannot refresh application without active version id.$': {
        gettext: gettext('Could not reactivate the application as it has no active version.')
    },
    // TODO: remove if we decide not to translate such messages:
    // '^Killing container with id (.+):Need to kill Pod$': {
    //   gettext: gettext('Killing container with ID "{{containerId}}". Need to kill Pod.'),
    //   placeholders: {
    //     containerId: '$1'
    //   }
    // },
    '^Scaled down replica set (.+) to (\\d+)$': {
        gettext: gettext('Replica set "{{replicaSetName}}" scaled down to "{{scaleNumber}}".'),
        placeholders: {
            replicaSetName: '$1',
            scaleNumber: '$2'
        }
    },
    '^Deleted pod: (.+)$': {
        gettext: gettext('Pod "{{imageName}}" deleted.'),
        placeholders: {
            imageName: '$1'
        }
    },
    '^Container image "(.+)" already present on machine$': {
        gettext: gettext('Container image "{{imageName}}" already exists.'),
        placeholders: {
            imageName: '$1'
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0dGVybi1tZXNzYWdlcy5kYXRhLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvaTE4bi9wYXR0ZXJuLW1lc3NhZ2VzLmRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0NBQW9DO0FBQ3BDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFcEMsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHO0lBQ3RCLG9CQUFvQixFQUFFO1FBQ3BCLE9BQU8sRUFBRSxPQUFPLENBQUMsZ0JBQWdCLENBQUM7S0FDbkM7SUFDRCxpQkFBaUIsRUFBRTtRQUNqQixPQUFPLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQztLQUNsQztJQUNELGlCQUFpQixFQUFFO1FBQ2pCLE9BQU8sRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDO0tBQ2xDO0lBQ0QsNENBQTRDLEVBQUU7UUFDNUMsT0FBTyxFQUFFLE9BQU8sQ0FBQywyREFBMkQsQ0FBQztLQUM5RTtJQUNELDZDQUE2QyxFQUFFO1FBQzdDLE9BQU8sRUFBRSxPQUFPLENBQUMsNkNBQTZDLENBQUM7S0FDaEU7SUFDRCxxRUFBcUUsRUFBRTtRQUNyRSxPQUFPLEVBQUUsT0FBTyxDQUFDLDhEQUE4RCxDQUFDO1FBQ2hGLFlBQVksRUFBRTtZQUNaLE1BQU0sRUFBRSxJQUFJO1NBQ2I7S0FDRjtJQUNELCtFQUErRSxFQUFFO1FBQy9FLE9BQU8sRUFBRSxPQUFPLENBQUMsZ0dBQWdHLENBQUM7UUFDbEgsWUFBWSxFQUFFO1lBQ1osTUFBTSxFQUFFLElBQUk7WUFDWixVQUFVLEVBQUUsSUFBSTtTQUNqQjtLQUNGO0lBQ0QsbURBQW1ELEVBQUU7UUFDbkQsT0FBTyxFQUFFLE9BQU8sQ0FBQyx1REFBdUQsQ0FBQztLQUMxRTtJQUNELGtDQUFrQyxFQUFFO1FBQ2xDLE9BQU8sRUFBRSxPQUFPLENBQUMsZ0NBQWdDLENBQUM7S0FDbkQ7SUFDRCwyRUFBMkUsRUFBRTtRQUMzRSxPQUFPLEVBQUUsT0FBTyxDQUFDLHlFQUF5RSxDQUFDO0tBQzVGO0lBQ0QsbUlBQW1JLEVBQUU7UUFDbkksT0FBTyxFQUFFLE9BQU8sQ0FBQyx5RkFBeUYsQ0FBQztRQUMzRyxZQUFZLEVBQUU7WUFDWixXQUFXLEVBQUUsSUFBSTtTQUNsQjtLQUNGO0lBQ0QsNERBQTRELEVBQUU7UUFDNUQsT0FBTyxFQUFFLE9BQU8sQ0FBQyxvREFBb0QsQ0FBQztLQUN2RTtJQUNELDZCQUE2QixFQUFFO1FBQzdCLE9BQU8sRUFBRSxPQUFPLENBQUMsc0VBQXNFLENBQUM7UUFDeEYsWUFBWSxFQUFFO1lBQ1osWUFBWSxFQUFFLElBQUk7U0FDbkI7S0FDRjtJQUNELGtMQUFrTCxFQUFFO1FBQ2xMLE9BQU8sRUFBRSxPQUFPLENBQUMsa0xBQWtMLENBQUM7UUFDcE0sWUFBWSxFQUFFO1lBQ1osVUFBVSxFQUFFLElBQUk7WUFDaEIsVUFBVSxFQUFFLElBQUk7WUFDaEIsbUJBQW1CLEVBQUUsSUFBSTtZQUN6QixJQUFJLEVBQUUsSUFBSTtZQUNWLE1BQU0sRUFBRSxJQUFJO1NBQ2I7S0FDRjtJQUNELGtOQUFrTixFQUFFO1FBQ2xOLE9BQU8sRUFBRSxPQUFPLENBQUMsc05BQXNOLENBQUM7UUFDeE8sWUFBWSxFQUFFO1lBQ1osVUFBVSxFQUFFLElBQUk7WUFDaEIsVUFBVSxFQUFFLElBQUk7WUFDaEIsbUJBQW1CLEVBQUUsSUFBSTtZQUN6QixJQUFJLEVBQUUsSUFBSTtZQUNWLE1BQU0sRUFBRSxJQUFJO1lBQ1osT0FBTyxFQUFFLElBQUk7U0FDZDtLQUNGO0lBQ0QsaU5BQWlOLEVBQUU7UUFDak4sT0FBTyxFQUFFLE9BQU8sQ0FBQyx3TUFBd00sQ0FBQztRQUMxTixZQUFZLEVBQUU7WUFDWixVQUFVLEVBQUUsSUFBSTtZQUNoQixVQUFVLEVBQUUsSUFBSTtZQUNoQixtQkFBbUIsRUFBRSxJQUFJO1lBQ3pCLElBQUksRUFBRSxJQUFJO1lBQ1YsTUFBTSxFQUFFLElBQUk7U0FDYjtLQUNGO0lBQ0QsME5BQTBOLEVBQUU7UUFDMU4sT0FBTyxFQUFFLE9BQU8sQ0FBQyxnUEFBZ1AsQ0FBQztRQUNsUSxZQUFZLEVBQUU7WUFDWixVQUFVLEVBQUUsSUFBSTtZQUNoQixVQUFVLEVBQUUsSUFBSTtZQUNoQixVQUFVLEVBQUUsSUFBSTtZQUNoQixhQUFhLEVBQUUsSUFBSTtZQUNuQixhQUFhLEVBQUUsSUFBSTtZQUNuQixpQkFBaUIsRUFBRSxJQUFJO1NBQ3hCO0tBQ0Y7SUFDRCx1R0FBdUcsRUFBRTtRQUN2RyxPQUFPLEVBQUUsT0FBTyxDQUFDLHNHQUFzRyxDQUFDO1FBQ3hILFlBQVksRUFBRTtZQUNaLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7S0FDRjtJQUNELDZHQUE2RyxFQUFFO1FBQzdHLE9BQU8sRUFBRSxPQUFPLENBQUMsNEdBQTRHLENBQUM7UUFDOUgsWUFBWSxFQUFFO1lBQ1osT0FBTyxFQUFFLElBQUk7U0FDZDtLQUNGO0lBQ0QsdUVBQXVFLEVBQUU7UUFDdkUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxxRUFBcUUsQ0FBQztRQUN2RixZQUFZLEVBQUU7WUFDWixhQUFhLEVBQUUsSUFBSTtTQUNwQjtLQUNGO0lBQ0QsdUVBQXVFLEVBQUU7UUFDdkUsT0FBTyxFQUFFLE9BQU8sQ0FBQyw4RUFBOEUsQ0FBQztLQUNqRztJQUNELGtFQUFrRSxFQUFFO1FBQ2xFLE9BQU8sRUFBRSxPQUFPLENBQUMsa0VBQWtFLENBQUM7S0FDckY7SUFDRCw2REFBNkQsRUFBRTtRQUM3RCxPQUFPLEVBQUUsT0FBTyxDQUFDLDJEQUEyRCxDQUFDO0tBQzlFO0lBQ0QsbUVBQW1FLEVBQUU7UUFDbkUsT0FBTyxFQUFFLE9BQU8sQ0FBQywySUFBMkksQ0FBQztLQUM5SjtJQUNELHNCQUFzQixFQUFFO1FBQ3RCLE9BQU8sRUFBRSxPQUFPLENBQUMsb0JBQW9CLENBQUM7S0FDdkM7SUFDRCxzQkFBc0IsRUFBRTtRQUN0QixPQUFPLEVBQUUsT0FBTyxDQUFDLG9CQUFvQixDQUFDO0tBQ3ZDO0lBQ0Qsc0JBQXNCLEVBQUU7UUFDdEIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztLQUN2QztJQUNELDhCQUE4QixFQUFFO1FBQzlCLE9BQU8sRUFBRSxPQUFPLENBQUMsK0JBQStCLENBQUM7UUFDakQsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLElBQUk7U0FDWDtLQUNGO0lBQ0QsOEJBQThCLEVBQUU7UUFDOUIsT0FBTyxFQUFFLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQztRQUNqRCxZQUFZLEVBQUU7WUFDWixJQUFJLEVBQUUsSUFBSTtTQUNYO0tBQ0Y7SUFDRCw4QkFBOEIsRUFBRTtRQUM5QixPQUFPLEVBQUUsT0FBTyxDQUFDLCtCQUErQixDQUFDO1FBQ2pELFlBQVksRUFBRTtZQUNaLElBQUksRUFBRSxJQUFJO1NBQ1g7S0FDRjtJQUNELGtDQUFrQyxFQUFFO1FBQ2xDLE9BQU8sRUFBRSxPQUFPLENBQUMsMENBQTBDLENBQUM7UUFDNUQsWUFBWSxFQUFFO1lBQ1osVUFBVSxFQUFFO2dCQUNWLE9BQU8sRUFBRSxJQUFJO2dCQUNiLFNBQVMsRUFBRTtvQkFDVCwyQkFBMkIsRUFBRTt3QkFDM0IsT0FBTyxFQUFFLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQzt3QkFDaEQsWUFBWSxFQUFFOzRCQUNaLEtBQUssRUFBRSxJQUFJO3lCQUNaO3FCQUNGO2lCQUNGO2FBQ0Y7U0FDRjtLQUNGO0lBQ0Qsb09BQW9PLEVBQUU7UUFDcE8sT0FBTyxFQUFFLE9BQU8sQ0FBQyxtUUFBbVEsQ0FBQztRQUNyUixZQUFZLEVBQUU7WUFDWixZQUFZLEVBQUUsSUFBSTtZQUNsQixPQUFPLEVBQUUsSUFBSTtZQUNiLFdBQVcsRUFBRSxJQUFJO1lBQ2pCLElBQUksRUFBRSxJQUFJO1lBQ1YsSUFBSSxFQUFFLElBQUk7U0FDWDtLQUNGO0lBQ0QsMkdBQTJHLEVBQUU7UUFDM0csT0FBTyxFQUFFLE9BQU8sQ0FBQyx5SEFBeUgsQ0FBQztRQUMzSSxZQUFZLEVBQUU7WUFDWixZQUFZLEVBQUUsSUFBSTtZQUNsQixRQUFRLEVBQUUsSUFBSTtTQUNmO0tBQ0Y7SUFDRCxrREFBa0QsRUFBRTtRQUNsRCxPQUFPLEVBQUUsbUJBQW1CO1FBQzVCLFlBQVksRUFBRTtZQUNaLGFBQWEsRUFBRTtnQkFDYixPQUFPLEVBQUUsSUFBSTtnQkFDYixTQUFTLEVBQUU7b0JBQ1QscUNBQXFDLEVBQUU7d0JBQ3JDLE9BQU8sRUFBRSxPQUFPLENBQUMsdUNBQXVDLENBQUM7cUJBQzFEO29CQUNELHFDQUFxQyxFQUFFO3dCQUNyQyxPQUFPLEVBQUUsT0FBTyxDQUFDLGlFQUFpRSxDQUFDO3FCQUNwRjtpQkFDRjthQUNGO1NBQ0Y7S0FDRjtJQUNELHlEQUF5RCxFQUFFO1FBQ3pELE9BQU8sRUFBRSxPQUFPLENBQUMsdUNBQXVDLENBQUM7UUFDekQsWUFBWSxFQUFFO1lBQ1osUUFBUSxFQUFFLElBQUk7U0FDZjtLQUNGO0lBQ0QsOENBQThDLEVBQUU7UUFDOUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxtRUFBbUUsQ0FBQztRQUNyRixZQUFZLEVBQUU7WUFDWixVQUFVLEVBQUUsSUFBSTtTQUNqQjtLQUNGO0lBQ0QscUJBQXFCLEVBQUU7UUFDckIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztLQUN2QztJQUNELHFCQUFxQixFQUFFO1FBQ3JCLE9BQU8sRUFBRSxPQUFPLENBQUMsOEJBQThCLENBQUM7UUFDaEQsWUFBWSxFQUFFO1lBQ1osU0FBUyxFQUFFLElBQUk7U0FDaEI7S0FDRjtJQUNELG9DQUFvQyxFQUFFO1FBQ3BDLE9BQU8sRUFBRSxPQUFPLENBQUMsd0NBQXdDLENBQUM7S0FDM0Q7SUFDRCxtQ0FBbUMsRUFBRTtRQUNuQyxPQUFPLEVBQUUsT0FBTyxDQUFDLHFDQUFxQyxDQUFDO1FBQ3ZELFlBQVksRUFBRTtZQUNaLEtBQUssRUFBRSxJQUFJO1NBQ1o7S0FDRjtJQUNELGlIQUFpSCxFQUFFO1FBQ2pILE9BQU8sRUFBRSxPQUFPLENBQUMsMkdBQTJHLENBQUM7S0FDOUg7SUFDRCx5SUFBeUksRUFBRTtRQUN6SSxPQUFPLEVBQUUsT0FBTyxDQUFDLG1JQUFtSSxDQUFDO0tBQ3RKO0lBQ0QsNEVBQTRFLEVBQUU7UUFDNUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyx1RUFBdUUsQ0FBQztRQUN6RixZQUFZLEVBQUU7WUFDWixRQUFRLEVBQUUsSUFBSTtZQUNkLGdCQUFnQixFQUFFLElBQUk7U0FDdkI7S0FDRjtJQUNELGlEQUFpRCxFQUFFO1FBQ2pELE9BQU8sRUFBRSxPQUFPLENBQUMsd0VBQXdFLENBQUM7UUFDMUYsWUFBWSxFQUFFO1lBQ1osVUFBVSxFQUFFLElBQUk7WUFDaEIsU0FBUyxFQUFFLElBQUk7U0FDaEI7S0FDRjtJQUNELGdCQUFnQixFQUFFO1FBQ2hCLE9BQU8sRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDO0tBQ2hDO0lBQ0QsbUVBQW1FLEVBQUU7UUFDbkUsT0FBTyxFQUFFLE9BQU8sQ0FBQyx3SUFBd0ksQ0FBQztLQUMzSjtJQUNELG9EQUFvRCxFQUFFO1FBQ3BELE9BQU8sRUFBRSxPQUFPLENBQUMsZ0RBQWdELENBQUM7S0FDbkU7SUFDRCwrQ0FBK0MsRUFBRTtRQUMvQyxPQUFPLEVBQUUsT0FBTyxDQUFDLDZEQUE2RCxDQUFDO1FBQy9FLFlBQVksRUFBRTtZQUNaLFNBQVMsRUFBRSxJQUFJO1NBQ2hCO0tBQ0Y7SUFDRCx3Q0FBd0MsRUFBRTtRQUN4QyxPQUFPLEVBQUUsT0FBTyxDQUFDLDhEQUE4RCxDQUFDO1FBQ2hGLFlBQVksRUFBRTtZQUNaLElBQUksRUFBRSxJQUFJO1NBQ1g7S0FDRjtJQUNELDRDQUE0QyxFQUFFO1FBQzVDLE9BQU8sRUFBRSxPQUFPLENBQUMseURBQXlELENBQUM7UUFDM0UsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLElBQUk7U0FDWDtLQUNGO0lBQ0Qsd0pBQXdKLEVBQUU7UUFDeEosT0FBTyxFQUFFLE9BQU8sQ0FBQyx1SEFBdUgsQ0FBQztRQUN6SSxZQUFZLEVBQUU7WUFDWixrQkFBa0IsRUFBRSxJQUFJO1lBQ3hCLGtCQUFrQixFQUFFLElBQUk7U0FDekI7S0FDRjtJQUNELDRGQUE0RixFQUFFO1FBQzVGLE9BQU8sRUFBRSxPQUFPLENBQUMsbUVBQW1FLENBQUM7S0FDdEY7SUFDRCx3SEFBd0gsRUFBRTtRQUN4SCxPQUFPLEVBQUUsT0FBTyxDQUFDLCtJQUErSSxDQUFDO1FBQ2pLLFlBQVksRUFBRTtZQUNaLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLGVBQWUsRUFBRSxJQUFJO1lBQ3JCLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7S0FDRjtJQUNELHlFQUF5RSxFQUFFO1FBQ3pFLE9BQU8sRUFBRSxPQUFPLENBQUMsa0VBQWtFLENBQUM7UUFDcEYsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLElBQUk7WUFDVixLQUFLLEVBQUUsSUFBSTtTQUNaO0tBQ0Y7SUFDRCw4R0FBOEcsRUFBRTtRQUM5RyxPQUFPLEVBQUUsT0FBTyxDQUFDLHFEQUFxRCxDQUFDO1FBQ3ZFLFlBQVksRUFBRTtZQUNaLGFBQWEsRUFBRSxJQUFJO1NBQ3BCO0tBQ0Y7SUFDRCx3TkFBd04sRUFBRTtRQUN4TixPQUFPLEVBQUUsT0FBTyxDQUFDLGlFQUFpRSxDQUFDO0tBQ3BGO0lBQ0QseUZBQXlGLEVBQUU7UUFDekYsT0FBTyxFQUFFLE9BQU8sQ0FBQyx5REFBeUQsQ0FBQztLQUM1RTtJQUNELDZDQUE2QyxFQUFFO1FBQzdDLE9BQU8sRUFBRSxPQUFPLENBQUMsNENBQTRDLENBQUM7S0FDL0Q7SUFDRCwyQ0FBMkMsRUFBRTtRQUMzQyxPQUFPLEVBQUUsT0FBTyxDQUFDLDBDQUEwQyxDQUFDO0tBQzdEO0lBQ0QsaUZBQWlGLEVBQUU7UUFDakYsT0FBTyxFQUFFLE9BQU8sQ0FBQyx1REFBdUQsQ0FBQztRQUN6RSxZQUFZLEVBQUU7WUFDWixRQUFRLEVBQUUsSUFBSTtTQUNmO0tBQ0Y7SUFDRCx3REFBd0QsRUFBRTtRQUN4RCxPQUFPLEVBQUUsT0FBTyxDQUFDLDJEQUEyRCxDQUFDO1FBQzdFLFlBQVksRUFBRTtZQUNaLE1BQU0sRUFBRSxJQUFJO1NBQ2I7S0FDRjtJQUNELHVCQUF1QixFQUFFO1FBQ3ZCLE9BQU8sRUFBRSxPQUFPLENBQUMscUJBQXFCLENBQUM7S0FDeEM7SUFDRCw2QkFBNkIsRUFBRTtRQUM3QixPQUFPLEVBQUUsT0FBTyxDQUFDLGdDQUFnQyxDQUFDO1FBQ2xELFlBQVksRUFBRTtZQUNaLElBQUksRUFBRSxJQUFJO1NBQ1g7S0FDRjtJQUNELG1DQUFtQyxFQUFFO1FBQ25DLE9BQU8sRUFBRSxPQUFPLENBQUMsaURBQWlELENBQUM7UUFDbkUsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLElBQUk7WUFDVixXQUFXLEVBQUU7Z0JBQ1gsT0FBTyxFQUFFLElBQUk7Z0JBQ2IsU0FBUyxFQUFFO29CQUNULHFDQUFxQyxFQUFFO3dCQUNyQyxPQUFPLEVBQUUsT0FBTyxDQUFDLDZCQUE2QixDQUFDO3dCQUMvQyxZQUFZLEVBQUU7NEJBQ1osSUFBSSxFQUFFLElBQUk7eUJBQ1g7cUJBQ0Y7b0JBQ0QsdUNBQXVDLEVBQUU7d0JBQ3ZDLE9BQU8sRUFBRSxPQUFPLENBQUMsK0JBQStCLENBQUM7d0JBQ2pELFlBQVksRUFBRTs0QkFDWixJQUFJLEVBQUUsSUFBSTt5QkFDWDtxQkFDRjtvQkFDRCw4QkFBOEIsRUFBRTt3QkFDOUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQzt3QkFDeEMsWUFBWSxFQUFFOzRCQUNaLElBQUksRUFBRSxJQUFJO3lCQUNYO3FCQUNGO29CQUNELGdDQUFnQyxFQUFFO3dCQUNoQyxPQUFPLEVBQUUsT0FBTyxDQUFDLHdCQUF3QixDQUFDO3dCQUMxQyxZQUFZLEVBQUU7NEJBQ1osSUFBSSxFQUFFLElBQUk7eUJBQ1g7cUJBQ0Y7aUJBQ0Y7YUFDRjtTQUNGO0tBQ0Y7SUFDRCxnQkFBZ0IsRUFBRTtRQUNoQixPQUFPLEVBQUUsT0FBTyxDQUFDLGNBQWMsQ0FBQztLQUNqQztJQUNELDJCQUEyQixFQUFFO1FBQzNCLE9BQU8sRUFBRSxPQUFPLENBQUMsb0NBQW9DLENBQUM7UUFDdEQsWUFBWSxFQUFFO1lBQ1osV0FBVyxFQUFFO2dCQUNYLE9BQU8sRUFBRSxJQUFJO2dCQUNiLFNBQVMsRUFBRTtvQkFDVCxrQkFBa0IsRUFBRTt3QkFDbEIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQzt3QkFDbkQsWUFBWSxFQUFFOzRCQUNaLE1BQU0sRUFBRSxJQUFJO3lCQUNiO3FCQUNGO29CQUNELHVCQUF1QixFQUFFO3dCQUN2QixPQUFPLEVBQUUsT0FBTyxDQUFDLDJDQUEyQyxDQUFDO3dCQUM3RCxZQUFZLEVBQUU7NEJBQ1osV0FBVyxFQUFFLElBQUk7eUJBQ2xCO3FCQUNGO29CQUNELHVCQUF1QixFQUFFO3dCQUN2QixPQUFPLEVBQUUsT0FBTyxDQUFDLDhCQUE4QixDQUFDO3dCQUNoRCxZQUFZLEVBQUU7NEJBQ1osVUFBVSxFQUFFLElBQUk7eUJBQ2pCO3FCQUNGO29CQUNELDBCQUEwQixFQUFFO3dCQUMxQixPQUFPLEVBQUUsT0FBTyxDQUFDLGdEQUFnRCxDQUFDO3dCQUNsRSxZQUFZLEVBQUU7NEJBQ1osYUFBYSxFQUFFLElBQUk7eUJBQ3BCO3FCQUNGO2lCQUNGO2FBQ0Y7U0FDRjtLQUNGO0lBQ0QsOEVBQThFLEVBQUU7UUFDOUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxnRUFBZ0UsQ0FBQztRQUNsRixZQUFZLEVBQUU7WUFDWixJQUFJLEVBQUUsSUFBSTtZQUNWLEtBQUssRUFBRSxJQUFJO1NBQ1o7S0FDRjtJQUNELDBDQUEwQyxFQUFFO1FBQzFDLE9BQU8sRUFBRSxPQUFPLENBQUMsc0JBQXNCLENBQUM7S0FDekM7SUFDRCxtREFBbUQsRUFBRTtRQUNuRCxPQUFPLEVBQUUsT0FBTyxDQUFDLG1FQUFtRSxDQUFDO0tBQ3RGO0lBQ0QsMEJBQTBCLEVBQUU7UUFDMUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztLQUMzQztJQUNELCtCQUErQixFQUFFO1FBQy9CLE9BQU8sRUFBRSxPQUFPLENBQUMsb0NBQW9DLENBQUM7UUFDdEQsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLElBQUk7U0FDWDtLQUNGO0lBQ0QsMEJBQTBCLEVBQUU7UUFDMUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztLQUMzQztJQUNELCtCQUErQixFQUFFO1FBQy9CLE9BQU8sRUFBRSxPQUFPLENBQUMsb0NBQW9DLENBQUM7UUFDdEQsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLElBQUk7U0FDWDtLQUNGO0lBQ0QsNkZBQTZGLEVBQUU7UUFDN0YsT0FBTyxFQUFFLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztLQUN2QztJQUNELGlGQUFpRixFQUFFO1FBQ2pGLE9BQU8sRUFBRSxPQUFPLENBQUMsZ0JBQWdCLENBQUM7S0FDbkM7SUFDRCxzQkFBc0IsRUFBRTtRQUN0QixPQUFPLEVBQUUsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0tBQ3hDO0lBQ0QsMEJBQTBCLEVBQUU7UUFDMUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztLQUMzQztJQUNELGtDQUFrQyxFQUFFO1FBQ2xDLE9BQU8sRUFBRSxPQUFPLENBQUMsbUNBQW1DLENBQUM7UUFDckQsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLElBQUk7U0FDWDtLQUNGO0lBQ0QsOEJBQThCLEVBQUU7UUFDOUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQztLQUNoRDtJQUNELHFFQUFxRSxFQUFFO1FBQ3JFLE9BQU8sRUFBRSxPQUFPLENBQUMsK0ZBQStGLENBQUM7UUFDakgsWUFBWSxFQUFFO1lBQ1osU0FBUyxFQUFFLElBQUk7WUFDZixVQUFVLEVBQUUsSUFBSTtTQUNqQjtLQUNGO0lBQ0QsbURBQW1ELEVBQUU7UUFDbkQsT0FBTyxFQUFFLE9BQU8sQ0FBQyw0REFBNEQsQ0FBQztRQUM5RSxZQUFZLEVBQUU7WUFDWixFQUFFLEVBQUUsSUFBSTtTQUNUO0tBQ0Y7SUFDRCw0Q0FBNEMsRUFBRTtRQUM1QyxPQUFPLEVBQUUsT0FBTyxDQUFDLGtFQUFrRSxDQUFDO1FBQ3BGLFlBQVksRUFBRTtZQUNaLFNBQVMsRUFBRSxJQUFJO1NBQ2hCO0tBQ0Y7SUFDRCwwREFBMEQsRUFBRTtRQUMxRCxPQUFPLEVBQUUsT0FBTyxDQUFDLHdEQUF3RCxDQUFDO0tBQzNFO0lBQ0Qsb0ZBQW9GLEVBQUU7UUFDcEYsT0FBTyxFQUFFLE9BQU8sQ0FBQyxrRkFBa0YsQ0FBQztLQUNyRztJQUNELDJCQUEyQixFQUFFO1FBQzNCLE9BQU8sRUFBRSxPQUFPLENBQUMsb0RBQW9ELENBQUM7S0FDdkU7SUFDRCwrQ0FBK0MsRUFBRTtRQUMvQyxPQUFPLEVBQUUsT0FBTyxDQUFDLDZDQUE2QyxDQUFDO0tBQ2hFO0lBQ0Qsd0lBQXdJLEVBQUU7UUFDeEksT0FBTyxFQUFFLE9BQU8sQ0FBQyxnSUFBZ0ksQ0FBQztRQUNsSixZQUFZLEVBQUU7WUFDWixTQUFTLEVBQUUsSUFBSTtTQUNoQjtLQUNGO0lBQ0QsZ0NBQWdDLEVBQUU7UUFDaEMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQztLQUNuRDtJQUNELHFCQUFxQixFQUFFO1FBQ3JCLE9BQU8sRUFBRSxPQUFPLENBQUMsb0JBQW9CLENBQUM7S0FDdkM7SUFDRCxxQkFBcUIsRUFBRTtRQUNyQixPQUFPLEVBQUUsT0FBTyxDQUFDLG9CQUFvQixDQUFDO0tBQ3ZDO0lBQ0QsdUNBQXVDLEVBQUU7UUFDdkMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxxREFBcUQsQ0FBQztRQUN2RSxZQUFZLEVBQUU7WUFDWixNQUFNLEVBQUUsSUFBSTtTQUNiO0tBQ0Y7SUFDRCxrQkFBa0IsRUFBRTtRQUNsQixPQUFPLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0tBQ3BDO0lBQ0QsMEJBQTBCLEVBQUU7UUFDMUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQztRQUNoRCxZQUFZLEVBQUU7WUFDWixNQUFNLEVBQUUsSUFBSTtTQUNiO0tBQ0Y7SUFDRCxrQkFBa0IsRUFBRTtRQUNsQixPQUFPLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0tBQ3BDO0lBQ0QsMEJBQTBCLEVBQUU7UUFDMUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQztRQUNoRCxZQUFZLEVBQUU7WUFDWixNQUFNLEVBQUUsSUFBSTtTQUNiO0tBQ0Y7SUFDRCwyREFBMkQsRUFBRTtRQUMzRCxPQUFPLEVBQUUsT0FBTyxDQUFDLGtEQUFrRCxDQUFDO0tBQ3JFO0lBQ0QseUNBQXlDLEVBQUU7UUFDekMsT0FBTyxFQUFFLE9BQU8sQ0FBQyx5Q0FBeUMsQ0FBQztLQUM1RDtJQUNELGlDQUFpQyxFQUFFO1FBQ2pDLE9BQU8sRUFBRSxPQUFPLENBQUMsaUNBQWlDLENBQUM7S0FDcEQ7SUFDRCx5RUFBeUUsRUFBRTtRQUN6RSxPQUFPLEVBQUUsT0FBTyxDQUFDLHVFQUF1RSxDQUFDO0tBQzFGO0lBQ0Qsd0RBQXdELEVBQUU7UUFDeEQsT0FBTyxFQUFFLE9BQU8sQ0FBQywrRUFBK0UsQ0FBQztLQUNsRztJQUNELG9DQUFvQyxFQUFFO1FBQ3BDLE9BQU8sRUFBRSxPQUFPLENBQUMsbUNBQW1DLENBQUM7S0FDdEQ7SUFDRCw4REFBOEQsRUFBRTtRQUM5RCxPQUFPLEVBQUUsT0FBTyxDQUFDLGtGQUFrRixDQUFDO1FBQ3BHLFlBQVksRUFBRTtZQUNaLFFBQVEsRUFBRSxJQUFJO1lBQ2QsZUFBZSxFQUFFLElBQUk7U0FDdEI7S0FDRjtJQUNELHdCQUF3QixFQUFFO1FBQ3hCLE9BQU8sRUFBRSxPQUFPLENBQUMsaUNBQWlDLENBQUM7UUFDbkQsWUFBWSxFQUFFO1lBQ1osU0FBUyxFQUFFLElBQUk7U0FDaEI7S0FDRjtJQUNELHVIQUF1SCxFQUFFO1FBQ3ZILE9BQU8sRUFBRSxPQUFPLENBQUMsaUhBQWlILENBQUM7S0FDcEk7SUFDRCxtR0FBbUcsRUFBRTtRQUNuRyxPQUFPLEVBQUUsT0FBTyxDQUFDLCtDQUErQyxDQUFDO1FBQ2pFLFlBQVksRUFBRTtZQUNaLEVBQUUsRUFBRSxJQUFJO1NBQ1Q7S0FDRjtJQUNELHdDQUF3QyxFQUFFO1FBQ3hDLE9BQU8sRUFBRSxPQUFPLENBQUMsa0VBQWtFLENBQUM7UUFDcEYsWUFBWSxFQUFFO1lBQ1osY0FBYyxFQUFFLElBQUk7WUFDcEIsV0FBVyxFQUFFLElBQUk7U0FDbEI7S0FDRjtJQUNELG9DQUFvQyxFQUFFO1FBQ3BDLE9BQU8sRUFBRSxPQUFPLENBQUMsNENBQTRDLENBQUM7UUFDOUQsWUFBWSxFQUFFO1lBQ1osVUFBVSxFQUFFO2dCQUNWLE9BQU8sRUFBRSxJQUFJO2dCQUNiLFNBQVMsRUFBRTtvQkFDVCwyQkFBMkIsRUFBRTt3QkFDM0IsT0FBTyxFQUFFLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQzt3QkFDbEQsWUFBWSxFQUFFOzRCQUNaLEtBQUssRUFBRSxJQUFJO3lCQUNaO3FCQUNGO29CQUNELGdEQUFnRCxFQUFFO3dCQUNoRCxPQUFPLEVBQUUsT0FBTyxDQUFDLHdEQUF3RCxDQUFDO3dCQUMxRSxZQUFZLEVBQUU7NEJBQ1osS0FBSyxFQUFFLElBQUk7NEJBQ1gsUUFBUSxFQUFFLElBQUk7eUJBQ2Y7cUJBQ0Y7b0JBQ0QsMENBQTBDLEVBQUU7d0JBQzFDLE9BQU8sRUFBRSxPQUFPLENBQUMsNENBQTRDLENBQUM7d0JBQzlELFlBQVksRUFBRTs0QkFDWixLQUFLLEVBQUUsSUFBSTt5QkFDWjtxQkFDRjtpQkFDRjthQUNGO1NBQ0Y7S0FDRjtJQUNELDRDQUE0QyxFQUFFO1FBQzVDLE9BQU8sRUFBRSxPQUFPLENBQUMsNERBQTRELENBQUM7UUFDOUUsWUFBWSxFQUFFO1lBQ1osVUFBVSxFQUFFLElBQUk7U0FDakI7S0FDRjtJQUNELHNCQUFzQixFQUFFO1FBQ3RCLE9BQU8sRUFBRSxPQUFPLENBQUMscUJBQXFCLENBQUM7S0FDeEM7SUFDRCxzQkFBc0IsRUFBRTtRQUN0QixPQUFPLEVBQUUsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0tBQ3hDO0lBQ0Qsc0JBQXNCLEVBQUU7UUFDdEIsT0FBTyxFQUFFLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztLQUMxQztJQUNELHVCQUF1QixFQUFFO1FBQ3ZCLE9BQU8sRUFBRSxPQUFPLENBQUMseUJBQXlCLENBQUM7S0FDNUM7SUFDRCxzQkFBc0IsRUFBRTtRQUN0QixPQUFPLEVBQUUsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0tBQ3hDO0lBQ0QsOEJBQThCLEVBQUU7UUFDOUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQztRQUNsRCxZQUFZLEVBQUU7WUFDWixJQUFJLEVBQUUsSUFBSTtTQUNYO0tBQ0Y7SUFDRCw4QkFBOEIsRUFBRTtRQUM5QixPQUFPLEVBQUUsT0FBTyxDQUFDLGdDQUFnQyxDQUFDO1FBQ2xELFlBQVksRUFBRTtZQUNaLElBQUksRUFBRSxJQUFJO1NBQ1g7S0FDRjtJQUNELDhCQUE4QixFQUFFO1FBQzlCLE9BQU8sRUFBRSxPQUFPLENBQUMsa0NBQWtDLENBQUM7UUFDcEQsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLElBQUk7U0FDWDtLQUNGO0lBQ0QsK0JBQStCLEVBQUU7UUFDL0IsT0FBTyxFQUFFLE9BQU8sQ0FBQyxvQ0FBb0MsQ0FBQztRQUN0RCxZQUFZLEVBQUU7WUFDWixJQUFJLEVBQUUsSUFBSTtTQUNYO0tBQ0Y7SUFDRCw4QkFBOEIsRUFBRTtRQUM5QixPQUFPLEVBQUUsT0FBTyxDQUFDLGdDQUFnQyxDQUFDO1FBQ2xELFlBQVksRUFBRTtZQUNaLElBQUksRUFBRSxJQUFJO1NBQ1g7S0FDRjtJQUNELHFCQUFxQixFQUFFO1FBQ3JCLE9BQU8sRUFBRSxPQUFPLENBQUMsb0JBQW9CLENBQUM7S0FDdkM7SUFDRCxzQ0FBc0MsRUFBRTtRQUN0QyxPQUFPLEVBQUUsT0FBTyxDQUFDLDRDQUE0QyxDQUFDO1FBQzlELFlBQVksRUFBRTtZQUNaLFNBQVMsRUFBRSxJQUFJO1lBQ2YsT0FBTyxFQUFFLElBQUk7U0FDZDtLQUNGO0lBQ0Qsb0NBQW9DLEVBQUU7UUFDcEMsT0FBTyxFQUFFLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQztRQUNqRCxZQUFZLEVBQUU7WUFDWixTQUFTLEVBQUUsSUFBSTtTQUNoQjtLQUNGO0lBQ0Qsa0VBQWtFLEVBQUU7UUFDbEUsT0FBTyxFQUFFLE9BQU8sQ0FBQyx5RUFBeUUsQ0FBQztLQUM1RjtJQUNELHVEQUF1RCxFQUFFO1FBQ3ZELE9BQU8sRUFBRSxPQUFPLENBQUMsdUVBQXVFLENBQUM7UUFDekYsWUFBWSxFQUFFO1lBQ1osUUFBUSxFQUFFLElBQUk7U0FDZjtLQUNGO0lBQ0QsNEJBQTRCLEVBQUU7UUFDNUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQztRQUNsRCxZQUFZLEVBQUU7WUFDWixNQUFNLEVBQUUsSUFBSTtTQUNiO0tBQ0Y7SUFDRCwyREFBMkQsRUFBRTtRQUMzRCxPQUFPLEVBQUUsT0FBTyxDQUFDLG9FQUFvRSxDQUFDO1FBQ3RGLFlBQVksRUFBRTtZQUNaLE1BQU0sRUFBRSxJQUFJO1NBQ2I7S0FDRjtJQUNELG9CQUFvQixFQUFFO1FBQ3BCLE9BQU8sRUFBRSxPQUFPLENBQUMsa0JBQWtCLENBQUM7S0FDckM7SUFDRCwwQkFBMEIsRUFBRTtRQUMxQixPQUFPLEVBQUUsT0FBTyxDQUFDLDhCQUE4QixDQUFDO1FBQ2hELFlBQVksRUFBRTtZQUNaLE1BQU0sRUFBRSxJQUFJO1NBQ2I7S0FDRjtJQUNELGtCQUFrQixFQUFFO1FBQ2xCLE9BQU8sRUFBRSxPQUFPLENBQUMsZ0JBQWdCLENBQUM7S0FDbkM7SUFDRCwwQkFBMEIsRUFBRTtRQUMxQixPQUFPLEVBQUUsT0FBTyxDQUFDLDhCQUE4QixDQUFDO1FBQ2hELFlBQVksRUFBRTtZQUNaLE1BQU0sRUFBRSxJQUFJO1NBQ2I7S0FDRjtJQUNELGtCQUFrQixFQUFFO1FBQ2xCLE9BQU8sRUFBRSxPQUFPLENBQUMsZ0JBQWdCLENBQUM7S0FDbkM7SUFDRCw0QkFBNEIsRUFBRTtRQUM1QixPQUFPLEVBQUUsT0FBTyxDQUFDLGdDQUFnQyxDQUFDO1FBQ2xELFlBQVksRUFBRTtZQUNaLE1BQU0sRUFBRSxJQUFJO1NBQ2I7S0FDRjtJQUNELG9CQUFvQixFQUFFO1FBQ3BCLE9BQU8sRUFBRSxPQUFPLENBQUMsa0JBQWtCLENBQUM7S0FDckM7SUFDRCxpQ0FBaUMsRUFBRTtRQUNqQyxPQUFPLEVBQUUsT0FBTyxDQUFDLDhDQUE4QyxDQUFDO1FBQ2hFLFlBQVksRUFBRTtZQUNaLE1BQU0sRUFBRSxJQUFJO1lBQ1osVUFBVSxFQUFFLElBQUk7U0FDakI7S0FDRjtJQUNELGtCQUFrQixFQUFFO1FBQ2xCLE9BQU8sRUFBRSxPQUFPLENBQUMsZ0JBQWdCLENBQUM7S0FDbkM7SUFDRCxxQkFBcUIsRUFBRTtRQUNyQixPQUFPLEVBQUUsT0FBTyxDQUFDLHFDQUFxQyxDQUFDO0tBQ3hEO0lBQ0QsdUNBQXVDLEVBQUU7UUFDdkMsT0FBTyxFQUFFLE9BQU8sQ0FBQyw2Q0FBNkMsQ0FBQztLQUNoRTtJQUNELGdCQUFnQixFQUFFO1FBQ2hCLE9BQU8sRUFBRSxPQUFPLENBQUMsY0FBYyxDQUFDO0tBQ2pDO0lBQ0Qsc0JBQXNCLEVBQUU7UUFDdEIsT0FBTyxFQUFFLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztRQUMzQyxZQUFZLEVBQUU7WUFDWixJQUFJLEVBQUUsSUFBSTtTQUNYO0tBQ0Y7SUFDRCxnQkFBZ0IsRUFBRTtRQUNoQixPQUFPLEVBQUUsT0FBTyxDQUFDLGNBQWMsQ0FBQztLQUNqQztJQUNELHNCQUFzQixFQUFFO1FBQ3RCLE9BQU8sRUFBRSxPQUFPLENBQUMseUJBQXlCLENBQUM7UUFDM0MsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLElBQUk7U0FDWDtLQUNGO0lBQ0QsZ0JBQWdCLEVBQUU7UUFDaEIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxjQUFjLENBQUM7S0FDakM7SUFDRCw0QkFBNEIsRUFBRTtRQUM1QixPQUFPLEVBQUUsT0FBTyxDQUFDLDBDQUEwQyxDQUFDO1FBQzVELFlBQVksRUFBRTtZQUNaLElBQUksRUFBRSxJQUFJO1lBQ1YsV0FBVyxFQUFFO2dCQUNYLE9BQU8sRUFBRSxJQUFJO2dCQUNiLFNBQVMsRUFBRTtvQkFDVCx1QkFBdUIsRUFBRTt3QkFDdkIsT0FBTyxFQUFFLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQzt3QkFDaEQsWUFBWSxFQUFFOzRCQUNaLFFBQVEsRUFBRSxJQUFJO3lCQUNmO3FCQUNGO29CQUNELGlCQUFpQixFQUFFO3dCQUNqQixPQUFPLEVBQUUsT0FBTyxDQUFDLG9CQUFvQixDQUFDO3dCQUN0QyxZQUFZLEVBQUU7NEJBQ1osS0FBSyxFQUFFLElBQUk7eUJBQ1o7cUJBQ0Y7b0JBQ0Qsd0NBQXdDLEVBQUU7d0JBQ3hDLE9BQU8sRUFBRSxPQUFPLENBQUMsc0RBQXNELENBQUM7d0JBQ3hFLFlBQVksRUFBRTs0QkFDWixtQkFBbUIsRUFBRSxJQUFJO3lCQUMxQjtxQkFDRjtvQkFDRCwwQ0FBMEMsRUFBRTt3QkFDMUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyx3REFBd0QsQ0FBQzt3QkFDMUUsWUFBWSxFQUFFOzRCQUNaLG1CQUFtQixFQUFFLElBQUk7eUJBQzFCO3FCQUNGO29CQUNELGlDQUFpQyxFQUFFO3dCQUNqQyxPQUFPLEVBQUUsT0FBTyxDQUFDLDJDQUEyQyxDQUFDO3dCQUM3RCxZQUFZLEVBQUU7NEJBQ1osZ0JBQWdCLEVBQUUsSUFBSTt5QkFDdkI7cUJBQ0Y7b0JBQ0QsbUNBQW1DLEVBQUU7d0JBQ25DLE9BQU8sRUFBRSxPQUFPLENBQUMsNkNBQTZDLENBQUM7d0JBQy9ELFlBQVksRUFBRTs0QkFDWixnQkFBZ0IsRUFBRSxJQUFJO3lCQUN2QjtxQkFDRjtvQkFDRCxpQ0FBaUMsRUFBRTt3QkFDakMsT0FBTyxFQUFFLE9BQU8sQ0FBQywwQ0FBMEMsQ0FBQzt3QkFDNUQsWUFBWSxFQUFFOzRCQUNaLGVBQWUsRUFBRSxJQUFJO3lCQUN0QjtxQkFDRjtvQkFDRCxtQ0FBbUMsRUFBRTt3QkFDbkMsT0FBTyxFQUFFLE9BQU8sQ0FBQyw0Q0FBNEMsQ0FBQzt3QkFDOUQsWUFBWSxFQUFFOzRCQUNaLGVBQWUsRUFBRSxJQUFJO3lCQUN0QjtxQkFDRjtpQkFDRjthQUNGO1NBQ0Y7S0FDRjtJQUNELG9FQUFvRSxFQUFFO1FBQ3BFLE9BQU8sRUFBRSxPQUFPLENBQUMscUNBQXFDLENBQUM7UUFDdkQsWUFBWSxFQUFFO1lBQ1osUUFBUSxFQUFFLElBQUk7U0FDZjtLQUNGO0lBQ0QsMkVBQTJFLEVBQUU7UUFDM0UsT0FBTyxFQUFFLE9BQU8sQ0FBQyx5RUFBeUUsQ0FBQztRQUMzRixZQUFZLEVBQUU7WUFDWixlQUFlLEVBQUUsSUFBSTtTQUN0QjtLQUNGO0lBQ0QsaUVBQWlFLEVBQUU7UUFDakUsT0FBTyxFQUFFLE9BQU8sQ0FBQyw2Q0FBNkMsQ0FBQztRQUMvRCxZQUFZLEVBQUU7WUFDWixLQUFLLEVBQUUsSUFBSTtTQUNaO0tBQ0Y7SUFDRCwwRkFBMEYsRUFBRTtRQUMxRixPQUFPLEVBQUUsT0FBTyxDQUFDLDRDQUE0QyxDQUFDO1FBQzlELFlBQVksRUFBRTtZQUNaLE1BQU0sRUFBRSxJQUFJO1NBQ2I7S0FDRjtJQUNELDBGQUEwRixFQUFFO1FBQzFGLE9BQU8sRUFBRSxPQUFPLENBQUMsNENBQTRDLENBQUM7UUFDOUQsWUFBWSxFQUFFO1lBQ1osTUFBTSxFQUFFLElBQUk7U0FDYjtLQUNGO0lBQ0QscUlBQXFJLEVBQUU7UUFDckksT0FBTyxFQUFFLE9BQU8sQ0FBQyw2RUFBNkUsQ0FBQztLQUNoRztJQUNELHlJQUF5SSxFQUFFO1FBQ3pJLE9BQU8sRUFBRSxPQUFPLENBQUMsd0RBQXdELENBQUM7S0FDM0U7SUFDRCxzRUFBc0UsRUFBRTtRQUN0RSxPQUFPLEVBQUUsT0FBTyxDQUFDLCtEQUErRCxDQUFDO0tBQ2xGO0lBQ0QsbUNBQW1DLEVBQUU7UUFDbkMsT0FBTyxFQUFFLE9BQU8sQ0FBQyw4REFBOEQsQ0FBQztRQUNoRixZQUFZLEVBQUU7WUFDWixTQUFTLEVBQUUsSUFBSTtZQUNmLE1BQU0sRUFBRSxJQUFJO1NBQ2I7S0FDRjtJQUNELDBMQUEwTCxFQUFFO1FBQzFMLE9BQU8sRUFBRSxPQUFPLENBQUMsa1FBQWtRLENBQUM7UUFDcFIsWUFBWSxFQUFFO1lBQ1osUUFBUSxFQUFFLElBQUk7WUFDZCxVQUFVLEVBQUUsSUFBSTtZQUNoQixVQUFVLEVBQUUsSUFBSTtZQUNoQixTQUFTLEVBQUUsSUFBSTtZQUNmLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLFNBQVMsRUFBRSxJQUFJO1lBQ2YsYUFBYSxFQUFFLElBQUk7WUFDbkIsZ0JBQWdCLEVBQUUsSUFBSTtTQUN2QjtLQUNGO0lBQ0Qsa0VBQWtFLEVBQUU7UUFDbEUsT0FBTyxFQUFFLE9BQU8sQ0FBQyw0RUFBNEUsQ0FBQztRQUM5RixZQUFZLEVBQUU7WUFDWixVQUFVLEVBQUUsSUFBSTtTQUNqQjtLQUNGO0lBQ0QsK0lBQStJLEVBQUU7UUFDL0ksT0FBTyxFQUFFLE9BQU8sQ0FBQyxrS0FBa0ssQ0FBQztRQUNwTCxZQUFZLEVBQUU7WUFDWixhQUFhLEVBQUUsSUFBSTtZQUNuQixHQUFHLEVBQUUsSUFBSTtZQUNULFFBQVEsRUFBRSxJQUFJO1NBQ2Y7S0FDRjtJQUNELDhJQUE4SSxFQUFFO1FBQzlJLE9BQU8sRUFBRSxPQUFPLENBQUMsaUtBQWlLLENBQUM7UUFDbkwsWUFBWSxFQUFFO1lBQ1osYUFBYSxFQUFFLElBQUk7WUFDbkIsR0FBRyxFQUFFLElBQUk7WUFDVCxRQUFRLEVBQUUsSUFBSTtTQUNmO0tBQ0Y7SUFDRCxxQkFBcUIsRUFBRTtRQUNyQixPQUFPLEVBQUUsT0FBTyxDQUFDLDRCQUE0QixDQUFDO0tBQy9DO0lBQ0QsOEJBQThCLEVBQUU7UUFDOUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQztLQUNqRDtJQUNELDZOQUE2TixFQUFFO1FBQzdOLE9BQU8sRUFBRSxPQUFPLENBQUMsK0hBQStILENBQUM7UUFDakosWUFBWSxFQUFFO1lBQ1osUUFBUSxFQUFFLElBQUk7WUFDZCxTQUFTLEVBQUUsSUFBSTtZQUNmLGNBQWMsRUFBRSxJQUFJO1lBQ3BCLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7S0FDRjtJQUNELDRIQUE0SCxFQUFFO1FBQzVILE9BQU8sRUFBRSxPQUFPLENBQUMsaUlBQWlJLENBQUM7UUFDbkosWUFBWSxFQUFFO1lBQ1osUUFBUSxFQUFFLElBQUk7U0FDZjtLQUNGO0lBQ0Qsb0RBQW9ELEVBQUU7UUFDcEQsT0FBTyxFQUFFLE9BQU8sQ0FBQyw0RUFBNEUsQ0FBQztRQUM5RixZQUFZLEVBQUU7WUFDWixnQkFBZ0IsRUFBRSxJQUFJO1lBQ3RCLGNBQWMsRUFBRSxJQUFJO1NBQ3JCO0tBQ0Y7SUFDRCxrREFBa0QsRUFBRTtRQUNsRCxPQUFPLEVBQUUsT0FBTyxDQUFDLDBFQUEwRSxDQUFDO1FBQzVGLFlBQVksRUFBRTtZQUNaLGdCQUFnQixFQUFFLElBQUk7WUFDdEIsY0FBYyxFQUFFLElBQUk7U0FDckI7S0FDRjtJQUNELDZDQUE2QyxFQUFFO1FBQzdDLE9BQU8sRUFBRSxPQUFPLENBQUMsNkNBQTZDLENBQUM7UUFDL0QsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLElBQUk7WUFDVixFQUFFLEVBQUUsSUFBSTtTQUNUO0tBQ0Y7SUFDRCwrQ0FBK0MsRUFBRTtRQUMvQyxPQUFPLEVBQUUsT0FBTyxDQUFDLCtDQUErQyxDQUFDO1FBQ2pFLFlBQVksRUFBRTtZQUNaLElBQUksRUFBRSxJQUFJO1lBQ1YsRUFBRSxFQUFFLElBQUk7U0FDVDtLQUNGO0lBQ0Qsd0NBQXdDLEVBQUU7UUFDeEMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxrREFBa0QsQ0FBQztRQUNwRSxZQUFZLEVBQUU7WUFDWixJQUFJLEVBQUUsSUFBSTtZQUNWLEtBQUssRUFBRSxJQUFJO1lBQ1gsSUFBSSxFQUFFLElBQUk7U0FDWDtLQUNGO0lBQ0QsbUNBQW1DLEVBQUU7UUFDbkMsT0FBTyxFQUFFLE9BQU8sQ0FBQywwQ0FBMEMsQ0FBQztRQUM1RCxZQUFZLEVBQUU7WUFDWixJQUFJLEVBQUUsSUFBSTtZQUNWLEtBQUssRUFBRSxJQUFJO1NBQ1o7S0FDRjtJQUNELHNDQUFzQyxFQUFFO1FBQ3RDLE9BQU8sRUFBRSxPQUFPLENBQUMsNkNBQTZDLENBQUM7UUFDL0QsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLElBQUk7WUFDVixLQUFLLEVBQUUsSUFBSTtTQUNaO0tBQ0Y7SUFDRCx3QkFBd0IsRUFBRTtRQUN4QixPQUFPLEVBQUUsT0FBTyxDQUFDLHlCQUF5QixDQUFDO1FBQzNDLFlBQVksRUFBRTtZQUNaLEdBQUcsRUFBRSxJQUFJO1NBQ1Y7S0FDRjtJQUNELHFCQUFxQixFQUFFO1FBQ3JCLE9BQU8sRUFBRSxPQUFPLENBQUMseUJBQXlCLENBQUM7UUFDM0MsWUFBWSxFQUFFO1lBQ1osTUFBTSxFQUFFLElBQUk7U0FDYjtLQUNGO0lBQ0Qsb0JBQW9CLEVBQUU7UUFDcEIsT0FBTyxFQUFFLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztRQUMxQyxZQUFZLEVBQUU7WUFDWixNQUFNLEVBQUUsSUFBSTtTQUNiO0tBQ0Y7SUFDRCxnQ0FBZ0MsRUFBRTtRQUNoQyxPQUFPLEVBQUUsT0FBTyxDQUFDLCtDQUErQyxDQUFDO1FBQ2pFLFlBQVksRUFBRTtZQUNaLEtBQUssRUFBRSxJQUFJO1NBQ1o7S0FDRjtJQUNELGdDQUFnQyxFQUFFO1FBQ2hDLE9BQU8sRUFBRSxPQUFPLENBQUMsZ0RBQWdELENBQUM7UUFDbEUsWUFBWSxFQUFFO1lBQ1osTUFBTSxFQUFFLElBQUk7U0FDYjtLQUNGO0lBQ0QsdUJBQXVCLEVBQUU7UUFDdkIsT0FBTyxFQUFFLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQztRQUM3QyxZQUFZLEVBQUU7WUFDWixNQUFNLEVBQUUsSUFBSTtTQUNiO0tBQ0Y7SUFDRCx1QkFBdUIsRUFBRTtRQUN2QixPQUFPLEVBQUUsT0FBTyxDQUFDLDJCQUEyQixDQUFDO1FBQzdDLFlBQVksRUFBRTtZQUNaLE1BQU0sRUFBRSxJQUFJO1NBQ2I7S0FDRjtJQUNELGlEQUFpRCxFQUFFO1FBQ2pELE9BQU8sRUFBRSxPQUFPLENBQUMsc0RBQXNELENBQUM7UUFDeEUsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLElBQUk7WUFDVixPQUFPLEVBQUUsSUFBSTtTQUNkO0tBQ0Y7SUFDRCxrQ0FBa0MsRUFBRTtRQUNsQyxPQUFPLEVBQUUsT0FBTyxDQUFDLHVDQUF1QyxDQUFDO1FBQ3pELFlBQVksRUFBRTtZQUNaLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7S0FDRjtJQUNELGlGQUFpRixFQUFFO1FBQ2pGLE9BQU8sRUFBRSxPQUFPLENBQUMsbUVBQW1FLENBQUM7S0FDdEY7SUFDRCwwRkFBMEYsRUFBRTtRQUMxRixPQUFPLEVBQUUsT0FBTyxDQUFDLG1FQUFtRSxDQUFDO0tBQ3RGO0lBQ0QsNERBQTREO0lBQzVELHlEQUF5RDtJQUN6RCx3RkFBd0Y7SUFDeEYsb0JBQW9CO0lBQ3BCLHdCQUF3QjtJQUN4QixNQUFNO0lBQ04sS0FBSztJQUNMLDBDQUEwQyxFQUFFO1FBQzFDLE9BQU8sRUFBRSxPQUFPLENBQUMsb0VBQW9FLENBQUM7UUFDdEYsWUFBWSxFQUFFO1lBQ1osY0FBYyxFQUFFLElBQUk7WUFDcEIsV0FBVyxFQUFFLElBQUk7U0FDbEI7S0FDRjtJQUNELHFCQUFxQixFQUFFO1FBQ3JCLE9BQU8sRUFBRSxPQUFPLENBQUMsOEJBQThCLENBQUM7UUFDaEQsWUFBWSxFQUFFO1lBQ1osU0FBUyxFQUFFLElBQUk7U0FDaEI7S0FDRjtJQUNELHFEQUFxRCxFQUFFO1FBQ3JELE9BQU8sRUFBRSxPQUFPLENBQUMsaURBQWlELENBQUM7UUFDbkUsWUFBWSxFQUFFO1lBQ1osU0FBUyxFQUFFLElBQUk7U0FDaEI7S0FDRjtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGggKi9cbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuL2dldHRleHQnO1xuXG5leHBvcnQgY29uc3QgTUVTU0FHRVMgPSB7XG4gICdeQWNjZXNzIGlzIGRlbmllZCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQWNjZXNzIGRlbmllZC4nKVxuICB9LFxuICAnXkFsYXJtIGNyZWF0ZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0FsYXJtIGNyZWF0ZWQnKVxuICB9LFxuICAnXkFsYXJtIHVwZGF0ZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0FsYXJtIHVwZGF0ZWQnKVxuICB9LFxuICAnXkFQSSBpcyBub3QgYXZhaWxhYmxlIHdpdGggdGhlIG5ldyBkb21haW4kJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0NvdWxkIG5vdCBhY3RpdmF0ZSBjdXN0b20gZG9tYWluLiBETlMgc2V0dXAgaXMgaW5jb3JyZWN0LicpXG4gIH0sXG4gICdeQXBwbGljYXRpb24gd2l0aCBnaXZlbiBuYW1lIGFscmVhZHkgZXhpc3QkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0FwcGxpY2F0aW9uIHdpdGggZ2l2ZW4gbmFtZSBhbHJlYWR5IGV4aXN0cy4nKVxuICB9LFxuICAnXkFwcGxpY2F0aW9uIHdpdGggaWQgKC4rPykgaXMgYWxyZWFkeSBhc3NpZ25lZCB0byB0aGUgdGVuYW50ICguKz8pJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdUaGlzIGFwcGxpY2F0aW9uIGlzIGFscmVhZHkgYXNzaWduZWQgdG8gdGVuYW50IFwie3t0ZW5hbnR9fVwiLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgdGVuYW50OiAnJDInXG4gICAgfVxuICB9LFxuICAnXiguKylwcGxpY2F0aW9uIGZvciB0ZW5hbnQgKC4rKSB3aXRoIHByb3BlcnRpZXMgXFxcXCggKC4rPykgXFxcXCkgYWxyZWFkeSBleGlzdHMkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0FwcGxpY2F0aW9uIGZvciB0ZW5hbnQgXCJ7e3RlbmFudH19XCIgd2l0aCB0aGUgZm9sbG93aW5nIHZhbHVlcyAoe3t2YWx1ZXNMaXN0fX0pIGFscmVhZHkgZXhpc3RzLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgdGVuYW50OiAnJDInLFxuICAgICAgdmFsdWVzTGlzdDogJyQzJ1xuICAgIH1cbiAgfSxcbiAgJ15BdXRoZW50aWNhdGlvbiBmYWlsZWQhIDogVXNlciBhY2NvdW50IGlzIGxvY2tlZCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQXV0aGVudGljYXRpb24gZmFpbGVkIGR1ZSB0bzogdXNlciBhY2NvdW50IGlzIGxvY2tlZC4nKVxuICB9LFxuICAnXkF2YWlsYWJpbGl0eSBtb25pdG9yaW5nIHJlY29yZCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQXZhaWxhYmlsaXR5IG1vbml0b3JpbmcgcmVjb3JkJylcbiAgfSxcbiAgJ15DYW4gbm90IGFjdGl2YXRlIGEgY2VydGlmaWNhdGUgd2hpY2ggaXMgZWl0aGVyIGV4cGlyZWQgb3Igbm90IHlldCB2YWxpZCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ2Fubm90IGFjdGl2YXRlIGEgY2VydGlmaWNhdGUgd2hpY2ggaXMgZWl0aGVyIGV4cGlyZWQgb3Igbm90IHlldCB2YWxpZC4nKVxuICB9LFxuICAnXkNhbm5vdCBhZGQgY2VydGlmaWNhdGUgLSBjZXJ0aWZpY2F0ZSB3aXRoICguKz8pIGZpbmdlcnByaW50IGFscmVhZHkgZXhpc3RzLiA6IENlcnRpZmljYXRlIHdpdGggKC4rPykgZmluZ2VycHJpbnQgYWxyZWFkeSBleGlzdHMuJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0NvdWxkIG5vdCBhZGQgY2VydGlmaWNhdGUuIENlcnRpZmljYXRlIHdpdGgge3tmaW5nZXJwcmludH19IGZpbmdlcnByaW50IGFscmVhZHkgZXhpc3RzLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgZmluZ2VycHJpbnQ6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeQ2Fubm90IGNoYW5nZSBwYXNzd29yZC4gOiBQcm92aWRlZCB0b2tlbiBkb2VzIG5vdCBleGlzdC4kJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0Nhbm5vdCBjaGFuZ2UgcGFzc3dvcmQ6IHByb3ZpZGVkIHRva2VuIGlzIGludmFsaWQuJylcbiAgfSxcbiAgJ15DYW5ub3QgZGVwbG95IG1vZHVsZSAoLiopJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdDYW5ub3QgZGVwbG95IG1vZHVsZSBkdWUgdG8gZXJyb3I6IFwie3sgZXJyb3JNZXNzYWdlIHwgdHJhbnNsYXRlIH19XCIuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBlcnJvck1lc3NhZ2U6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeQ2Fubm90IGRlcGxveSBtb2R1bGUgKC4rPykhIDogQ29tcGlsYXRpb24gZmFpbGVkIGluIG1vZHVsZSBcXCcoLis/KVxcJyBpbiBleHByZXNzaW9uIFxcJyguKz8pXFwnIDogSW5jb3JyZWN0IHN5bnRheCBuZWFyIFxcJyguKz8pXFwnIGF0IGxpbmUgKFxcXFxkKykgY29sdW1uIChcXFxcZCspIFxcXFxbKFtcXFxcU1xcXFxzXSs/KVxcXFxdJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdDb3VsZCBub3QgZGVwbG95IG1vZHVsZSBcInt7bW9kdWxlTmFtZX19XCIuIENvbXBpbGF0aW9uIGZhaWxlZCBpbiBleHByZXNzaW9uIFwie3tleHByZXNzaW9ufX1cIjogaW5jb3JyZWN0IHN5bnRheCBuZWFyIFwie3tpbmNvcnJlY3RFeHByZXNzaW9ufX1cIiBhdCBsaW5lIHt7bGluZX19IGNvbHVtbiB7e2NvbHVtbn19LicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgbW9kdWxlTmFtZTogJyQxJyxcbiAgICAgIGV4cHJlc3Npb246ICckMycsXG4gICAgICBpbmNvcnJlY3RFeHByZXNzaW9uOiAnJDQnLFxuICAgICAgbGluZTogJyQ1JyxcbiAgICAgIGNvbHVtbjogJyQ2J1xuICAgIH1cbiAgfSxcbiAgJ15DYW5ub3QgZGVwbG95IG1vZHVsZSAoLis/KSEgOiBDb21waWxhdGlvbiBmYWlsZWQgaW4gbW9kdWxlIFxcJyguKz8pXFwnIGluIGV4cHJlc3Npb24gXFwnKC4rPylcXCcgOiBJbmNvcnJlY3Qgc3ludGF4IG5lYXIgXFwnKC4rPylcXCcgYXQgbGluZSAoXFxcXGQrKSBjb2x1bW4gKFxcXFxkKykgbmVhciByZXNlcnZlZCBrZXl3b3JkIFxcJyguKz8pXFwnIFxcXFxbKFtcXFxcU1xcXFxzXSs/KVxcXFxdJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdDb3VsZCBub3QgZGVwbG95IG1vZHVsZSBcInt7bW9kdWxlTmFtZX19XCIuIENvbXBpbGF0aW9uIGZhaWxlZCBpbiBleHByZXNzaW9uIFwie3tleHByZXNzaW9ufX1cIjogaW5jb3JyZWN0IHN5bnRheCBuZWFyIFwie3tpbmNvcnJlY3RFeHByZXNzaW9ufX1cIiBhdCBsaW5lIHt7bGluZX19IGNvbHVtbiB7e2NvbHVtbn19IG5lYXIgcmVzZXJ2ZWQga2V5d29yZCBcInt7a2V5d29yZH19XCIuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBtb2R1bGVOYW1lOiAnJDEnLFxuICAgICAgZXhwcmVzc2lvbjogJyQzJyxcbiAgICAgIGluY29ycmVjdEV4cHJlc3Npb246ICckNCcsXG4gICAgICBsaW5lOiAnJDUnLFxuICAgICAgY29sdW1uOiAnJDYnLFxuICAgICAga2V5d29yZDogJyQ3J1xuICAgIH1cbiAgfSxcbiAgJ15DYW5ub3QgZGVwbG95IG1vZHVsZSAoLis/KSEgOiBDb21waWxhdGlvbiBmYWlsZWQgaW4gbW9kdWxlIFxcJyguKz8pXFwnIGluIGV4cHJlc3Npb24gXFwnKC4rPylcXCcgOiBJbmNvcnJlY3Qgc3ludGF4IG5lYXIgXFwnKC4rPylcXCcgYXQgbGluZSAoXFxcXGQrKSBjb2x1bW4gKFxcXFxkKyksIHBsZWFzZSBjaGVjayB0aGUgd2hlcmUgY2xhdXNlIFxcXFxbKFtcXFxcU1xcXFxzXSs/KVxcXFxdJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdDb3VsZCBub3QgZGVwbG95IG1vZHVsZSBcInt7bW9kdWxlTmFtZX19XCIuIENvbXBpbGF0aW9uIGZhaWxlZCBpbiBleHByZXNzaW9uIFwie3tleHByZXNzaW9ufX1cIjogaW5jb3JyZWN0IHN5bnRheCBuZWFyIFwie3tpbmNvcnJlY3RFeHByZXNzaW9ufX1cIiBhdCBsaW5lIHt7bGluZX19IGNvbHVtbiB7e2NvbHVtbn19LCBjaGVjayBcIndoZXJlXCIgY2xhdXNlLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgbW9kdWxlTmFtZTogJyQxJyxcbiAgICAgIGV4cHJlc3Npb246ICckMycsXG4gICAgICBpbmNvcnJlY3RFeHByZXNzaW9uOiAnJDQnLFxuICAgICAgbGluZTogJyQ1JyxcbiAgICAgIGNvbHVtbjogJyQ2J1xuICAgIH1cbiAgfSxcbiAgJ15DYW5ub3QgZGVwbG95IG1vZHVsZSAoLis/KSEgOiBEZXBsb3ltZW50IGZhaWxlZCBpbiBtb2R1bGUgXFwnKC4rPylcXCcgaW4gZXhwcmVzc2lvbiBcXCcoLis/KVxcJyA6IEV4Y2VwdGlvbiBjb21waWxpbmcgc2NyaXB0IFxcJyguKz8pXFwnIG9mIGRpYWxlY3QgXFwnKC4rPylcXCc6IG1pc3NpbmcgKC4rPykgYmVmb3JlIHN0YXRlbWVudCBcXFxcKCguKz8pXFxcXCkgXFxcXFsoW1xcXFxTXFxcXHNdKz8pXFxcXF0kJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0NvdWxkIG5vdCBkZXBsb3kgbW9kdWxlIFwie3ttb2R1bGVOYW1lfX1cIi4gQ29tcGlsYXRpb24gZmFpbGVkIGluIGV4cHJlc3Npb24gXCJ7e2V4cHJlc3Npb259fVwiOiBleGNlcHRpb24gY29tcGlsaW5nIHNjcmlwdCBcInt7c2NyaXB0TmFtZX19XCIgb2YgZGlhbGVjdCBcInt7c2NyaXB0RGlhbGVjdH19XCI6IG1pc3NpbmcgXCJ7e21pc3NpbmdTeW50YXh9fVwiIGJlZm9yZSBzdGF0ZW1lbnQgXCJ7e2FmZmVjdGVkU3RhdGVtZW50fX1cIi4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIG1vZHVsZU5hbWU6ICckMScsXG4gICAgICBleHByZXNzaW9uOiAnJDMnLFxuICAgICAgc2NyaXB0TmFtZTogJyQ0JyxcbiAgICAgIHNjcmlwdERpYWxlY3Q6ICckNScsXG4gICAgICBtaXNzaW5nU3ludGF4OiAnJDYnLFxuICAgICAgYWZmZWN0ZWRTdGF0ZW1lbnQ6ICckNydcbiAgICB9XG4gIH0sXG4gICdeQ2Fubm90IGV4ZWN1dGUgYnVsayBvcGVyYXRpb24gb24gZW1wdHkgZ3JvdXAuIEdyb3VwIHdpdGggaWQ9XFwnKFxcXFxkKz8pXFwnIGRvZXNuXFwndCBoYXZlIGNoaWxkIGFzc2V0cy4kJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0NvdWxkIG5vdCBleGVjdXRlIGJ1bGsgb3BlcmF0aW9uIG9uIGFuIGVtcHR5IGdyb3VwLiBHcm91cCB3aXRoIElEIFwie3tncm91cElkfX1cIiBoYXMgbm8gY2hpbGQgYXNzZXRzLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgZ3JvdXBJZDogJyQxJ1xuICAgIH1cbiAgfSxcbiAgJ15DYW5ub3QgZXhlY3V0ZSBidWxrIG9wZXJhdGlvbiBvbiBlbXB0eSBncm91cC4gRHluYW1pY0dyb3VwIHdpdGggaWQ9XFwnKFxcXFxkKz8pXFwnIGRvZXNuXFwndCBoYXZlIGNoaWxkIGFzc2V0cyQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ291bGQgbm90IGV4ZWN1dGUgYnVsayBvcGVyYXRpb24gb24gYW4gZW1wdHkgZ3JvdXAuIFNtYXJ0IGdyb3VwIHdpdGggSUQgXCJ7e2dyb3VwSWR9fVwiIGhhcyBubyBjaGlsZCBhc3NldHMuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBncm91cElkOiAnJDEnXG4gICAgfVxuICB9LFxuICAnXkNhbm5vdCBwYXJzZSBYNTA5IGNlcnRpZmljYXRlLiA6IENvdWxkIG5vdCBwYXJzZSBjZXJ0aWZpY2F0ZTogKC4rPykkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0NvdWxkIG5vdCBwYXJzZSBYLjUwOSBjZXJ0aWZpY2F0ZToge3sgZmFpbHVyZVJlYXNvbiB8IHRyYW5zbGF0ZSB9fS4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIGZhaWx1cmVSZWFzb246ICckMSdcbiAgICB9XG4gIH0sXG4gICdeQ2Fubm90IHJlc2NoZWR1bGUgYnVsayBvcGVyYXRpb24uIEFsbCBpdHMgb3BlcmF0aW9ucyBhcmUgc3VjY2Vzc2Z1bCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ2Fubm90IHJlc2NoZWR1bGUgYnVsayBvcGVyYXRpb24uIEFsbCBpdHMgb3BlcmF0aW9ucyBhcmUgYWxyZWFkeSBzdWNjZXNzZnVsLicpXG4gIH0sXG4gICdeQ2Fubm90IHJlc2V0IHVzZXIgcGFzc3dvcmQgOiBDYW5ub3QgZmluZCB1c2VyIHdpdGggc3VjaCBlbWFpbC4kJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0Nhbm5vdCByZXNldCBwYXNzd29yZCBmb3IgdXNlciB3aXRoIHN1Y2ggZW1haWw6IGVtYWlsIG5vdCBmb3VuZC4nKVxuICB9LFxuICAnXkNhbm5vdCB1cGRhdGUvZGVsZXRlIGFwcGxpY2F0aW9uIGJpbmFyeSB2aWEgdGhpcyBlbmRwb2ludCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ2Fubm90IHVwZGF0ZS9kZWxldGUgYXBwbGljYXRpb24gYmluYXJ5IHZpYSB0aGlzIGVuZHBvaW50JylcbiAgfSxcbiAgJ15DYW5cXCd0IGRlbGV0ZSB1c2VyIGJlY2F1c2UgaXQgaXMgdXNlZCBieSBhbm90aGVyIG1hbmFnZWQgb2JqZWN0JCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdDYW5ub3QgZGVsZXRlIGRldmljZSB3aXRoIGFzc29jaWF0ZWQgZGV2aWNlIG93bmVyIGJlY2F1c2UgdGhpcyBvd25lciBpcyBzdGlsbCBhc3NpZ25lZCB0byBvdGhlciBkZXZpY2UocykuIFRyeSB0byByZW1vdmUgb25seSB0aGUgZGV2aWNlLicpXG4gIH0sXG4gICdeQ2VwIG1vZHVsZSBjcmVhdGVkJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdDRVAgbW9kdWxlIGNyZWF0ZWQnKVxuICB9LFxuICAnXkNlcCBtb2R1bGUgdXBkYXRlZCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ0VQIG1vZHVsZSB1cGRhdGVkJylcbiAgfSxcbiAgJ15DZXAgbW9kdWxlIGRlbGV0ZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0NFUCBtb2R1bGUgZGVsZXRlZCcpXG4gIH0sXG4gICdeQ2VwIG1vZHVsZSBcIiguKz8pXCIgY3JlYXRlZCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ0VQIG1vZHVsZSBcInt7bmFtZX19XCIgY3JlYXRlZCcpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgbmFtZTogJyQxJ1xuICAgIH1cbiAgfSxcbiAgJ15DZXAgbW9kdWxlIFwiKC4rPylcIiB1cGRhdGVkJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdDRVAgbW9kdWxlIFwie3tuYW1lfX1cIiB1cGRhdGVkJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBuYW1lOiAnJDEnXG4gICAgfVxuICB9LFxuICAnXkNlcCBtb2R1bGUgXCIoLis/KVwiIGRlbGV0ZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0NFUCBtb2R1bGUgXCJ7e25hbWV9fVwiIGRlbGV0ZWQnKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIG5hbWU6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeQ29tbWFuZCBzdGF0ZSBpcyBpbnZhbGlkOiAoLispJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdDb21tYW5kIHN0YXRlIGlzIGludmFsaWQ6IHt7dmlvbGF0aW9uc319JyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICB2aW9sYXRpb25zOiB7XG4gICAgICAgIGNhcHR1cmU6ICckMScsXG4gICAgICAgIHRyYW5zbGF0ZToge1xuICAgICAgICAgICcoXFxcXHcrPykgLSBtYXkgbm90IGJlIG51bGwnOiB7XG4gICAgICAgICAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdcInt7ZmllbGR9fVwiIG11c3Qgbm90IGJlIG51bGwnKSxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgICAgICAgICBmaWVsZDogJyQxJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgJ15Db3VsZCBub3QgY29ubmVjdCB0byBlbmRwb2ludCAoLispXFxcXC4gQ291bGQgbm90IHZlcmlmeSBgKC4rKWAgaG9zdCBrZXkgd2l0aCBmaW5nZXJwcmludCBgKC4rKWAgZm9yIGAoLispYCBvbiBwb3J0ICguKylcXFxcLiBJZiB5b3UgZXhwZWN0ZWQgdGhhdCBrZXksIHBsZWFzZSByZW1vdmUgdGhlIHByZXZpb3VzIG9uZSBmcm9tIGNvbmZpZ3VyYXRpb24gdG8gYWxsb3cgZm9yIGNvbm5lY3Rpb25cXFxcLiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ291bGQgbm90IGNvbm5lY3QgdG8gZW5kcG9pbnQgXCJ7e2VuZHBvaW50TmFtZX19XCIuIENvdWxkIG5vdCB2ZXJpZnkge3trZXlUeXBlfX0gaG9zdCBrZXkgd2l0aCBmaW5nZXJwcmludCB7e2ZpbmdlcnByaW50fX0gZm9yIGhvc3Qge3tob3N0fX0gb24gcG9ydCB7e3BvcnR9fS4gSWYgeW91IGV4cGVjdGVkIHRoaXMga2V5LCBwbGVhc2UgcmVtb3ZlIHRoZSBwcmV2aW91cyBvbmUgZnJvbSBjb25maWd1cmF0aW9uIHRvIGFsbG93IGZvciBjb25uZWN0aW9uLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgZW5kcG9pbnROYW1lOiAnJDEnLFxuICAgICAga2V5VHlwZTogJyQyJyxcbiAgICAgIGZpbmdlcnByaW50OiAnJDMnLFxuICAgICAgaG9zdDogJyQ0JyxcbiAgICAgIHBvcnQ6ICckNSdcbiAgICB9XG4gIH0sXG4gICdeQ291bGQgbm90IGxvZ2luIHRvIHNzaCBzZXJ2ZXIgb24gZW5kcG9pbnQgXCIoLispXCJcXFxcLiBQcm92aWRlZCBjcmVkZW50aWFsIGZvciB1c2VyIFwiKC4rKVwiIGlzIGluY29ycmVjdFxcXFwuJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdDb3VsZCBub3QgYWNjZXNzIFNTSCBzZXJ2ZXIgb24gZW5kcG9pbnQgXCJ7e2VuZHBvaW50TmFtZX19XCIuIFByb3ZpZGVkIGNyZWRlbnRpYWxzIGZvciB1c2VyIFwie3t1c2VyTmFtZX19XCIgYXJlIGluY29ycmVjdC4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIGVuZHBvaW50TmFtZTogJyQxJyxcbiAgICAgIHVzZXJOYW1lOiAnJDInXG4gICAgfVxuICB9LFxuICAnXkNvdWxkIG5vdCBzYXZlIG9iamVjdCByZW1vdGVBY2Nlc3NVcGRhdGU6ICguKykkJzoge1xuICAgIGdldHRleHQ6ICd7e2Vycm9yTWVzc2FnZXN9fScsXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBlcnJvck1lc3NhZ2VzOiB7XG4gICAgICAgIGNhcHR1cmU6ICckMScsXG4gICAgICAgIHRyYW5zbGF0ZToge1xuICAgICAgICAgICdDb3VsZCBub3QgcmVjb2duaXplIGhvc3Qta2V5IGZvcm1hdCc6IHtcbiAgICAgICAgICAgIGdldHRleHQ6IGdldHRleHQoJ0NvdWxkIG5vdCByZWNvZ25pemUgXCJIb3N0IGtleVwiIGZvcm1hdCcpXG4gICAgICAgICAgfSxcbiAgICAgICAgICAnQ291bGQgbm90IHJlY29nbml6ZSBrZXktcGFpciBmb3JtYXQnOiB7XG4gICAgICAgICAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdDb3VsZCBub3QgcmVjb2duaXplIHRoZSBmb3JtYXQgb2YgXCJQdWJsaWMga2V5XCIgb3IgXCJQcml2YXRlIGtleVwiJylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gICdeQ291bGQgbm90IHVwZGF0ZSB1c2VyLiA6IEVycm9yIHBlcnNpc3RpbmcgdXNlciAoLis/KSEkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0NvdWxkIG5vdCB1cGRhdGUgdXNlciBcInt7dXNlcm5hbWV9fVwiLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgdXNlcm5hbWU6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeQ3JlYXRpb24gcmFtcCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAoXFxcXGQrPykkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0J1bGsgb3BlcmF0aW9uIGRlbGF5IG11c3QgYmUgZ3JlYXRlciB0aGFuIHt7bWluU2Vjb25kc319IHNlY29uZHMuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBtaW5TZWNvbmRzOiAnJDEnXG4gICAgfVxuICB9LFxuICAnXkNyZWF0ZWQgY29udGFpbmVyJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdDb250YWluZXIgY3JlYXRlZC4nKVxuICB9LFxuICAnXkNyZWF0ZWQgcG9kOiAoLispJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdQb2QgXCJ7e2ltYWdlTmFtZX19XCIgY3JlYXRlZC4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIGltYWdlTmFtZTogJyQxJ1xuICAgIH1cbiAgfSxcbiAgJ15DU1YgZmlsZSBjb250YWluZWQgZW1wdHkgZGF0YXNldCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnTm8gZW50cmllcyBmb3VuZCBpbiB1cGxvYWRlZCBDU1YgZmlsZS4nKVxuICB9LFxuICAnXkN5Y2xlIGRldGVjdGVkIGZvciByb3V0ZSAoLis/KSEkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0N5Y2xlIGRldGVjdGVkIGZvciByb3V0ZSB7e3JvdXRlfX0uJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICByb3V0ZTogJyQxJ1xuICAgIH1cbiAgfSxcbiAgJ15EYXRhIGJyb2tlciBwcm9jZXNzaW5nIGlzIGN1cnJlbnRseSBvdmVybG9hZGVkIGFuZCBtYXkgc3RvcCBmb3J3YXJkaW5nIHlvdXIgZGF0YVxcXFwuIFBsZWFzZSBjb250YWN0IHN1cHBvcnRcXFxcLiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnRGF0YSBicm9rZXIgcHJvY2Vzc2luZyBpcyBjdXJyZW50bHkgb3ZlcmxvYWRlZCBhbmQgbWF5IHN0b3AgZm9yd2FyZGluZyB5b3VyIGRhdGEuIFBsZWFzZSBjb250YWN0IHN1cHBvcnQuJylcbiAgfSxcbiAgJ15EYXRhIGJyb2tlciBwcm9jZXNzaW5nIGlzIG5vdCBhYmxlIHRvIGNvbm5lY3QgZG8gZGVzdGluYXRpb24gdGVuYW50LCB0aHVzIGRhdGEgZm9yd2FyZGluZyBpcyBub3Qgd29ya2luZ1xcXFwuIFBsZWFzZSBjb250YWN0IHN1cHBvcnRcXFxcLiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnRGF0YSBicm9rZXIgcHJvY2Vzc2luZyBpcyBub3QgYWJsZSB0byBjb25uZWN0IHRvIGRlc3RpbmF0aW9uIHRlbmFudCwgdGh1cyBkYXRhIGZvcndhcmRpbmcgaXMgbm90IHdvcmtpbmcuIFBsZWFzZSBjb250YWN0IHN1cHBvcnQuJylcbiAgfSxcbiAgJ15EZXZpY2UgaWQgXFwnKC4rPylcXCcgY29udGFpbnMgXFwnKC4rPylcXCcgY2hhcmFjdGVyIHdoaWNoIGlzIG5vdCBwZXJtaXR0ZWQuJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdJRCBcInt7ZGV2aWNlSWR9fVwiIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVyOiBcInt7aW52YWxpZENoYXJhY3Rlcn19XCIuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBkZXZpY2VJZDogJyQxJyxcbiAgICAgIGludmFsaWRDaGFyYWN0ZXI6ICckMidcbiAgICB9XG4gIH0sXG4gICdeRGV2aWNlIG5hbWU6IFxcJyguKz8pXFwnLCBhbGFybSB0ZXh0OiBcXCcoLis/KVxcJyQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnRGV2aWNlIG5hbWU6IFwie3tkZXZpY2VOYW1lfX1cIiwgYWxhcm0gdGV4dDogXCJ7e2FsYXJtVGV4dCB8IHRyYW5zbGF0ZX19XCInKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIGRldmljZU5hbWU6ICckMScsXG4gICAgICBhbGFybVRleHQ6ICckMidcbiAgICB9XG4gIH0sXG4gICdeRGlzcGxheSBuYW1lJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdMb2dpbiBhbGlhcycpXG4gIH0sXG4gICdeRG9tYWluIG5hbWUgaW4gdXBsb2FkZWQgY2VydGlmaWNhdGUgZGlmZmVycyBmcm9tIHRoZSBvbmUgaW4gdXNlJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdEb21haW4gbmFtZSBpbiB1cGxvYWRlZCBjZXJ0aWZpY2F0ZSBkaWZmZXJzIGZyb20gdGhlIG9uZSBpbiB1c2UuIFBsZWFzZSBkZWFjdGl2YXRlIHRoZSBjdXN0b20gZG9tYWluIGJlZm9yZSB1cGxvYWRpbmcgbmV3IGNlcnRpZmljYXRlLicpXG4gIH0sXG4gICdeRG9tYWluIG5hbWUgaXMgYWxyZWFkeSBpbiB1c2UgYnkgYW5vdGhlciB0ZW5hbnQhJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdEb21haW4gbmFtZSBpcyBhbHJlYWR5IHVzZWQgYnkgYW5vdGhlciB0ZW5hbnQuJylcbiAgfSxcbiAgJ15EdXBsaWNhdGVkIGNvbm5lY3RvciBmb3IgaW5zdGFuY2VVcmwgKC4rPykhJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdUYXJnZXQgVVJMIHt7dGFyZ2V0VXJsfX0gYWxyZWFkeSB1c2VkIGJ5IGFub3RoZXIgY29ubmVjdG9yLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgdGFyZ2V0VXJsOiAnJDEnXG4gICAgfVxuICB9LFxuICAnXkR1cGxpY2F0ZWQgY29ubmVjdG9yIGZvciBuYW1lICguKz8pISQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ29ubmVjdG9yIG5hbWUgXCJ7e25hbWV9fVwiIGFscmVhZHkgdXNlZCBieSBhbm90aGVyIGNvbm5lY3Rvci4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIG5hbWU6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeRW50cnkgaXMgb3V0c2lkZSBvZiB0aGUgdGFyZ2V0IGRpcjogKC4rKSQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnRmlsZSBlbnRyeSBvdXRzaWRlIG9mIHRoZSB0YXJnZXQgZGlyZWN0b3J5OiBcInt7cGF0aH19XCIuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBwYXRoOiAnJDEnXG4gICAgfVxuICB9LFxuICAnXkVycm9yIGR1cmluZyBwYXNzd29yZCB2YWxpZGF0aW9uLiA6IFBhc3N3b3JkIG11c3QgaGF2ZSBhdCBsZWFzdCAoXFxcXGQrPykgY2hhcmFjdGVycyBhbmQgbm8gbW9yZSB0aGFuIChcXFxcZCs/KSBhbmQgbXVzdCBjb250YWluIG9ubHkgTGF0aW4xIGNoYXJhY3RlcnMuJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdQYXNzd29yZCBpcyBpbnZhbGlkLiBJdCBtdXN0IGhhdmUgYXQgbGVhc3Qge3ttaW5DaGFyYWN0ZXJzQ291bnR9fSBhbmQgbm8gbW9yZSB0aGFuIHt7bWF4Q2hhcmFjdGVyc0NvdW50fX0gY2hhcmFjdGVycy4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIG1pbkNoYXJhY3RlcnNDb3VudDogJyQxJyxcbiAgICAgIG1heENoYXJhY3RlcnNDb3VudDogJyQyJ1xuICAgIH1cbiAgfSxcbiAgJ15FcnJvciBkdXJpbmcgcGFzc3dvcmQgdmFsaWRhdGlvbi4gOiBZb3VyIHBhc3N3b3JkIGhhcyBiZWVuIHVzZWQgYWxyZWFkeS4gQ2hvb3NlIGFub3RoZXIuJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdUaGlzIHBhc3N3b3JkIGhhcyBhbHJlYWR5IGJlZW4gdXNlZCBlYXJsaWVyLiBVc2UgYSBkaWZmZXJlbnQgb25lLicpXG4gIH0sXG4gICdeRXJyb3IgaW4gc3RhdGVtZW50ICguKz8pOiguKz8pISA6IEluY29ycmVjdCBzeW50YXggbmVhciBcXCcoLis/KVxcJyBuZWFyIHJlc2VydmVkIGtleXdvcmQgXFwnKC4rPylcXCcgXFxcXFsoW1xcXFxTXFxcXHNdKz8pXFxcXF0kJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0Vycm9yIGluIHN0YXRlbWVudCB7e21vZHVsZU5hbWV9fTp7e3N0YXRlbWVudE51bWJlcn19LiBJbmNvcnJlY3Qgc3ludGF4IG5lYXIgZXhwcmVzc2lvbiBcInt7ZXhwcmVzc2lvbn19XCIgbmVhciByZXNlcnZlZCBrZXl3b3JkIFwie3trZXl3b3JkfX1cIi4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIG1vZHVsZU5hbWU6ICckMScsXG4gICAgICBzdGF0ZW1lbnROdW1iZXI6ICckMicsXG4gICAgICBleHByZXNzaW9uOiAnJDMnLFxuICAgICAga2V5d29yZDogJyQ0J1xuICAgIH1cbiAgfSxcbiAgJ15FeHRlcm5hbCBpZCBub3QgZm91bmQ7IGV4dGVybmFsIGlkID0gSUQgXFxcXFt0eXBlPSguKz8pLCB2YWx1ZT0oLis/KVxcXFxdJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdFeHRlcm5hbCBJRCBub3QgZm91bmQgZm9yIHR5cGUgXCJ7e3R5cGV9fVwiIGFuZCB2YWx1ZSBcInt7dmFsdWV9fVwiLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgdHlwZTogJyQxJyxcbiAgICAgIHZhbHVlOiAnJDInXG4gICAgfVxuICB9LFxuICAnXkVycm9yIG9jY3VycmVkIHdoZW4gdHJ5aW5nIHRvIGZpbmQgYW4gQXBwbGljYXRpb24gZm9yIGlkIElEICguKykgOiBDb3VsZCBub3QgZmluZCBhcHBsaWNhdGlvbiBieSBJRCAoXFxcXGQrKSQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ291bGQgbm90IGZpbmQgYXBwbGljYXRpb24gYnkgSUQge3thcHBsaWNhdGlvbklkfX0uJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBhcHBsaWNhdGlvbklkOiAnJDInXG4gICAgfVxuICB9LFxuICAnXkh0dHAgc3RhdHVzIGNvZGU6IDQwNFxcbntlcnJvcj1cIm9wdGlvbnMvTm90IEZvdW5kXCIsbWVzc2FnZT1cIlVuYWJsZSB0byBmaW5kIG9wdGlvbiBieSBnaXZlbiBrZXk6IHNpZ2ZveC1hZ2VudC9wcm92aWRlci50b2tlblwiLGluZm89XCJodHRwczovL3d3dy5jdW11bG9jaXR5LmNvbS9ndWlkZXMvcmVmZXJlbmNlLWd1aWRlLyNlcnJvcl9yZXBvcnRpbmdcIixkZXRhaWxzPVwibnVsbFwifSc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdVbmFibGUgdG8gZmluZCBvcHRpb24gYnkgZ2l2ZW4ga2V5OiBzaWdmb3gtYWdlbnQvcHJvdmlkZXIudG9rZW4nKVxuICB9LFxuICAnXkZhaWxlZCB0byBkZWxldGUgYXBwbGljYXRpb24uICA6IENhbm5vdCByZW1vdmUgYXBwbGljYXRpb24gYXNzaWduZWQgdG8gb3RoZXIgdGVuYW50cy4kJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0NvdWxkIG5vdCBkZWxldGUgYXBwbGljYXRpb24gYXNzaWduZWQgdG8gb3RoZXIgdGVuYW50cy4nKVxuICB9LFxuICAnXkZhaWxlZCB0byBleHRyYWN0IGNlcnRpZmljYXRlIGZyb20gUEtDUzEyJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdGYWlsZWQgdG8gZXh0cmFjdCBjZXJ0aWZpY2F0ZSBmcm9tIFBLQ1MxMi4nKVxuICB9LFxuICAnXkZhaWxlZCB0byB1cGRhdGUgZG9tYWluIGF0IHRoZSBwbGF0Zm9ybSQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnRmFpbGVkIHRvIHVwZGF0ZSBkb21haW4gYXQgdGhlIHBsYXRmb3JtLicpXG4gIH0sXG4gICdeRmluZGluZyBkZXZpY2UgZGF0YSBmcm9tIGRhdGFiYXNlIGZhaWxlZCA6IE5vIG1hbmFnZWRPYmplY3QgZm9yIGlkIFxcJyguKz8pXFwnISQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ291bGQgbm90IGZpbmQgbWFuYWdlZCBvYmplY3Qgd2l0aCBJRCBcInt7ZGV2aWNlSWR9fVwiLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgZGV2aWNlSWQ6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeRm9sbG93aW5nIG1hbmRhdG9yeSBmaWVsZHMgc2hvdWxkIGJlIGluY2x1ZGVkOiAoLis/KSQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnRm9sbG93aW5nIG1hbmRhdG9yeSBmaWVsZHMgc2hvdWxkIGJlIGluY2x1ZGVkOiB7e2ZpZWxkc319JyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBmaWVsZHM6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeR2xvYmFsIFJvbGUgdXBkYXRlZCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnR2xvYmFsIHJvbGUgdXBkYXRlZCcpXG4gIH0sXG4gICdeR2xvYmFsIFJvbGUgKC4rPykgdXBkYXRlZCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnR2xvYmFsIHJvbGUgXCJ7e25hbWV9fVwiIHVwZGF0ZWQnKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIG5hbWU6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeR2xvYmFsIFJvbGUgKC4rPykgdXBkYXRlZDogKC4rKSQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnR2xvYmFsIHJvbGUgXCJ7e25hbWV9fVwiIHVwZGF0ZWQ6IHt7dXBkYXRlc0xpc3R9fScpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgbmFtZTogJyQxJyxcbiAgICAgIHVwZGF0ZXNMaXN0OiB7XG4gICAgICAgIGNhcHR1cmU6ICckMicsXG4gICAgICAgIHRyYW5zbGF0ZToge1xuICAgICAgICAgICdhcHBsaWNhdGlvbnMgXFxcXFsoW15cXFxcXV0rPylcXFxcXSBhZGRlZCc6IHtcbiAgICAgICAgICAgIGdldHRleHQ6IGdldHRleHQoJ2FwcGxpY2F0aW9ucyB7e2xpc3R9fSBhZGRlZCcpLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICAgICAgICAgIGxpc3Q6ICckMSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgICdhcHBsaWNhdGlvbnMgXFxcXFsoW15cXFxcXV0rPylcXFxcXSByZW1vdmVkJzoge1xuICAgICAgICAgICAgZ2V0dGV4dDogZ2V0dGV4dCgnYXBwbGljYXRpb25zIHt7bGlzdH19IHJlbW92ZWQnKSxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgICAgICAgICBsaXN0OiAnJDEnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICAncm9sZXMgXFxcXFsoW15cXFxcXV0rPylcXFxcXSBhZGRlZCc6IHtcbiAgICAgICAgICAgIGdldHRleHQ6IGdldHRleHQoJ3JvbGVzIHt7bGlzdH19IGFkZGVkJyksXG4gICAgICAgICAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgICAgICAgICAgbGlzdDogJyQxJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgJ3JvbGVzIFxcXFxbKFteXFxcXF1dKz8pXFxcXF0gcmVtb3ZlZCc6IHtcbiAgICAgICAgICAgIGdldHRleHQ6IGdldHRleHQoJ3JvbGVzIHt7bGlzdH19IHJlbW92ZWQnKSxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgICAgICAgICBsaXN0OiAnJDEnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICAnXkdsb2JhbCBSb2xlcyQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnR2xvYmFsIHJvbGVzJylcbiAgfSxcbiAgJ15PcGVyYXRpb24gdXBkYXRlZDogKC4rKSQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnT3BlcmF0aW9uIHVwZGF0ZWQ6IHt7dXBkYXRlc0xpc3R9fScpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgdXBkYXRlc0xpc3Q6IHtcbiAgICAgICAgY2FwdHVyZTogJyQxJyxcbiAgICAgICAgdHJhbnNsYXRlOiB7XG4gICAgICAgICAgJ3N0YXR1cz1cXCcoLis/KVxcJyc6IHtcbiAgICAgICAgICAgIGdldHRleHQ6IGdldHRleHQoJ3N0YXR1cz1cInt7c3RhdHVzIHwgdHJhbnNsYXRlfX1cIicpLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICAgICAgICAgIHN0YXR1czogJyQxJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgJ2Rlc2NyaXB0aW9uPVxcJyguKz8pXFwnJzoge1xuICAgICAgICAgICAgZ2V0dGV4dDogZ2V0dGV4dCgnZGVzY3JpcHRpb249XCJ7e2Rlc2NyaXB0aW9uIHwgdHJhbnNsYXRlfX1cIicpLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnJDEnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICAnZGV2aWNlIG5hbWU9XFwnKC4rPylcXCcnOiB7XG4gICAgICAgICAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdkZXZpY2UgbmFtZT1cInt7ZGV2aWNlTmFtZX19XCInKSxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgICAgICAgICBkZXZpY2VOYW1lOiAnJDEnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICAnZmFpbHVyZSByZWFzb249XFwnKC4rPylcXCcnOiB7XG4gICAgICAgICAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdmYWlsdXJlIHJlYXNvbj1cInt7ZmFpbHVyZVJlYXNvbiB8IHRyYW5zbGF0ZX19XCInKSxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgICAgICAgICBmYWlsdXJlUmVhc29uOiAnJDEnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICAnXklEIFxcXFxbdHlwZT0oLis/KSwgdmFsdWU9KC4rPylcXFxcXSB3YXMgYWxyZWFkeSBib3VuZCB0byBkaWZmZXJlbnQgR2xvYmFsIElELiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnRXh0ZXJuYWwgSUQgXCJ7e3ZhbHVlfX1cIiBvZiB0aGUgdHlwZSBcInt7dHlwZX19XCIgYWxyZWFkeSBleGlzdHMuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICB0eXBlOiAnJDEnLFxuICAgICAgdmFsdWU6ICckMidcbiAgICB9XG4gIH0sXG4gICdeSW52YWxpZCBjcmVkZW50aWFscyEgOiBCYWQgY3JlZGVudGlhbHMkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0ludmFsaWQgY3JlZGVudGlhbHMuJylcbiAgfSxcbiAgJ15JbnZhbGlkIGNyZWRlbnRpYWxzISA6IE5vIHBob25lIG51bWJlciBwcm92aWRlZCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnTG9nIGludG8gdGhlIG1hbmFnZW1lbnQgdGVuYW50IGZpcnN0IGFuZCBlbnRlciB5b3VyIHBob25lIG51bWJlci4nKVxuICB9LFxuICAnXkludmVudG9yeSBSb2xlIHJlbW92ZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0ludmVudG9yeSByb2xlIHJlbW92ZWQnKVxuICB9LFxuICAnXkludmVudG9yeSBSb2xlICguKz8pIHJlbW92ZWQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnSW52ZW50b3J5IHJvbGUgXCJ7e25hbWV9fVwiIGRlbGV0ZWQuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBuYW1lOiAnJDEnXG4gICAgfVxuICB9LFxuICAnXkludmVudG9yeSBSb2xlIHVwZGF0ZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0ludmVudG9yeSByb2xlIHVwZGF0ZWQnKVxuICB9LFxuICAnXkludmVudG9yeSBSb2xlICguKz8pIHVwZGF0ZWQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnSW52ZW50b3J5IHJvbGUgXCJ7e25hbWV9fVwiIHVwZGF0ZWQuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBuYW1lOiAnJDEnXG4gICAgfVxuICB9LFxuICAnXkkvTyBlcnJvcjogQ29ubmVjdGlvbiByZWZ1c2VkOyBuZXN0ZWQgZXhjZXB0aW9uIGlzIENvbm5lY3Rpb24gcmVmdXNlZCA6IENvbm5lY3Rpb24gcmVmdXNlZCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdDb25uZWN0aW9uIHJlZnVzZWQnKVxuICB9LFxuICAnXkkvTyBlcnJvcjogUmVhZCB0aW1lZCBvdXQ7IG5lc3RlZCBleGNlcHRpb24gaXMgUmVhZCB0aW1lZCBvdXQgOiBSZWFkIHRpbWVkIG91dCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdSZWFkIHRpbWVkIG91dCcpXG4gIH0sXG4gICdeTG9nIGZpbGUgcmVxdWVzdGVkJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdMb2cgZmlsZSByZXF1ZXN0ZWQuJylcbiAgfSxcbiAgJ15NYW5hZ2VkIG9iamVjdCBkZWxldGVkJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdNYW5hZ2VkIG9iamVjdCBkZWxldGVkJylcbiAgfSxcbiAgJ15NYW5hZ2VkIG9iamVjdCBcIiguKz8pXCIgZGVsZXRlZCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnTWFuYWdlZCBvYmplY3QgXCJ7e25hbWV9fVwiIGRlbGV0ZWQnKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIG5hbWU6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeTWF4aW11bSBmaWxlIHNpemUgZXhjZWVkZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ01heGltdW0gZmlsZSBzaXplIGV4Y2VlZGVkLicpXG4gIH0sXG4gICdeTWVzc2FnZSB3aXRoIElEICguKz8pIGRvZXNuXFwndCBleGlzdCBpbiBzbWFydCByZXN0IHRlbXBsYXRlICguKz8pJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdNZXNzYWdlIHdpdGggSUQgXCJ7e21lc3NhZ2VJZH19XCIgZG9lc25cXCd0IGV4aXN0IGluIFNtYXJ0UkVTVCB0ZW1wbGF0ZSB3aXRoIElEIFwie3t0ZW1wbGF0ZUlkfX1cIicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgbWVzc2FnZUlkOiAnJDEnLFxuICAgICAgdGVtcGxhdGVJZDogJyQyJ1xuICAgIH1cbiAgfSxcbiAgJ15OZXdEZXZpY2VSZXF1ZXN0IGZvciBpZCA9ICguKz8pIGFscmVhZHkgZXhpc3RzLiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnRGV2aWNlIHJlZ2lzdHJhdGlvbiByZXF1ZXN0IHdpdGggSUQge3tpZH19IGFscmVhZHkgZXhpc3RzLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgaWQ6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeTm8gY29tbXVuaWNhdGlvbiB3aXRoIGRldmljZSBzaW5jZSAoLis/KSQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnTm8gY29tbXVuaWNhdGlvbiB3aXRoIGRldmljZSBzaW5jZSB7e3RpbWVzdGFtcCB8IGFic29sdXRlRGF0ZX19LicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgdGltZXN0YW1wOiAnJDEnXG4gICAgfVxuICB9LFxuICAnXk5vIGRhdGEgcmVjZWl2ZWQgZnJvbSBkZXZpY2Ugd2l0aGluIHJlcXVpcmVkIGludGVydmFsLiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnTm8gZGF0YSByZWNlaXZlZCBmcm9tIGRldmljZSB3aXRoaW4gcmVxdWlyZWQgaW50ZXJ2YWwuJylcbiAgfSxcbiAgJ15ObyBMb1JhIHByb3ZpZGVyIHNldHRpbmdzIGFyZSBmb3VuZC4gUGxlYXNlIGNvbmZpZ3VyZSB0aGUgY29ubmVjdGl2aXR5IHNldHRpbmdzLiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnTm8gTG9SYSBwcm92aWRlciBzZXR0aW5ncyBhcmUgZm91bmQuIFBsZWFzZSBjb25maWd1cmUgdGhlIGNvbm5lY3Rpdml0eSBzZXR0aW5ncy4nKVxuICB9LFxuICAnXk5vdCB3aXRoaW4gYW55IGNvbnRleHQhJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdBIHByb2JsZW0gb2NjdXJyZWQgd2l0aCBtaWNyb3NlcnZpY2Ugc3Vic2NyaXB0aW9uLicpXG4gIH0sXG4gICdeTWF4aW11bSBhZ2UgY2Fubm90IGJlIGJpZ2dlciB0aGFuIDEwIHllYXJzLiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnTWF4aW11bSBhZ2UgY2Fubm90IGJlIGJpZ2dlciB0aGFuIDEwIHllYXJzLicpXG4gIH0sXG4gICdeTWljcm9zZXJ2aWNlIGFwcGxpY2F0aW9uIG5hbWUgaW5jb3JyZWN0LiBQbGVhc2UgdXNlIG9ubHkgbG93ZXItY2FzZSBsZXR0ZXJzLCBkaWdpdHMgYW5kIGRhc2hlcy4gTWF4aW11bSBsZW5ndGggaXMgKFxcXFxkKykgY2hhcmFjdGVycy4kJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ01pY3Jvc2VydmljZSBhcHBsaWNhdGlvbiBuYW1lIGlzIGluY29ycmVjdDogb25seSBsb3dlciBjYXNlIGxldHRlcnMsIGRpZ2l0cyBhbmQgZGFzaGVzIGFsbG93ZWQuIE1heGltdW0gbGVuZ3RoOiB7e21heExlbmd0aH19LicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgbWF4TGVuZ3RoOiAnJDEnXG4gICAgfVxuICB9LFxuICAnXk1pY3Jvc2VydmljZSBub3QgYXZhaWxhYmxlLiokJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ01pY3Jvc2VydmljZSBpcyBub3QgYXZhaWxhYmxlLicpXG4gIH0sXG4gICdeT3BlcmF0aW9uIGNyZWF0ZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ09wZXJhdGlvbiBjcmVhdGVkLicpXG4gIH0sXG4gICdeT3BlcmF0aW9uIHVwZGF0ZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ09wZXJhdGlvbiB1cGRhdGVkLicpXG4gIH0sXG4gICdeT3BlcmF0aW9uIGNyZWF0ZWQ6IHN0YXR1cz1cXCcoLis/KVxcJy4nOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnT3BlcmF0aW9uIGNyZWF0ZWQ6IHN0YXR1cz1cInt7c3RhdHVzIHwgdHJhbnNsYXRlfX1cIi4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIHN0YXR1czogJyQxJ1xuICAgIH1cbiAgfSxcbiAgJ15PcHRpb24gY3JlYXRlZCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnT3B0aW9uIGNyZWF0ZWQuJylcbiAgfSxcbiAgJ15PcHRpb24gXCIoLis/KVwiIGNyZWF0ZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ09wdGlvbiBcInt7b3B0aW9ufX1cIiBjcmVhdGVkLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgb3B0aW9uOiAnJDEnXG4gICAgfVxuICB9LFxuICAnXk9wdGlvbiBkZWxldGVkJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdPcHRpb24gZGVsZXRlZC4nKVxuICB9LFxuICAnXk9wdGlvbiBcIiguKz8pXCIgZGVsZXRlZCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnT3B0aW9uIFwie3tvcHRpb259fVwiIGRlbGV0ZWQuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBvcHRpb246ICckMSdcbiAgICB9XG4gIH0sXG4gICdeT3duZXIgZmllbGQgZXJyb3IuIDogQ2Fubm90IGludHJvZHVjZSBjeWNsaWMgZGVwZW5kZW5jeS4nOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ291bGQgbm90IGludHJvZHVjZSBjeWNsaWMgb3duZXJzaGlwIGRlcGVuZGVuY3kuJylcbiAgfSxcbiAgJ15QYXNzd29yZCBjaGFuZ2UgaXMgdGVtcG9yYXJ5IGJsb2NrZWQuJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdQYXNzd29yZCBjaGFuZ2UgaXMgdGVtcG9yYXJpbHkgYmxvY2tlZC4nKVxuICB9LFxuICAnXlBhc3N3b3JkIGNpcGhlciBkb2VzIG5vdCBtYXRjaCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdQYXNzd29yZCBjaXBoZXIgZG9lcyBub3QgbWF0Y2guJylcbiAgfSxcbiAgJ15QbGF0Zm9ybSBhcHBsaWNhdGlvbiBjYW5ub3QgYmUgYWRkZWQgdG8sIG5vciByZW1vdmVkIGZyb20gYW55IHRlbmFudC4kJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1BsYXRmb3JtIGFwcGxpY2F0aW9uIGNhbm5vdCBiZSBhZGRlZCB0bywgbm9yIHJlbW92ZWQgZnJvbSBhbnkgdGVuYW50LicpXG4gIH0sXG4gICdeUHJpdmF0ZSBrZXkgbXVzdCBiZSBwcm92aWRlZCBpbiBLRVlfUEFJUiBjcmVkZW50aWFscyQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnUHJpdmF0ZSBrZXkgbXVzdCBiZSBwcm92aWRlZCB3aGVuIFwiUHVibGljIC8gcHJpdmF0ZSBrZXlzXCIgb3B0aW9uIGlzIHNlbGVjdGVkLicpXG4gIH0sXG4gICdeUHJpdmF0ZSBrZXkgY2lwaGVyIGRvZXMgbm90IG1hdGNoJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1ByaXZhdGUga2V5IGNpcGhlciBkb2VzIG5vdCBtYXRjaCcpXG4gIH0sXG4gICdeUHJvdG9jb2wgXCIoLis/KVwiIGRvZXMgbm90IHN1cHBvcnQgXCIoLis/KVwiIGNyZWRlbnRpYWxzIHR5cGUkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1Byb3RvY29sIFwie3twcm90b2NvbH19XCIgZG9lcyBub3Qgc3VwcG9ydCBcInt7Y3JlZGVudGlhbHNUeXBlfX1cIiBjcmVkZW50aWFscyB0eXBlLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgcHJvdG9jb2w6ICckMScsXG4gICAgICBjcmVkZW50aWFsc1R5cGU6ICckMidcbiAgICB9XG4gIH0sXG4gICdecHVsbGluZyBpbWFnZSBcIiguKylcIiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnUHVsbGluZyBpbWFnZTogXCJ7e2ltYWdlTmFtZX19XCIuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBpbWFnZU5hbWU6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeUmVhbC10aW1lIGV2ZW50IHByb2Nlc3NpbmcgaXMgY3VycmVudGx5IG92ZXJsb2FkZWQgYW5kIG1heSBzdG9wIHByb2Nlc3NpbmcgeW91ciBldmVudHNcXFxcLiBQbGVhc2UgY29udGFjdCBzdXBwb3J0XFxcXC4kJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1JlYWwtdGltZSBldmVudCBwcm9jZXNzaW5nIGlzIGN1cnJlbnRseSBvdmVybG9hZGVkIGFuZCBtYXkgc3RvcCBwcm9jZXNzaW5nIHlvdXIgZXZlbnRzLiBQbGVhc2UgY29udGFjdCBzdXBwb3J0LicpXG4gIH0sXG4gICdeUmVzb3VyY2UgSUQgXFxcXFt0eXBlPWNvbV9jdW11bG9jaXR5X21vZGVsX2lkdHlwZV9HSWQsIHZhbHVlPSguKz8pXFxcXF0gZm9yIHRoaXMgcmVxdWVzdCBub3QgZm91bmQuJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdDb3VsZCBub3QgZmluZCB0aGUgcmVzb3VyY2Ugd2l0aCBJRCBcInt7aWR9fVwiLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgaWQ6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeU2NhbGVkIHVwIHJlcGxpY2Egc2V0ICguKykgdG8gKFxcXFxkKykkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1JlcGxpY2Egc2V0IFwie3tyZXBsaWNhU2V0TmFtZX19XCIgc2NhbGVkIHVwIHRvIFwie3tzY2FsZU51bWJlcn19XCIuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICByZXBsaWNhU2V0TmFtZTogJyQxJyxcbiAgICAgIHNjYWxlTnVtYmVyOiAnJDInXG4gICAgfVxuICB9LFxuICAnXlNpbXVsYXRvciBzdGF0ZSBpcyBpbnZhbGlkOiAoLispJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdTaW11bGF0b3Igc3RhdGUgaXMgaW52YWxpZDoge3t2aW9sYXRpb25zfX0nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIHZpb2xhdGlvbnM6IHtcbiAgICAgICAgY2FwdHVyZTogJyQxJyxcbiAgICAgICAgdHJhbnNsYXRlOiB7XG4gICAgICAgICAgJyhcXFxcdys/KSAtIG1heSBub3QgYmUgbnVsbCc6IHtcbiAgICAgICAgICAgIGdldHRleHQ6IGdldHRleHQoJ1wie3tmaWVsZH19XCIgc2hvdWxkIG5vdCBiZSBudWxsJyksXG4gICAgICAgICAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgICAgICAgICAgZmllbGQ6ICckMSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgICcoXFxcXHcrPykgLSBtdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byAoXFxcXGQrKSc6IHtcbiAgICAgICAgICAgIGdldHRleHQ6IGdldHRleHQoJ1wie3tmaWVsZH19XCIgbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8ge3ttYXhWYWx1ZX19JyksXG4gICAgICAgICAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgICAgICAgICAgZmllbGQ6ICckMScsXG4gICAgICAgICAgICAgIG1heFZhbHVlOiAnJDInXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICAnKFxcXFx3Kz8pIC0gc2hvdWxkIG5vdCBjb250YWluIG51bGwgdmFsdWVzJzoge1xuICAgICAgICAgICAgZ2V0dGV4dDogZ2V0dGV4dCgnXCJ7e2ZpZWxkfX1cIiBzaG91bGQgbm90IGNvbnRhaW4gbnVsbCB2YWx1ZXMnKSxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgICAgICAgICBmaWVsZDogJyQxJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgJ15TbWFydCByZXN0IHRlbXBsYXRlICguKz8pIGRvZXNuXFwndCBleGlzdCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnU21hcnRSRVNUIHRlbXBsYXRlIHdpdGggaWQgXCJ7e3RlbXBsYXRlSWR9fVwiIGRvZXNuXFwndCBleGlzdCcpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgdGVtcGxhdGVJZDogJyQxJ1xuICAgIH1cbiAgfSxcbiAgJ15TbWFydCBydWxlIGNyZWF0ZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1NtYXJ0IHJ1bGUgY3JlYXRlZC4nKVxuICB9LFxuICAnXlNtYXJ0IHJ1bGUgdXBkYXRlZCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnU21hcnQgcnVsZSB1cGRhdGVkLicpXG4gIH0sXG4gICdeU21hcnQgcnVsZSBlbmFibGVkJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdTbWFydCBydWxlIGFjdGl2YXRlZC4nKVxuICB9LFxuICAnXlNtYXJ0IHJ1bGUgZGlzYWJsZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1NtYXJ0IHJ1bGUgZGVhY3RpdmF0ZWQuJylcbiAgfSxcbiAgJ15TbWFydCBydWxlIGRlbGV0ZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1NtYXJ0IHJ1bGUgZGVsZXRlZC4nKVxuICB9LFxuICAnXlNtYXJ0IHJ1bGUgXCIoLis/KVwiIGNyZWF0ZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1NtYXJ0IHJ1bGUgXCJ7e25hbWV9fVwiIGNyZWF0ZWQuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBuYW1lOiAnJDEnXG4gICAgfVxuICB9LFxuICAnXlNtYXJ0IHJ1bGUgXCIoLis/KVwiIHVwZGF0ZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1NtYXJ0IHJ1bGUgXCJ7e25hbWV9fVwiIHVwZGF0ZWQuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBuYW1lOiAnJDEnXG4gICAgfVxuICB9LFxuICAnXlNtYXJ0IHJ1bGUgXCIoLis/KVwiIGVuYWJsZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1NtYXJ0IHJ1bGUgXCJ7e25hbWV9fVwiIGFjdGl2YXRlZC4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIG5hbWU6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeU21hcnQgcnVsZSBcIiguKz8pXCIgZGlzYWJsZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1NtYXJ0IHJ1bGUgXCJ7e25hbWV9fVwiIGRlYWN0aXZhdGVkLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgbmFtZTogJyQxJ1xuICAgIH1cbiAgfSxcbiAgJ15TbWFydCBydWxlIFwiKC4rPylcIiBkZWxldGVkJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdTbWFydCBydWxlIFwie3tuYW1lfX1cIiBkZWxldGVkLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgbmFtZTogJyQxJ1xuICAgIH1cbiAgfSxcbiAgJ15TdGFydGVkIGNvbnRhaW5lciQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ29udGFpbmVyIHN0YXJ0ZWQuJylcbiAgfSxcbiAgJ15TdWNjZXNzZnVsbHkgYXNzaWduZWQgKC4rKSB0byAoLispJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdcInt7aW1hZ2VOYW1lfX1cIiBhc3NpZ25lZCB0byBcInt7YWRkcmVzc319XCIuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBpbWFnZU5hbWU6ICckMScsXG4gICAgICBhZGRyZXNzOiAnJDInXG4gICAgfVxuICB9LFxuICAnXlN1Y2Nlc3NmdWxseSBwdWxsZWQgaW1hZ2UgXCIoLispXCIkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0ltYWdlIFwie3tpbWFnZU5hbWV9fVwiIHB1bGxlZC4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIGltYWdlTmFtZTogJyQxJ1xuICAgIH1cbiAgfSxcbiAgJ15UZW5hbnQgY3JlYXRpb24gZmFpbGVkLiA6IFRlbmFudCB3aXRoIGdpdmVuIGlkIGFscmVhZHkgZXhpc3RzLiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ291bGQgbm90IGNyZWF0ZSBhIHRlbmFudC4gVGVuYW50IHdpdGggZ2l2ZW4gZG9tYWluL1VSTCBhbHJlYWR5IGV4aXN0cy4nKVxuICB9LFxuICAnXlRlbmFudCBpZCBjYW5ub3QgYmUgYSByZXNlcnZlZCBzcWwga2V5d29yZCBcIiguKz8pXCIuJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdDb3VsZCBub3QgdXNlIGEgcmVzZXJ2ZWQgU1FMIGtleXdvcmQgXCJ7e3RlbmFudElkfX1cIiBhcyBhIGRvbWFpbiBuYW1lLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgdGVuYW50SWQ6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeVGVuYW50IFwiKC4rPylcIiBhY3RpdmF0ZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1RlbmFudCBcInt7dGVuYW50fX1cIiBhY3RpdmF0ZWQuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICB0ZW5hbnQ6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeVGVuYW50ICguKz8pIGhhcyBzdWItdGVuYW50cywgcGxlYXNlIHJlbW92ZSB0aGVtIGZpcnN0ISQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ291bGQgbm90IHJlbW92ZSB0ZW5hbnQgXCJ7e3RlbmFudH19XCIuIFJlbW92ZSBpdHMgc3VidGVuYW50cyBmaXJzdC4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIHRlbmFudDogJyQxJ1xuICAgIH1cbiAgfSxcbiAgJ15UZW5hbnQgYWN0aXZhdGVkJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdUZW5hbnQgYWN0aXZhdGVkJylcbiAgfSxcbiAgJ15UZW5hbnQgXCIoLis/KVwiIGNyZWF0ZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1RlbmFudCBcInt7dGVuYW50fX1cIiBjcmVhdGVkLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgdGVuYW50OiAnJDEnXG4gICAgfVxuICB9LFxuICAnXlRlbmFudCBjcmVhdGVkJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdUZW5hbnQgY3JlYXRlZCcpXG4gIH0sXG4gICdeVGVuYW50IFwiKC4rPylcIiBkZWxldGVkJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdUZW5hbnQgXCJ7e3RlbmFudH19XCIgZGVsZXRlZC4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIHRlbmFudDogJyQxJ1xuICAgIH1cbiAgfSxcbiAgJ15UZW5hbnQgZGVsZXRlZCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnVGVuYW50IGRlbGV0ZWQnKVxuICB9LFxuICAnXlRlbmFudCBcIiguKz8pXCIgc3VzcGVuZGVkJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdUZW5hbnQgXCJ7e3RlbmFudH19XCIgc3VzcGVuZGVkLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgdGVuYW50OiAnJDEnXG4gICAgfVxuICB9LFxuICAnXlRlbmFudCBzdXNwZW5kZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1RlbmFudCBzdXNwZW5kZWQnKVxuICB9LFxuICAnXlRlbmFudCBcIiguKz8pXCIgdXBkYXRlZDogKC4rPykkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1RlbmFudCBcInt7dGVuYW50fX1cIiB1cGRhdGVkOiB7e3Byb3BlcnRpZXN9fS4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIHRlbmFudDogJyQxJyxcbiAgICAgIHByb3BlcnRpZXM6ICckMidcbiAgICB9XG4gIH0sXG4gICdeVGVuYW50IHVwZGF0ZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1RlbmFudCB1cGRhdGVkJylcbiAgfSxcbiAgJ15Ub28gTWFueSBSZXF1ZXN0cyQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnVG9vIG1hbnkgcmVxdWVzdHMuIFRyeSBhZ2FpbiBsYXRlci4nKVxuICB9LFxuICAnXlVzZXIgYWxpYXMgZXF1YWxzIHVzZXJuYW1lIFxcJyguKylcXCckJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1VzZXJuYW1lIGFuZCBsb2dpbiBhbGlhcyBtdXN0IGJlIGRpZmZlcmVudC4nKVxuICB9LFxuICAnXlVzZXIgY3JlYXRlZCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnVXNlciBjcmVhdGVkJylcbiAgfSxcbiAgJ15Vc2VyICguKz8pIGNyZWF0ZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1VzZXIgXCJ7e25hbWV9fVwiIGNyZWF0ZWQnKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIG5hbWU6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeVXNlciBkZWxldGVkJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdVc2VyIGRlbGV0ZWQnKVxuICB9LFxuICAnXlVzZXIgKC4rPykgZGVsZXRlZCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnVXNlciBcInt7bmFtZX19XCIgZGVsZXRlZCcpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgbmFtZTogJyQxJ1xuICAgIH1cbiAgfSxcbiAgJ15Vc2VyIHVwZGF0ZWQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1VzZXIgdXBkYXRlZCcpXG4gIH0sXG4gICdeVXNlciAoLis/KSB1cGRhdGVkOiAoLispJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdVc2VyIFwie3tuYW1lfX1cIiB1cGRhdGVkOiB7e3VwZGF0ZXNMaXN0fX0nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIG5hbWU6ICckMScsXG4gICAgICB1cGRhdGVzTGlzdDoge1xuICAgICAgICBjYXB0dXJlOiAnJDInLFxuICAgICAgICB0cmFuc2xhdGU6IHtcbiAgICAgICAgICAnZGVsZWdhdGVkQnk9XFwnKC4rPylcXCcnOiB7XG4gICAgICAgICAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdkZWxlZ2F0ZWQgYnk6IFwie3tkZWxlZ2F0ZX19XCInKSxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgICAgICAgICBkZWxlZ2F0ZTogJyQxJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgJ293bmVyPVxcJyguKz8pXFwnJzoge1xuICAgICAgICAgICAgZ2V0dGV4dDogZ2V0dGV4dCgnb3duZXI6IFwie3tvd25lcn19XCInKSxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgICAgICAgICBvd25lcjogJyQxJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgJ2ludmVudG9yeSBhc3NpZ25tZW50IFxcXFxbKC4rPylcXFxcXSBhZGRlZCc6IHtcbiAgICAgICAgICAgIGdldHRleHQ6IGdldHRleHQoJ2ludmVudG9yeSBhc3NpZ25tZW50IFt7e2ludmVudG9yeUFzc2lnbm1lbnR9fV0gYWRkZWQnKSxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgICAgICAgICBpbnZlbnRvcnlBc3NpZ25tZW50OiAnJDEnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICAnaW52ZW50b3J5IGFzc2lnbm1lbnQgXFxcXFsoLis/KVxcXFxdIHJlbW92ZWQnOiB7XG4gICAgICAgICAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdpbnZlbnRvcnkgYXNzaWdubWVudCBbe3tpbnZlbnRvcnlBc3NpZ25tZW50fX1dIHJlbW92ZWQnKSxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgICAgICAgICBpbnZlbnRvcnlBc3NpZ25tZW50OiAnJDEnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICAnYXBwbGljYXRpb25zIFxcXFxbKC4rPylcXFxcXSBhZGRlZCQnOiB7XG4gICAgICAgICAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdhcHBsaWNhdGlvbnMgW3t7YXBwbGljYXRpb25zTGlzdH19XSBhZGRlZCcpLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICAgICAgICAgIGFwcGxpY2F0aW9uc0xpc3Q6ICckMSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgICdhcHBsaWNhdGlvbnMgXFxcXFsoLis/KVxcXFxdIHJlbW92ZWQkJzoge1xuICAgICAgICAgICAgZ2V0dGV4dDogZ2V0dGV4dCgnYXBwbGljYXRpb25zIFt7e2FwcGxpY2F0aW9uc0xpc3R9fV0gcmVtb3ZlZCcpLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICAgICAgICAgIGFwcGxpY2F0aW9uc0xpc3Q6ICckMSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgICdnbG9iYWwgcm9sZXMgXFxcXFsoLis/KVxcXFxdIGFkZGVkJCc6IHtcbiAgICAgICAgICAgIGdldHRleHQ6IGdldHRleHQoJ2dsb2JhbCByb2xlcyBbe3tnbG9iYWxSb2xlc0xpc3R9fV0gYWRkZWQnKSxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgICAgICAgICBnbG9iYWxSb2xlc0xpc3Q6ICckMSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgICdnbG9iYWwgcm9sZXMgXFxcXFsoLis/KVxcXFxdIHJlbW92ZWQkJzoge1xuICAgICAgICAgICAgZ2V0dGV4dDogZ2V0dGV4dCgnZ2xvYmFsIHJvbGVzIFt7e2dsb2JhbFJvbGVzTGlzdH19XSByZW1vdmVkJyksXG4gICAgICAgICAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgICAgICAgICAgZ2xvYmFsUm9sZXNMaXN0OiAnJDEnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICAnXlVzZXIgd2l0aCB1c2VybmFtZSBcXCcoLis/KVxcJyBhbHJlYWR5IGV4aXN0cyEgOiBEdXBsaWNhdGVkOiAoLis/KSQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnVXNlciBcInt7dXNlcm5hbWV9fVwiIGFscmVhZHkgZXhpc3RzLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgdXNlcm5hbWU6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeVXNlciB3aXRoIHVzZXJuYW1lIG9yIGFsaWFzIFxcJyguKylcXCcgYWxyZWFkeSBleGlzdHMhIDogRHVwbGljYXRlZDogKC4rKSQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnVXNlciB3aXRoIHVzZXJuYW1lIG9yIGxvZ2luIGFsaWFzIFwie3t1c2VybmFtZU9yQWxpYXN9fVwiIGFscmVhZHkgZXhpc3RzLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgdXNlcm5hbWVPckFsaWFzOiAnJDEnXG4gICAgfVxuICB9LFxuICAnXlVzZXIgd2l0aCBlbWFpbCBcXCcoLis/KVxcJyBhbHJlYWR5IGV4aXN0cyEgOiBEdXBsaWNhdGVkOiAoLis/KSQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnVXNlciB3aXRoIGVtYWlsIFwie3tlbWFpbH19XCIgYWxyZWFkeSBleGlzdHMuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBlbWFpbDogJyQxJ1xuICAgIH1cbiAgfSxcbiAgJ151bmFibGUgdG8gZmluZCBvcHRpb24gd2l0aCBnaXZlbiBrZXkgKC4rPykgOiBDb3VsZCBub3QgZmluZCBlbnRpdHkgT3B0aW9uIGJ5IElEICguKz8pISQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnVW5hYmxlIHRvIGdldCB0ZW5hbnQgb3B0aW9uOiBcInt7b3B0aW9ufX1cIi4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIG9wdGlvbjogJyQyJ1xuICAgIH1cbiAgfSxcbiAgJ151bmFibGUgdG8gZmluZCBvcHRpb24gd2l0aCBnaXZlbiBrZXkgKC4rPykgOiBUaGVyZSBpcyBubyBzeXN0ZW0gcHJvcGVydHkgZm9yIGtleSAoLis/KSQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnVW5hYmxlIHRvIGdldCBzeXN0ZW0gb3B0aW9uOiBcInt7b3B0aW9ufX1cIi4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIG9wdGlvbjogJyQyJ1xuICAgIH1cbiAgfSxcbiAgJ15Xcml0ZSBmYWlsZWQgd2l0aCBlcnJvciBjb2RlIDE2NzMzIGFuZCBlcnJvciBtZXNzYWdlIFxcJ3RyeWluZyB0byBpbmRleCB0ZXh0IHdoZXJlIHRlcm0gbGlzdCBpcyB0b28gYmlnLCBtYXggaXMgNG1iIF9pZDogXCIoLis/KVwiXFwnJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdUaGUgdXBsb2FkZWQgaW1hZ2UgY2Fubm90IGJlIGJpZ2dlciB0aGFuIDQgTUIuIFBsZWFzZSB1cGxvYWQgYSBzbWFsbGVyIG9uZS4nKVxuICB9LFxuICAnXldyaXRlIGZhaWxlZCB3aXRoIGVycm9yIGNvZGUgMTcyODAgYW5kIGVycm9yIG1lc3NhZ2UgXFwnV2lyZWRUaWdlckluZGV4OjppbnNlcnQ6IGtleSB0b28gbGFyZ2UgdG8gaW5kZXgsIGZhaWxpbmcgKC4rPykgeyA6IFwiKC4rPylcIiB9XFwnJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdUaGUgY2hvc2VuIG5hbWUgaXMgdG9vIGxvbmcuIFBsZWFzZSB0cnkgYSBzaG9ydGVyIG9uZS4nKVxuICB9LFxuICAnXllvdSBoYXZlIHJlYWNoZWQgZGV2aWNlcyBsaW1pdC4gTm8gbW9yZSBkZXZpY2VzIGNhbiBiZSByZWdpc3RlcmVkLiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnWW91IHJlYWNoZWQgZGV2aWNlcyBsaW1pdC4gTm8gbW9yZSBkZXZpY2VzIGNhbiBiZSByZWdpc3RlcmVkLicpXG4gIH0sXG4gICdeKC4rKSBzdWNjZWVkZWQgZm9yIHZvbHVtZSBcIiguKylcIic6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdPcGVyYXRpb24gXCJ7e29wZXJhdGlvbn19XCIgc3VjY2VlZGVkIGZvciB2b2x1bWUgXCJ7e3ZvbHVtZX19XCIuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBvcGVyYXRpb246ICckMScsXG4gICAgICB2b2x1bWU6ICckMidcbiAgICB9XG4gIH0sXG4gICdeRXhjZXB0aW9uIG9uIHRlbmFudCAoLispIGluIHN0YXRlbWVudCBcXCcoLispXFwnOiBJbnZvY2F0aW9uIGV4Y2VwdGlvbiB3aGVuIGludm9raW5nIG1ldGhvZCBcXCcoLispXFwnIG9mIGNsYXNzIFxcJyguKylcXCcgcGFzc2luZyBwYXJhbWV0ZXJzIFxcXFxbKC4rKVxcXFxdIGZvciBzdGF0ZW1lbnQgXFwnKC4rKVxcJzogKC4rKSA6ICguKykkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0V4Y2VwdGlvbiBvbiB0ZW5hbnQge3t0ZW5hbnRJZH19IGluIHN0YXRlbWVudCBcInt7bW9kdWxlTmFtZX19XCI6IEludm9jYXRpb24gZXhjZXB0aW9uIHdoZW4gaW52b2tpbmcgbWV0aG9kIFwie3ttZXRob2ROYW1lfX1cIiBvZiBjbGFzcyBcInt7Y2xhc3NQYXRofX1cIiBwYXNzaW5nIHBhcmFtZXRlcnMgW3t7cGFyYW1ldGVyc319XSBmb3Igc3RhdGVtZW50IFwie3tzdGF0ZW1lbnR9fVwiOiB7e2V4Y2VwdGlvblR5cGV9fSA6IHt7ZXhjZXB0aW9uTWVzc2FnZX19LicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgdGVuYW50SWQ6ICckMScsXG4gICAgICBtb2R1bGVOYW1lOiAnJDInLFxuICAgICAgbWV0aG9kTmFtZTogJyQzJyxcbiAgICAgIGNsYXNzUGF0aDogJyQ0JyxcbiAgICAgIHBhcmFtZXRlcnM6ICckNScsXG4gICAgICBzdGF0ZW1lbnQ6ICckNicsXG4gICAgICBleGNlcHRpb25UeXBlOiAnJDcnLFxuICAgICAgZXhjZXB0aW9uTWVzc2FnZTogJyQ4J1xuICAgIH1cbiAgfSxcbiAgJ15ObyBub2RlcyBhcmUgYXZhaWxhYmxlIHRoYXQgbWF0Y2ggYWxsIG9mIHRoZSBwcmVkaWNhdGVzOiAoLispLiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnTm8gbm9kZXMgYXJlIGF2YWlsYWJsZSB0aGF0IG1hdGNoIGFsbCBvZiB0aGUgcHJlZGljYXRlczogW3t7cHJlZGljYXRlc319XS4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIHByZWRpY2F0ZXM6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeUmVhZGluZXNzIHByb2JlIGZhaWxlZDogKC4rKSAoLispOiAoLispOiByZXF1ZXN0IGNhbmNlbGVkIHdoaWxlIHdhaXRpbmcgZm9yIGNvbm5lY3Rpb24gXFxcXChDbGllbnQuVGltZW91dCBleGNlZWRlZCB3aGlsZSBhd2FpdGluZyBoZWFkZXJzXFxcXCkkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1JlYWRpbmVzcyBwcm9iZSBmYWlsZWQ6IHt7cmVxdWVzdE1ldGhvZH19IHt7dXJpfX06IHt7cHJvdG9jb2x9fTogcmVxdWVzdCBjYW5jZWxlZCB3aGlsZSB3YWl0aW5nIGZvciBjb25uZWN0aW9uIChDbGllbnQuVGltZW91dCBleGNlZWRlZCB3aGlsZSBhd2FpdGluZyBoZWFkZXJzKS4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIHJlcXVlc3RNZXRob2Q6ICckMScsXG4gICAgICB1cmk6ICckMicsXG4gICAgICBwcm90b2NvbDogJyQzJ1xuICAgIH1cbiAgfSxcbiAgJ15MaXZlbmVzcyBwcm9iZSBmYWlsZWQ6ICguKykgKC4rKTogKC4rKTogcmVxdWVzdCBjYW5jZWxlZCB3aGlsZSB3YWl0aW5nIGZvciBjb25uZWN0aW9uIFxcXFwoQ2xpZW50LlRpbWVvdXQgZXhjZWVkZWQgd2hpbGUgYXdhaXRpbmcgaGVhZGVyc1xcXFwpJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdMaXZlbmVzcyBwcm9iZSBmYWlsZWQ6IHt7cmVxdWVzdE1ldGhvZH19IHt7dXJpfX06IHt7cHJvdG9jb2x9fTogcmVxdWVzdCBjYW5jZWxlZCB3aGlsZSB3YWl0aW5nIGZvciBjb25uZWN0aW9uIChDbGllbnQuVGltZW91dCBleGNlZWRlZCB3aGlsZSBhd2FpdGluZyBoZWFkZXJzKS4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIHJlcXVlc3RNZXRob2Q6ICckMScsXG4gICAgICB1cmk6ICckMicsXG4gICAgICBwcm90b2NvbDogJyQzJ1xuICAgIH1cbiAgfSxcbiAgJ15FcnJvciBzeW5jaW5nIHBvZCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnUG9kIHN5bmNocm9uaXphdGlvbiBlcnJvci4nKVxuICB9LFxuICAnXkZhaWxlZCBjcmVhdGUgcG9kIHNhbmRib3guJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdQb2Qgc2FuZGJveCBjcmVhdGlvbiBmYWlsZWQuJylcbiAgfSxcbiAgJ15FeGNlcHRpb24gb24gdGVuYW50ICguKykgaW4gc3RhdGVtZW50IFxcJyguKylcXCc6IEh0dHAgc3RhdHVzIGNvZGU6IChcXFxcZCspIFxcXFx7ZXJyb3I9XCJhbGFybS9VbnByb2Nlc3NhYmxlIEVudGl0eVwiLG1lc3NhZ2U9XCIoLispXCIsaW5mbz1cImh0dHBzOi8vd3d3LmN1bXVsb2NpdHkuY29tL2d1aWRlcy9yZWZlcmVuY2UtZ3VpZGUvI2Vycm9yX3JlcG9ydGluZ1wiLGRldGFpbHM9XCJudWxsXCJcXFxcfSQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnRXhjZXB0aW9uIG9uIHRlbmFudCB7e3RlbmFudElkfX0gaW4gc3RhdGVtZW50IFwie3tzdGF0ZW1lbnR9fVwiOiBIVFRQIHN0YXR1cyBjb2RlOiB7e2h0dHBTdGF0dXNDb2RlfX0gOiB7e21lc3NhZ2UgfCB0cmFuc2xhdGV9fScpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgdGVuYW50SWQ6ICckMScsXG4gICAgICBzdGF0ZW1lbnQ6ICckMicsXG4gICAgICBodHRwU3RhdHVzQ29kZTogJyQzJyxcbiAgICAgIG1lc3NhZ2U6ICckNCdcbiAgICB9XG4gIH0sXG4gICdeVXNlciBcXCcoLispXFwnIGlzIG1hbmFnZWQgYnkgYSByZW1vdGUgaWRlbnRpdHkgbWFuYWdlbWVudCBzZXJ2aWNlIGRlZmluZWQgYnkgYW4gYWRtaW5pc3RyYXRvciwgZGlyZWN0IHVwZGF0ZSBpcyBmb3JiaWRkZW4kJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1VzZXIgXCJ7e3VzZXJOYW1lfX1cIiBpcyBtYW5hZ2VkIGJ5IGEgcmVtb3RlIGlkZW50aXR5IG1hbmFnZW1lbnQgc2VydmljZSBkZWZpbmVkIGJ5IGFuIGFkbWluaXN0cmF0b3IsIGRpcmVjdCB1cGRhdGUgaXMgZm9yYmlkZGVuLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgdXNlck5hbWU6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeQWRkZWQgbmV3IGNoaWxkIGRldmljZSB0byBcIiguKylcIiBcXFxcKElEOiAoLispXFxcXCkuJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdBZGRlZCBuZXcgY2hpbGQgZGV2aWNlIHRvIFwie3twYXJlbnREZXZpY2VOYW1lfX1cIiAoSUQ6IHt7cGFyZW50RGV2aWNlSWR9fSkuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBwYXJlbnREZXZpY2VOYW1lOiAnJDEnLFxuICAgICAgcGFyZW50RGV2aWNlSWQ6ICckMidcbiAgICB9XG4gIH0sXG4gICdeVXBkYXRlZCBjaGlsZCBkZXZpY2Ugb2YgXCIoLispXCIgXFxcXChJRDogKC4rKVxcXFwpLiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnVXBkYXRlZCBjaGlsZCBkZXZpY2Ugb2YgXCJ7e3BhcmVudERldmljZU5hbWV9fVwiIChJRDoge3twYXJlbnREZXZpY2VJZH19KS4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIHBhcmVudERldmljZU5hbWU6ICckMScsXG4gICAgICBwYXJlbnREZXZpY2VJZDogJyQyJ1xuICAgIH1cbiAgfSxcbiAgJ15BZGRlZCBjaGlsZCBkZXZpY2UgXCIoLispXCIgXFxcXChJRDogKC4rKVxcXFwpLiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQWRkZWQgY2hpbGQgZGV2aWNlIFwie3tuYW1lfX1cIiAoSUQ6IHt7aWR9fSkuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBuYW1lOiAnJDEnLFxuICAgICAgaWQ6ICckMidcbiAgICB9XG4gIH0sXG4gICdeUmVtb3ZlZCBjaGlsZCBkZXZpY2UgXCIoLispXCIgXFxcXChJRDogKC4rKVxcXFwpLiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnUmVtb3ZlZCBjaGlsZCBkZXZpY2UgXCJ7e25hbWV9fVwiIChJRDoge3tpZH19KS4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIG5hbWU6ICckMScsXG4gICAgICBpZDogJyQyJ1xuICAgIH1cbiAgfSxcbiAgJ15DaGFuZ2UgdmFsdWUgb2YgXCIoLispXCIgdG8gKC4rKSAoLispLiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ2hhbmdlIHZhbHVlIG9mIFwie3tuYW1lfX1cIiB0byB7e3ZhbHVlfX17e3VuaXR9fS4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIG5hbWU6ICckMScsXG4gICAgICB2YWx1ZTogJyQyJyxcbiAgICAgIHVuaXQ6ICckMydcbiAgICB9XG4gIH0sXG4gICdeQ2hhbmdlIHZhbHVlIG9mIFwiKC4rKVwiIHRvICguKykuJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdDaGFuZ2UgdmFsdWUgb2YgXCJ7e25hbWV9fVwiIHRvIHt7dmFsdWV9fS4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIG5hbWU6ICckMScsXG4gICAgICB2YWx1ZTogJyQyJ1xuICAgIH1cbiAgfSxcbiAgJ15DaGFuZ2Ugc3RhdHVzIG9mIFwiKC4rKVwiIHRvIFwiKC4rKVwiLiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ2hhbmdlIHN0YXR1cyBvZiBcInt7bmFtZX19XCIgdG8gXCJ7e2xhYmVsfX1cIi4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIG5hbWU6ICckMScsXG4gICAgICBsYWJlbDogJyQyJ1xuICAgIH1cbiAgfSxcbiAgJ15TZW5kIG1lc3NhZ2UgXCIoLispXCIuJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdTZW5kIG1lc3NhZ2UgXCJ7e3N0cn19XCIuJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBzdHI6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeQ2xvc2UgcmVsYXkgKC4rKS4kJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0Nsb3NlIHJlbGF5IHt7bnVtYmVyfX0uJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBudW1iZXI6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeT3BlbiByZWxheSAoLispLiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnT3BlbiByZWxheSB7e251bWJlcn19LicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgbnVtYmVyOiAnJDEnXG4gICAgfVxuICB9LFxuICAnXkNoYW5nZSB0cmFjZSBzdGF0dXMgdG8gKC4rKS4kJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0NoYW5nZSB0cmFjZSBzdGF0dXMgdG8ge3tzdGF0ZSB8IHRyYW5zbGF0ZX19LicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgc3RhdGU6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeQ2hhbmdlIHJlbGF5IHN0YXR1cyB0byAoLispLiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ2hhbmdlIHJlbGF5IHN0YXR1cyB0byB7e3N0YXR1cyB8IHRyYW5zbGF0ZX19LicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgc3RhdHVzOiAnJDEnXG4gICAgfVxuICB9LFxuICAnXkNsb3NpbmcgcmVsYXkgKC4rKS4kJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0Nsb3NpbmcgcmVsYXkge3tudW1iZXJ9fS4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIG51bWJlcjogJyQxJ1xuICAgIH1cbiAgfSxcbiAgJ15PcGVuaW5nIHJlbGF5ICguKykuJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdPcGVuaW5nIHJlbGF5IHt7bnVtYmVyfX0uJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBudW1iZXI6ICckMSdcbiAgICB9XG4gIH0sXG4gICdeVXBkYXRlIGZpcm13YXJlIHRvOiAoLispIFxcXFwodmVyc2lvbjogKC4rKVxcXFwpLiQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnVXBkYXRlIGZpcm13YXJlIHRvOiB7e25hbWV9fSAodmVyc2lvbjoge3t2ZXJzaW9ufX0pLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgbmFtZTogJyQxJyxcbiAgICAgIHZlcnNpb246ICckMidcbiAgICB9XG4gIH0sXG4gICdeRXhlY3V0ZSBnZW5lcmljIGNvbW1hbmQ6ICguKykuJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdFeGVjdXRlIGdlbmVyaWMgY29tbWFuZDoge3tjb21tYW5kfX0uJyksXG4gICAgcGxhY2Vob2xkZXJzOiB7XG4gICAgICBjb21tYW5kOiAnJDEnXG4gICAgfVxuICB9LFxuICAnXkZhaWxlZCB0byByZWZyZXNoIGFwcGxpY2F0aW9uLiA6IENhbm5vdCByZWZyZXNoIG5vbiBsb2NhbC1ob3N0ZWQgYXBwbGljYXRpb24uJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdDb3VsZCBub3QgcmVhY3RpdmF0ZSB0aGUgYXBwbGljYXRpb24gYXMgaXQgaXMgbm90IGhvc3RlZCBsb2NhbGx5LicpXG4gIH0sXG4gICdeRmFpbGVkIHRvIHJlZnJlc2ggYXBwbGljYXRpb24uIDogQ2Fubm90IHJlZnJlc2ggYXBwbGljYXRpb24gd2l0aG91dCBhY3RpdmUgdmVyc2lvbiBpZC4kJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0NvdWxkIG5vdCByZWFjdGl2YXRlIHRoZSBhcHBsaWNhdGlvbiBhcyBpdCBoYXMgbm8gYWN0aXZlIHZlcnNpb24uJylcbiAgfSxcbiAgLy8gVE9ETzogcmVtb3ZlIGlmIHdlIGRlY2lkZSBub3QgdG8gdHJhbnNsYXRlIHN1Y2ggbWVzc2FnZXM6XG4gIC8vICdeS2lsbGluZyBjb250YWluZXIgd2l0aCBpZCAoLispOk5lZWQgdG8ga2lsbCBQb2QkJzoge1xuICAvLyAgIGdldHRleHQ6IGdldHRleHQoJ0tpbGxpbmcgY29udGFpbmVyIHdpdGggSUQgXCJ7e2NvbnRhaW5lcklkfX1cIi4gTmVlZCB0byBraWxsIFBvZC4nKSxcbiAgLy8gICBwbGFjZWhvbGRlcnM6IHtcbiAgLy8gICAgIGNvbnRhaW5lcklkOiAnJDEnXG4gIC8vICAgfVxuICAvLyB9LFxuICAnXlNjYWxlZCBkb3duIHJlcGxpY2Egc2V0ICguKykgdG8gKFxcXFxkKykkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1JlcGxpY2Egc2V0IFwie3tyZXBsaWNhU2V0TmFtZX19XCIgc2NhbGVkIGRvd24gdG8gXCJ7e3NjYWxlTnVtYmVyfX1cIi4nKSxcbiAgICBwbGFjZWhvbGRlcnM6IHtcbiAgICAgIHJlcGxpY2FTZXROYW1lOiAnJDEnLFxuICAgICAgc2NhbGVOdW1iZXI6ICckMidcbiAgICB9XG4gIH0sXG4gICdeRGVsZXRlZCBwb2Q6ICguKykkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1BvZCBcInt7aW1hZ2VOYW1lfX1cIiBkZWxldGVkLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgaW1hZ2VOYW1lOiAnJDEnXG4gICAgfVxuICB9LFxuICAnXkNvbnRhaW5lciBpbWFnZSBcIiguKylcIiBhbHJlYWR5IHByZXNlbnQgb24gbWFjaGluZSQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ29udGFpbmVyIGltYWdlIFwie3tpbWFnZU5hbWV9fVwiIGFscmVhZHkgZXhpc3RzLicpLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgaW1hZ2VOYW1lOiAnJDEnXG4gICAgfVxuICB9XG59O1xuIl19