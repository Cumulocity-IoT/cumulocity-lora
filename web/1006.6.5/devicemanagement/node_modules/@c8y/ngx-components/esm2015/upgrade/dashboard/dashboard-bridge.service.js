import * as tslib_1 from "tslib";
import { Injectable, NgZone } from '@angular/core';
import { Router } from '@angular/router';
import { getActivatedRoute } from '@c8y/ngx-components';
import { ContextDashboardService, ContextDashboardManagedObject, ContextWidgetConfig } from '@c8y/ngx-components/context-dashboard';
import { gettext } from '@c8y/ngx-components';
let DashboardBridgeService = class DashboardBridgeService {
    constructor(ng1Injector, zone, router, contextDashboardService) {
        this.ng1Injector = ng1Injector;
        this.zone = zone;
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.dashboardSvc = ng1Injector.get('dashboardSvc');
        this.compile = ng1Injector.get('$compile');
    }
    get ng1Components() {
        return this.ng1Injector.get('c8yComponents');
    }
    instantiateComponent(widget, element) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { dashboard, context, child } = widget;
            if (dashboard) {
                const transformedChild = yield this.dashboardSvc.transformChildWithContext(this.dashboardSvc.forcedContext || context, dashboard, child);
                if (this.dashboardSvc.forcedContext || dashboard.deviceType) {
                    yield this.dashboardSvc.updateConfigTargetsWithContext(this.dashboardSvc.forcedContext || context, transformedChild.config);
                }
                return this.zone.runOutsideAngular(() => this.loadTemplate(transformedChild, child, element, context));
            }
            else {
                return this.loadConfigTemplate(element, widget);
            }
        });
    }
    editDashboard(dashboard) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.dashboardSvc.editCurrentDashboard({ dashboardId: dashboard.id });
        });
    }
    copyDashboard() {
        const dashboard = this.getDashboard();
        const couldCopy = this.dashboardSvc.copyDashboard(dashboard.c8y_Dashboard);
        if (couldCopy) {
            this.dashboardClipboard = dashboard;
            return dashboard;
        }
    }
    pasteDashboard() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const newDashboard = yield this.dashboardSvc.pasteDashboard();
                yield this.contextDashboardService.addTab(newDashboard);
                this.navigateToDashboard(newDashboard);
                this.dashboardClipboard = undefined;
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    instantiateDeviceSelector(element, widgetConfig) {
        return this.loadConfigTemplate(element, widgetConfig, true);
    }
    loadTemplate(transformedChild, child, element, context) {
        const scope = this.ng1Injector.get('$rootScope').$new(true);
        scope.child = transformedChild;
        scope.dashboardContext = context;
        if (child.widgetComponent) {
            element.innerHTML = `<c8y-ui-component component-name="'${child.widgetComponent}'" config="child.config" context="dashboardContext"></c8y-ui-component>`;
        }
        else if (child.templateUrl) {
            element.innerHTML = `<ng-include src="'${child.templateUrl}'"></ng-include>`;
        }
        this.compile(element)(scope);
        return scope;
    }
    navigateToDashboard(dashboard) {
        if (/dashboard/.test(this.router.url)) {
            this.router.navigate(['..', dashboard.id], {
                relativeTo: getActivatedRoute(this.router)
            });
        }
        else {
            this.router.navigate(['..', 'dashboard', dashboard.id], {
                relativeTo: getActivatedRoute(this.router)
            });
        }
    }
    getDashboard() {
        return getActivatedRoute(this.router).snapshot.data.dashboard;
    }
    loadConfigTemplate(element, widgetConfig, onlyDeviceSelector = false) {
        const { settings } = widgetConfig;
        const scope = this.ng1Injector.get('$rootScope').$new(true);
        scope.settings = Object.assign({}, settings, settings.ng1);
        scope.options = widgetConfig.options;
        scope.config = widgetConfig;
        scope.forms = {};
        scope.dashboard = widgetConfig.dashboardMo;
        scope.rootId = settings.context.id;
        let configCmp = '';
        if (!onlyDeviceSelector) {
            if (widgetConfig.settings.configComponent) {
                configCmp = `<c8y-ui-component component-name="'${widgetConfig.settings.configComponent}'" config="config"></c8y-ui-component>`;
            }
            else if (widgetConfig.settings.configTemplateUrl) {
                configCmp = `<ng-include src="'${widgetConfig.settings.configTemplateUrl}'"></ng-include>`;
            }
        }
        element.innerHTML = `
    <ng-form name="forms.componentForm">
      <div class="form-group"
        ng-if="!settings.noDeviceTarget"
        ng-style="{height: settings.hideTarget && '0', overflow: 'hidden'}"
      >
        <label translate>${gettext('Target assets or devices')}</label>
        <c8y-device-selector-combo parent="rootId"
          selected-child-device="config.device"
          groups-selectable="settings.groupsSelectable"
        ></c8y-device-selector-combo>
      </div>
      ${configCmp}
    </ng-form>`;
        scope.$watch('forms.componentForm.$invalid', formStatus => {
            this.contextDashboardService.formDisabled = formStatus;
        });
        this.compile(element)(scope);
        this.contextDashboardService.formDisabled = scope.forms.componentForm.$invalid;
        return scope;
    }
};
DashboardBridgeService.ctorParameters = () => [
    { type: undefined },
    { type: NgZone },
    { type: Router },
    { type: ContextDashboardService }
];
DashboardBridgeService = tslib_1.__decorate([
    Injectable()
], DashboardBridgeService);
export { DashboardBridgeService };
//# sourceMappingURL=data:application/json;base64,