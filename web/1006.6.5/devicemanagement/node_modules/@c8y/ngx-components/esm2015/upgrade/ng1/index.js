import { NgZone } from '@angular/core';
import { downgradeInjectable } from '@angular/upgrade/static';
import * as angular from 'angular';
import { c8yAlertDecorator } from './alert.decorator';
import { bootstrapComponent, userTotpComponent, appLogsAutoRefreshComponent, dataGridComponent } from './downgraded.components';
import { alertsService, apiService, appStateService, bridgeService, docsService, headerService, passwordService, serverMessagesService, translateService, userMenuService } from './downgraded.services';
import { gettextCatalogDecorator } from './gettextCatalog.decorator';
import { groupTypesHierarchyNavigatorDecorator } from './groupsHierarchyNavigator.decorator';
import { c8yNg1HttpInterceptor } from './http.interceptor';
import { c8yNavigatorProvider } from './navigator.provider';
import { rootComponent } from './root.component';
import { c8yTitleDecorator } from './title.decorator';
import { c8yViewsProvider } from './views.provider';
const NAME = 'c8y.upgrade';
window.preventNg1Bootstrap = true;
angular
    .module(NAME, [])
    .config($httpProvider => {
    'ngInject';
    const ng1InterceptorIndex = $httpProvider.interceptors.indexOf('c8yLoadingIndicator');
    if (ng1InterceptorIndex > -1) {
        $httpProvider.interceptors.splice(ng1InterceptorIndex, 1);
    }
    $httpProvider.interceptors.push(c8yNg1HttpInterceptor);
})
    .component('c8yUiRoot', rootComponent)
    .directive('c8yBootstrap', bootstrapComponent)
    .factory('c8yBridgeService', bridgeService)
    .factory('c8yAppStateService', appStateService)
    .factory('c8yHeaderService', headerService)
    .factory('c8yUserMenuService', userMenuService)
    .decorator('c8yTitle', c8yTitleDecorator)
    .factory('c8yAlert', alertsService)
    .decorator('c8yAlert', c8yAlertDecorator)
    .decorator('groupTypesHierarchyNavigator', groupTypesHierarchyNavigatorDecorator) // prevents loading the groups
    .factory('c8yApiService', apiService)
    .factory('c8yDocs', docsService)
    .service('c8yPasswordConfirm', passwordService);
angular
    .module('c8y.ui')
    .provider('c8yNavigator', c8yNavigatorProvider)
    .provider('c8yViews', c8yViewsProvider)
    .directive('c8yUserTotpRevoke', userTotpComponent)
    .directive('c8yAppLogsAutoRefresh', appLogsAutoRefreshComponent)
    .directive('c8yDataGrid', dataGridComponent)
    .factory('c8yTranslate', translateService)
    .decorator('gettextCatalog', gettextCatalogDecorator)
    .factory('c8yServerMessages', serverMessagesService)
    .factory('ngZone', downgradeInjectable(NgZone));
export const ng1Modules = ['app', NAME];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3VwZ3JhZGUvIiwic291cmNlcyI6WyJuZzEvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEtBQUssT0FBTyxNQUFNLFNBQVMsQ0FBQztBQUNuQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQ0wsa0JBQWtCLEVBQ2xCLGlCQUFpQixFQUNqQiwyQkFBMkIsRUFDM0IsaUJBQWlCLEVBQ2xCLE1BQU0seUJBQXlCLENBQUM7QUFDakMsT0FBTyxFQUNMLGFBQWEsRUFDYixVQUFVLEVBQ1YsZUFBZSxFQUNmLGFBQWEsRUFDYixXQUFXLEVBQ1gsYUFBYSxFQUNiLGVBQWUsRUFDZixxQkFBcUIsRUFDckIsZ0JBQWdCLEVBQ2hCLGVBQWUsRUFDaEIsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNyRSxPQUFPLEVBQUUscUNBQXFDLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUM3RixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFcEQsTUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDO0FBQzFCLE1BQWMsQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7QUFFM0MsT0FBTztLQUNKLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDO0tBQ2hCLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRTtJQUN0QixVQUFVLENBQUM7SUFFWCxNQUFNLG1CQUFtQixHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDdEYsSUFBSSxtQkFBbUIsR0FBRyxDQUFDLENBQUMsRUFBRTtRQUM1QixhQUFhLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUMzRDtJQUNELGFBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDekQsQ0FBQyxDQUFDO0tBQ0QsU0FBUyxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUM7S0FDckMsU0FBUyxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQztLQUM3QyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsYUFBYSxDQUFDO0tBQzFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxlQUFlLENBQUM7S0FDOUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLGFBQWEsQ0FBQztLQUMxQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsZUFBZSxDQUFDO0tBQzlDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsaUJBQWlCLENBQUM7S0FDeEMsT0FBTyxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUM7S0FDbEMsU0FBUyxDQUFDLFVBQVUsRUFBRSxpQkFBaUIsQ0FBQztLQUN4QyxTQUFTLENBQUMsOEJBQThCLEVBQUUscUNBQXFDLENBQUMsQ0FBQyw4QkFBOEI7S0FDL0csT0FBTyxDQUFDLGVBQWUsRUFBRSxVQUFVLENBQUM7S0FDcEMsT0FBTyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUM7S0FDL0IsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBRWxELE9BQU87S0FDSixNQUFNLENBQUMsUUFBUSxDQUFDO0tBQ2hCLFFBQVEsQ0FBQyxjQUFjLEVBQUUsb0JBQW9CLENBQUM7S0FDOUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQztLQUN0QyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsaUJBQWlCLENBQUM7S0FDakQsU0FBUyxDQUFDLHVCQUF1QixFQUFFLDJCQUEyQixDQUFDO0tBQy9ELFNBQVMsQ0FBQyxhQUFhLEVBQUUsaUJBQWlCLENBQUM7S0FDM0MsT0FBTyxDQUFDLGNBQWMsRUFBRSxnQkFBZ0IsQ0FBQztLQUN6QyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsdUJBQXVCLENBQUM7S0FDcEQsT0FBTyxDQUFDLG1CQUFtQixFQUFFLHFCQUFxQixDQUFDO0tBQ25ELE9BQU8sQ0FBQyxRQUFRLEVBQUUsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUVsRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGRvd25ncmFkZUluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci91cGdyYWRlL3N0YXRpYyc7XG5pbXBvcnQgKiBhcyBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IHsgYzh5QWxlcnREZWNvcmF0b3IgfSBmcm9tICcuL2FsZXJ0LmRlY29yYXRvcic7XG5pbXBvcnQge1xuICBib290c3RyYXBDb21wb25lbnQsXG4gIHVzZXJUb3RwQ29tcG9uZW50LFxuICBhcHBMb2dzQXV0b1JlZnJlc2hDb21wb25lbnQsXG4gIGRhdGFHcmlkQ29tcG9uZW50XG59IGZyb20gJy4vZG93bmdyYWRlZC5jb21wb25lbnRzJztcbmltcG9ydCB7XG4gIGFsZXJ0c1NlcnZpY2UsXG4gIGFwaVNlcnZpY2UsXG4gIGFwcFN0YXRlU2VydmljZSxcbiAgYnJpZGdlU2VydmljZSxcbiAgZG9jc1NlcnZpY2UsXG4gIGhlYWRlclNlcnZpY2UsXG4gIHBhc3N3b3JkU2VydmljZSxcbiAgc2VydmVyTWVzc2FnZXNTZXJ2aWNlLFxuICB0cmFuc2xhdGVTZXJ2aWNlLFxuICB1c2VyTWVudVNlcnZpY2Vcbn0gZnJvbSAnLi9kb3duZ3JhZGVkLnNlcnZpY2VzJztcbmltcG9ydCB7IGdldHRleHRDYXRhbG9nRGVjb3JhdG9yIH0gZnJvbSAnLi9nZXR0ZXh0Q2F0YWxvZy5kZWNvcmF0b3InO1xuaW1wb3J0IHsgZ3JvdXBUeXBlc0hpZXJhcmNoeU5hdmlnYXRvckRlY29yYXRvciB9IGZyb20gJy4vZ3JvdXBzSGllcmFyY2h5TmF2aWdhdG9yLmRlY29yYXRvcic7XG5pbXBvcnQgeyBjOHlOZzFIdHRwSW50ZXJjZXB0b3IgfSBmcm9tICcuL2h0dHAuaW50ZXJjZXB0b3InO1xuaW1wb3J0IHsgYzh5TmF2aWdhdG9yUHJvdmlkZXIgfSBmcm9tICcuL25hdmlnYXRvci5wcm92aWRlcic7XG5pbXBvcnQgeyByb290Q29tcG9uZW50IH0gZnJvbSAnLi9yb290LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBjOHlUaXRsZURlY29yYXRvciB9IGZyb20gJy4vdGl0bGUuZGVjb3JhdG9yJztcbmltcG9ydCB7IGM4eVZpZXdzUHJvdmlkZXIgfSBmcm9tICcuL3ZpZXdzLnByb3ZpZGVyJztcblxuY29uc3QgTkFNRSA9ICdjOHkudXBncmFkZSc7XG4od2luZG93IGFzIGFueSkucHJldmVudE5nMUJvb3RzdHJhcCA9IHRydWU7XG5cbmFuZ3VsYXJcbiAgLm1vZHVsZShOQU1FLCBbXSlcbiAgLmNvbmZpZygkaHR0cFByb3ZpZGVyID0+IHtcbiAgICAnbmdJbmplY3QnO1xuXG4gICAgY29uc3QgbmcxSW50ZXJjZXB0b3JJbmRleCA9ICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLmluZGV4T2YoJ2M4eUxvYWRpbmdJbmRpY2F0b3InKTtcbiAgICBpZiAobmcxSW50ZXJjZXB0b3JJbmRleCA+IC0xKSB7XG4gICAgICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5zcGxpY2UobmcxSW50ZXJjZXB0b3JJbmRleCwgMSk7XG4gICAgfVxuICAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goYzh5TmcxSHR0cEludGVyY2VwdG9yKTtcbiAgfSlcbiAgLmNvbXBvbmVudCgnYzh5VWlSb290Jywgcm9vdENvbXBvbmVudClcbiAgLmRpcmVjdGl2ZSgnYzh5Qm9vdHN0cmFwJywgYm9vdHN0cmFwQ29tcG9uZW50KVxuICAuZmFjdG9yeSgnYzh5QnJpZGdlU2VydmljZScsIGJyaWRnZVNlcnZpY2UpXG4gIC5mYWN0b3J5KCdjOHlBcHBTdGF0ZVNlcnZpY2UnLCBhcHBTdGF0ZVNlcnZpY2UpXG4gIC5mYWN0b3J5KCdjOHlIZWFkZXJTZXJ2aWNlJywgaGVhZGVyU2VydmljZSlcbiAgLmZhY3RvcnkoJ2M4eVVzZXJNZW51U2VydmljZScsIHVzZXJNZW51U2VydmljZSlcbiAgLmRlY29yYXRvcignYzh5VGl0bGUnLCBjOHlUaXRsZURlY29yYXRvcilcbiAgLmZhY3RvcnkoJ2M4eUFsZXJ0JywgYWxlcnRzU2VydmljZSlcbiAgLmRlY29yYXRvcignYzh5QWxlcnQnLCBjOHlBbGVydERlY29yYXRvcilcbiAgLmRlY29yYXRvcignZ3JvdXBUeXBlc0hpZXJhcmNoeU5hdmlnYXRvcicsIGdyb3VwVHlwZXNIaWVyYXJjaHlOYXZpZ2F0b3JEZWNvcmF0b3IpIC8vIHByZXZlbnRzIGxvYWRpbmcgdGhlIGdyb3Vwc1xuICAuZmFjdG9yeSgnYzh5QXBpU2VydmljZScsIGFwaVNlcnZpY2UpXG4gIC5mYWN0b3J5KCdjOHlEb2NzJywgZG9jc1NlcnZpY2UpXG4gIC5zZXJ2aWNlKCdjOHlQYXNzd29yZENvbmZpcm0nLCBwYXNzd29yZFNlcnZpY2UpO1xuXG5hbmd1bGFyXG4gIC5tb2R1bGUoJ2M4eS51aScpXG4gIC5wcm92aWRlcignYzh5TmF2aWdhdG9yJywgYzh5TmF2aWdhdG9yUHJvdmlkZXIpXG4gIC5wcm92aWRlcignYzh5Vmlld3MnLCBjOHlWaWV3c1Byb3ZpZGVyKVxuICAuZGlyZWN0aXZlKCdjOHlVc2VyVG90cFJldm9rZScsIHVzZXJUb3RwQ29tcG9uZW50KVxuICAuZGlyZWN0aXZlKCdjOHlBcHBMb2dzQXV0b1JlZnJlc2gnLCBhcHBMb2dzQXV0b1JlZnJlc2hDb21wb25lbnQpXG4gIC5kaXJlY3RpdmUoJ2M4eURhdGFHcmlkJywgZGF0YUdyaWRDb21wb25lbnQpXG4gIC5mYWN0b3J5KCdjOHlUcmFuc2xhdGUnLCB0cmFuc2xhdGVTZXJ2aWNlKVxuICAuZGVjb3JhdG9yKCdnZXR0ZXh0Q2F0YWxvZycsIGdldHRleHRDYXRhbG9nRGVjb3JhdG9yKVxuICAuZmFjdG9yeSgnYzh5U2VydmVyTWVzc2FnZXMnLCBzZXJ2ZXJNZXNzYWdlc1NlcnZpY2UpXG4gIC5mYWN0b3J5KCduZ1pvbmUnLCBkb3duZ3JhZGVJbmplY3RhYmxlKE5nWm9uZSkpO1xuXG5leHBvcnQgY29uc3QgbmcxTW9kdWxlcyA9IFsnYXBwJywgTkFNRV07XG4iXX0=