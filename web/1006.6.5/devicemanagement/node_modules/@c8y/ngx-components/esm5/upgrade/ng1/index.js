import { NgZone } from '@angular/core';
import { downgradeInjectable } from '@angular/upgrade/static';
import * as angular from 'angular';
import { c8yAlertDecorator } from './alert.decorator';
import { bootstrapComponent, userTotpComponent, appLogsAutoRefreshComponent, dataGridComponent } from './downgraded.components';
import { alertsService, apiService, appStateService, bridgeService, docsService, headerService, passwordService, serverMessagesService, translateService, userMenuService } from './downgraded.services';
import { gettextCatalogDecorator } from './gettextCatalog.decorator';
import { groupTypesHierarchyNavigatorDecorator } from './groupsHierarchyNavigator.decorator';
import { c8yNg1HttpInterceptor } from './http.interceptor';
import { c8yNavigatorProvider } from './navigator.provider';
import { rootComponent } from './root.component';
import { c8yTitleDecorator } from './title.decorator';
import { c8yViewsProvider } from './views.provider';
var NAME = 'c8y.upgrade';
window.preventNg1Bootstrap = true;
angular
    .module(NAME, [])
    .config(function ($httpProvider) {
    'ngInject';
    var ng1InterceptorIndex = $httpProvider.interceptors.indexOf('c8yLoadingIndicator');
    if (ng1InterceptorIndex > -1) {
        $httpProvider.interceptors.splice(ng1InterceptorIndex, 1);
    }
    $httpProvider.interceptors.push(c8yNg1HttpInterceptor);
})
    .component('c8yUiRoot', rootComponent)
    .directive('c8yBootstrap', bootstrapComponent)
    .factory('c8yBridgeService', bridgeService)
    .factory('c8yAppStateService', appStateService)
    .factory('c8yHeaderService', headerService)
    .factory('c8yUserMenuService', userMenuService)
    .decorator('c8yTitle', c8yTitleDecorator)
    .factory('c8yAlert', alertsService)
    .decorator('c8yAlert', c8yAlertDecorator)
    .decorator('groupTypesHierarchyNavigator', groupTypesHierarchyNavigatorDecorator) // prevents loading the groups
    .factory('c8yApiService', apiService)
    .factory('c8yDocs', docsService)
    .service('c8yPasswordConfirm', passwordService);
angular
    .module('c8y.ui')
    .provider('c8yNavigator', c8yNavigatorProvider)
    .provider('c8yViews', c8yViewsProvider)
    .directive('c8yUserTotpRevoke', userTotpComponent)
    .directive('c8yAppLogsAutoRefresh', appLogsAutoRefreshComponent)
    .directive('c8yDataGrid', dataGridComponent)
    .factory('c8yTranslate', translateService)
    .decorator('gettextCatalog', gettextCatalogDecorator)
    .factory('c8yServerMessages', serverMessagesService)
    .factory('ngZone', downgradeInjectable(NgZone));
export var ng1Modules = ['app', NAME];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3VwZ3JhZGUvIiwic291cmNlcyI6WyJuZzEvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEtBQUssT0FBTyxNQUFNLFNBQVMsQ0FBQztBQUNuQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQ0wsa0JBQWtCLEVBQ2xCLGlCQUFpQixFQUNqQiwyQkFBMkIsRUFDM0IsaUJBQWlCLEVBQ2xCLE1BQU0seUJBQXlCLENBQUM7QUFDakMsT0FBTyxFQUNMLGFBQWEsRUFDYixVQUFVLEVBQ1YsZUFBZSxFQUNmLGFBQWEsRUFDYixXQUFXLEVBQ1gsYUFBYSxFQUNiLGVBQWUsRUFDZixxQkFBcUIsRUFDckIsZ0JBQWdCLEVBQ2hCLGVBQWUsRUFDaEIsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNyRSxPQUFPLEVBQUUscUNBQXFDLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUM3RixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFcEQsSUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDO0FBQzFCLE1BQWMsQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7QUFFM0MsT0FBTztLQUNKLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDO0tBQ2hCLE1BQU0sQ0FBQyxVQUFBLGFBQWE7SUFDbkIsVUFBVSxDQUFDO0lBRVgsSUFBTSxtQkFBbUIsR0FBRyxhQUFhLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3RGLElBQUksbUJBQW1CLEdBQUcsQ0FBQyxDQUFDLEVBQUU7UUFDNUIsYUFBYSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDM0Q7SUFDRCxhQUFhLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ3pELENBQUMsQ0FBQztLQUNELFNBQVMsQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDO0tBQ3JDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsa0JBQWtCLENBQUM7S0FDN0MsT0FBTyxDQUFDLGtCQUFrQixFQUFFLGFBQWEsQ0FBQztLQUMxQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsZUFBZSxDQUFDO0tBQzlDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxhQUFhLENBQUM7S0FDMUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGVBQWUsQ0FBQztLQUM5QyxTQUFTLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDO0tBQ3hDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDO0tBQ2xDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsaUJBQWlCLENBQUM7S0FDeEMsU0FBUyxDQUFDLDhCQUE4QixFQUFFLHFDQUFxQyxDQUFDLENBQUMsOEJBQThCO0tBQy9HLE9BQU8sQ0FBQyxlQUFlLEVBQUUsVUFBVSxDQUFDO0tBQ3BDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDO0tBQy9CLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUVsRCxPQUFPO0tBQ0osTUFBTSxDQUFDLFFBQVEsQ0FBQztLQUNoQixRQUFRLENBQUMsY0FBYyxFQUFFLG9CQUFvQixDQUFDO0tBQzlDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUM7S0FDdEMsU0FBUyxDQUFDLG1CQUFtQixFQUFFLGlCQUFpQixDQUFDO0tBQ2pELFNBQVMsQ0FBQyx1QkFBdUIsRUFBRSwyQkFBMkIsQ0FBQztLQUMvRCxTQUFTLENBQUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDO0tBQzNDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsZ0JBQWdCLENBQUM7S0FDekMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLHVCQUF1QixDQUFDO0tBQ3BELE9BQU8sQ0FBQyxtQkFBbUIsRUFBRSxxQkFBcUIsQ0FBQztLQUNuRCxPQUFPLENBQUMsUUFBUSxFQUFFLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFFbEQsTUFBTSxDQUFDLElBQU0sVUFBVSxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBkb3duZ3JhZGVJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWMnO1xuaW1wb3J0ICogYXMgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCB7IGM4eUFsZXJ0RGVjb3JhdG9yIH0gZnJvbSAnLi9hbGVydC5kZWNvcmF0b3InO1xuaW1wb3J0IHtcbiAgYm9vdHN0cmFwQ29tcG9uZW50LFxuICB1c2VyVG90cENvbXBvbmVudCxcbiAgYXBwTG9nc0F1dG9SZWZyZXNoQ29tcG9uZW50LFxuICBkYXRhR3JpZENvbXBvbmVudFxufSBmcm9tICcuL2Rvd25ncmFkZWQuY29tcG9uZW50cyc7XG5pbXBvcnQge1xuICBhbGVydHNTZXJ2aWNlLFxuICBhcGlTZXJ2aWNlLFxuICBhcHBTdGF0ZVNlcnZpY2UsXG4gIGJyaWRnZVNlcnZpY2UsXG4gIGRvY3NTZXJ2aWNlLFxuICBoZWFkZXJTZXJ2aWNlLFxuICBwYXNzd29yZFNlcnZpY2UsXG4gIHNlcnZlck1lc3NhZ2VzU2VydmljZSxcbiAgdHJhbnNsYXRlU2VydmljZSxcbiAgdXNlck1lbnVTZXJ2aWNlXG59IGZyb20gJy4vZG93bmdyYWRlZC5zZXJ2aWNlcyc7XG5pbXBvcnQgeyBnZXR0ZXh0Q2F0YWxvZ0RlY29yYXRvciB9IGZyb20gJy4vZ2V0dGV4dENhdGFsb2cuZGVjb3JhdG9yJztcbmltcG9ydCB7IGdyb3VwVHlwZXNIaWVyYXJjaHlOYXZpZ2F0b3JEZWNvcmF0b3IgfSBmcm9tICcuL2dyb3Vwc0hpZXJhcmNoeU5hdmlnYXRvci5kZWNvcmF0b3InO1xuaW1wb3J0IHsgYzh5TmcxSHR0cEludGVyY2VwdG9yIH0gZnJvbSAnLi9odHRwLmludGVyY2VwdG9yJztcbmltcG9ydCB7IGM4eU5hdmlnYXRvclByb3ZpZGVyIH0gZnJvbSAnLi9uYXZpZ2F0b3IucHJvdmlkZXInO1xuaW1wb3J0IHsgcm9vdENvbXBvbmVudCB9IGZyb20gJy4vcm9vdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgYzh5VGl0bGVEZWNvcmF0b3IgfSBmcm9tICcuL3RpdGxlLmRlY29yYXRvcic7XG5pbXBvcnQgeyBjOHlWaWV3c1Byb3ZpZGVyIH0gZnJvbSAnLi92aWV3cy5wcm92aWRlcic7XG5cbmNvbnN0IE5BTUUgPSAnYzh5LnVwZ3JhZGUnO1xuKHdpbmRvdyBhcyBhbnkpLnByZXZlbnROZzFCb290c3RyYXAgPSB0cnVlO1xuXG5hbmd1bGFyXG4gIC5tb2R1bGUoTkFNRSwgW10pXG4gIC5jb25maWcoJGh0dHBQcm92aWRlciA9PiB7XG4gICAgJ25nSW5qZWN0JztcblxuICAgIGNvbnN0IG5nMUludGVyY2VwdG9ySW5kZXggPSAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5pbmRleE9mKCdjOHlMb2FkaW5nSW5kaWNhdG9yJyk7XG4gICAgaWYgKG5nMUludGVyY2VwdG9ySW5kZXggPiAtMSkge1xuICAgICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMuc3BsaWNlKG5nMUludGVyY2VwdG9ySW5kZXgsIDEpO1xuICAgIH1cbiAgICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKGM4eU5nMUh0dHBJbnRlcmNlcHRvcik7XG4gIH0pXG4gIC5jb21wb25lbnQoJ2M4eVVpUm9vdCcsIHJvb3RDb21wb25lbnQpXG4gIC5kaXJlY3RpdmUoJ2M4eUJvb3RzdHJhcCcsIGJvb3RzdHJhcENvbXBvbmVudClcbiAgLmZhY3RvcnkoJ2M4eUJyaWRnZVNlcnZpY2UnLCBicmlkZ2VTZXJ2aWNlKVxuICAuZmFjdG9yeSgnYzh5QXBwU3RhdGVTZXJ2aWNlJywgYXBwU3RhdGVTZXJ2aWNlKVxuICAuZmFjdG9yeSgnYzh5SGVhZGVyU2VydmljZScsIGhlYWRlclNlcnZpY2UpXG4gIC5mYWN0b3J5KCdjOHlVc2VyTWVudVNlcnZpY2UnLCB1c2VyTWVudVNlcnZpY2UpXG4gIC5kZWNvcmF0b3IoJ2M4eVRpdGxlJywgYzh5VGl0bGVEZWNvcmF0b3IpXG4gIC5mYWN0b3J5KCdjOHlBbGVydCcsIGFsZXJ0c1NlcnZpY2UpXG4gIC5kZWNvcmF0b3IoJ2M4eUFsZXJ0JywgYzh5QWxlcnREZWNvcmF0b3IpXG4gIC5kZWNvcmF0b3IoJ2dyb3VwVHlwZXNIaWVyYXJjaHlOYXZpZ2F0b3InLCBncm91cFR5cGVzSGllcmFyY2h5TmF2aWdhdG9yRGVjb3JhdG9yKSAvLyBwcmV2ZW50cyBsb2FkaW5nIHRoZSBncm91cHNcbiAgLmZhY3RvcnkoJ2M4eUFwaVNlcnZpY2UnLCBhcGlTZXJ2aWNlKVxuICAuZmFjdG9yeSgnYzh5RG9jcycsIGRvY3NTZXJ2aWNlKVxuICAuc2VydmljZSgnYzh5UGFzc3dvcmRDb25maXJtJywgcGFzc3dvcmRTZXJ2aWNlKTtcblxuYW5ndWxhclxuICAubW9kdWxlKCdjOHkudWknKVxuICAucHJvdmlkZXIoJ2M4eU5hdmlnYXRvcicsIGM4eU5hdmlnYXRvclByb3ZpZGVyKVxuICAucHJvdmlkZXIoJ2M4eVZpZXdzJywgYzh5Vmlld3NQcm92aWRlcilcbiAgLmRpcmVjdGl2ZSgnYzh5VXNlclRvdHBSZXZva2UnLCB1c2VyVG90cENvbXBvbmVudClcbiAgLmRpcmVjdGl2ZSgnYzh5QXBwTG9nc0F1dG9SZWZyZXNoJywgYXBwTG9nc0F1dG9SZWZyZXNoQ29tcG9uZW50KVxuICAuZGlyZWN0aXZlKCdjOHlEYXRhR3JpZCcsIGRhdGFHcmlkQ29tcG9uZW50KVxuICAuZmFjdG9yeSgnYzh5VHJhbnNsYXRlJywgdHJhbnNsYXRlU2VydmljZSlcbiAgLmRlY29yYXRvcignZ2V0dGV4dENhdGFsb2cnLCBnZXR0ZXh0Q2F0YWxvZ0RlY29yYXRvcilcbiAgLmZhY3RvcnkoJ2M4eVNlcnZlck1lc3NhZ2VzJywgc2VydmVyTWVzc2FnZXNTZXJ2aWNlKVxuICAuZmFjdG9yeSgnbmdab25lJywgZG93bmdyYWRlSW5qZWN0YWJsZShOZ1pvbmUpKTtcblxuZXhwb3J0IGNvbnN0IG5nMU1vZHVsZXMgPSBbJ2FwcCcsIE5BTUVdO1xuIl19