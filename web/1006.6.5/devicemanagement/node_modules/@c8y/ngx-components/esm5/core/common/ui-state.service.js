import * as tslib_1 from "tslib";
import { Injectable, isDevMode } from '@angular/core';
import { keys } from 'lodash-es';
import { BehaviorSubject } from 'rxjs';
import { scan, distinctUntilChanged, map, filter } from 'rxjs/operators';
import { StateService } from './state-service.abstract';
import { OptionsService } from './options.service';
import { FetchClient } from '@c8y/client';
import { ApplicationService, IUser, ICurrentTenant, TenantOptionsService, SystemOptionsService } from '@c8y/client';
import { ApiService } from '@c8y/ngx-components/api';
var AppStateService = /** @class */ (function (_super) {
    tslib_1.__extends(AppStateService, _super);
    function AppStateService(applicationService, apiService, options, fetchClient) {
        var _this = _super.call(this) || this;
        _this.applicationService = applicationService;
        _this.apiService = apiService;
        _this.options = options;
        _this.fetchClient = fetchClient;
        _this.state$ = new BehaviorSubject({
            app: {
                name: _this.options.name,
                contextPath: _this.getCurrentContextPath() || _this.options.contextPath
            },
            supportUrl: _this.options.supportUrl,
            lang: _this.options.get('defaultLanguage', 'en'),
            langs: _this.getLangs(),
            langsDetail: _this.options.languages,
            loginOptions: _this.options.loginOptions,
            activateSupportUserAvailable: undefined,
            versions: {
                backend: undefined,
                ui: _this.options.versions || { ngx: undefined }
            },
            hidePowered: _this.options.hidePowered,
            isLoading: false,
            showRightDrawer: _this.options.rightDrawer,
            loginExtraLink: _this.options.get('login_extra_link'),
            newsletter: _this.options.newsletter
        });
        _this.currentUser = new BehaviorSubject(null);
        _this.currentTenant = new BehaviorSubject(null);
        _this.apiService.calls
            .pipe(filter(function (_a) {
            var url = _a.url;
            return !/cep\/realtime/.test(url);
        }), map(function (_a) {
            var phase = _a.phase;
            return (phase === 'start' ? 1 : -1);
        }), scan(function (count, item) { return count + item; }, 0), map(function (count) { return count > 0; }), distinctUntilChanged())
            .subscribe(function (isLoading) { return (_this.state.isLoading = isLoading); });
        _this.assignApplicationKeyToDefaultHeaders();
        return _this;
    }
    AppStateService.prototype.assignApplicationKeyToDefaultHeaders = function () {
        if (!isDevMode()) {
            this.fetchClient.defaultHeaders = tslib_1.__assign({}, (this.fetchClient.defaultHeaders || {}), { 'X-Cumulocity-Application-Key': this.options.key });
        }
    };
    Object.defineProperty(AppStateService.prototype, "state", {
        /**
         * Returns the current state.
         */
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    AppStateService.prototype.getLangs = function () {
        var languages = this.options.languages;
        return languages ? keys(languages).filter(function (k) { return languages[k]; }) : [];
    };
    Object.defineProperty(AppStateService.prototype, "uiVersion", {
        /**
         * Returns the correct UI version. In hybrid mode for angular and ngx.
         */
        get: function () {
            var version = this.state.versions.ui;
            return version.ngx || version.ng1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Loads the app manifest. If no access -> throw an error to verify app access.
     */
    AppStateService.prototype.loadManifest = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var application, ex_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.applicationService.detail(this.state.app.contextPath + "/manifest")];
                    case 1:
                        application = (_a.sent())
                            .data.application;
                        this.state.app.manifest = application;
                        this.loadDefaultOptions();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        throw ex_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Checks current users application list and matches it against given application name.
     * Returns true if application is in the list.
     * @param name application name
     */
    AppStateService.prototype.isApplicationAvailable = function (name) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.applicationService.listByUser(undefined, { pageSize: 100 })];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data.some(function (app) { return app.name === name; })];
                }
            });
        });
    };
    AppStateService.prototype.getCurrentContextPath = function () {
        var match = window.location.pathname.match(/\/apps\/(public\/){0,1}(.+?)(\/|\?|#|$)/);
        return match && match[2];
    };
    AppStateService.prototype.loadDefaultOptions = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = this.state;
                        return [4 /*yield*/, this.options.getSupportUrl()];
                    case 1:
                        _a.supportUrl = _d.sent();
                        _b = this.state;
                        return [4 /*yield*/, this.options.getActivateSupportUser()];
                    case 2:
                        _b.activateSupportUserAvailable = _d.sent();
                        _c = this.state.versions;
                        return [4 /*yield*/, this.options.getSystemOption('system', 'version')];
                    case 3:
                        _c.backend = _d.sent();
                        try {
                            this.showIncompatibleVersionsError();
                        }
                        catch (ex) {
                            // ignore this
                        }
                        this.emitNewState();
                        return [2 /*return*/];
                }
            });
        });
    };
    AppStateService.prototype.showIncompatibleVersionsError = function () {
        var uiVersion = this.state.versions.ui.ngx;
        var backendVersion = this.state.versions.backend;
        var uiVersionArray = uiVersion.replace(/[^\d.]/g, '').split('.').map(Number);
        var beVersionArray = backendVersion.replace(/[^\d.]/g, '').split('.').map(Number);
        var multiplier = Math.pow(10, Math.ceil(Math.log10(Math.max.apply(Math, tslib_1.__spread(uiVersionArray, beVersionArray)) + 1)));
        var sumReducer = function (acc, cur) { return acc + cur; };
        var calculateVersionMapper = function (curr, idx) { return curr * (multiplier / Math.pow(10, idx)); };
        var uiVersionNumber = uiVersionArray.map(calculateVersionMapper).reduce(sumReducer);
        var beVersionNumber = beVersionArray.map(calculateVersionMapper).reduce(sumReducer);
        var showError = uiVersionNumber > beVersionNumber;
        if (showError) {
            var errorContent = "You are running version " + uiVersion + " of the UI and version " + backendVersion + " of backend!";
            console.log('%c ' + errorContent, 'font-weight: bold; font-size: 30px; color: red;');
        }
    };
    AppStateService.ctorParameters = function () { return [
        { type: ApplicationService },
        { type: ApiService },
        { type: OptionsService },
        { type: FetchClient }
    ]; };
    AppStateService = tslib_1.__decorate([
        Injectable()
    ], AppStateService);
    return AppStateService;
}(StateService));
export { AppStateService };
//# sourceMappingURL=data:application/json;base64,